import {
  Reveal
} from "./chunk-2SAW7IS7.js";
import {
  caretAltDownIcon,
  caretAltRightIcon
} from "./chunk-RFS2H3W2.js";
import {
  Draggable,
  IconWrap,
  Keys,
  classNames,
  dispatchEvent,
  guid,
  kendoThemeMaps,
  validatePackage2 as validatePackage
} from "./chunk-KTMNFILY.js";
import {
  require_prop_types
} from "./chunk-O6GWARG4.js";
import {
  require_react
} from "./chunk-ABDRZE5M.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/@progress/kendo-react-treeview/dist/es/TreeView.js
var React2 = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-treeview/dist/es/utils/itemIdUtils.js
var EMPTY_ID = "";
var ZERO_LEVEL_ZERO_NODE_ID = "0";
var SEPARATOR = "_";
function getItemById(itemId, items, childrenField) {
  if (isIdZeroLevel(itemId)) {
    return items[Number(itemId)];
  } else {
    var rootParentItem = items[Number(getRootParentId(itemId))];
    var subItems = rootParentItem && rootParentItem[childrenField] || [];
    return subItems.length ? getItemById(getIdWithoutRootParentId(itemId), subItems, childrenField) : void 0;
  }
}
function getRootParentId(itemId) {
  return isIdEmptyOrZeroLevel(itemId) ? itemId : itemId.split(SEPARATOR)[0];
}
function getIdWithoutRootParentId(itemId) {
  if (isIdEmptyOrZeroLevel(itemId)) {
    return itemId;
  } else {
    var firstSeparatorIndex = itemId.indexOf(SEPARATOR);
    return itemId.substring(firstSeparatorIndex + 1);
  }
}
function getFirstChildId(itemId) {
  return createId("0", itemId);
}
function createId(childId, parentId) {
  childId = childId.toString();
  return parentId ? parentId + SEPARATOR + childId : childId;
}
function getDirectParentId(itemId) {
  var lastSeparatorIndex = itemId.lastIndexOf(SEPARATOR);
  return lastSeparatorIndex < 0 ? EMPTY_ID : itemId.substring(0, lastSeparatorIndex);
}
function isIdEmptyOrZeroLevel(itemId) {
  return itemId === EMPTY_ID || itemId.indexOf(SEPARATOR) < 0;
}
function isIdZeroLevel(itemId) {
  return itemId !== EMPTY_ID && itemId.indexOf(SEPARATOR) < 0;
}
function getAllShortIds(itemId) {
  return itemId.split(SEPARATOR);
}
function getShortId(itemId) {
  var lastSeparatorIndex = itemId.lastIndexOf(SEPARATOR);
  return lastSeparatorIndex < 0 ? itemId : itemId.substring(lastSeparatorIndex + 1);
}
function getDecrementedItemIdAfterRemoval(removedItemId, itemId) {
  var preservedItemId = itemId;
  removedItemId = "r" + SEPARATOR + removedItemId;
  itemId = "r" + SEPARATOR + itemId;
  var itemSharedPath = getDirectParentId(removedItemId) + SEPARATOR;
  if (itemId.startsWith(itemSharedPath)) {
    var itemNotSharedPath = itemId.substring(itemSharedPath.length);
    if (itemNotSharedPath) {
      var siblingShortId = getRootParentId(itemNotSharedPath);
      if (Number(getShortId(removedItemId)) < Number(siblingShortId)) {
        var decrementedId = itemSharedPath + (Number(siblingShortId) - 1).toString() + itemNotSharedPath.substring(siblingShortId.length);
        return getIdWithoutRootParentId(decrementedId);
      }
    }
  }
  return preservedItemId;
}

// node_modules/@progress/kendo-react-treeview/dist/es/utils/SortedPublicItemIds.js
var PROPS_COUNT_LIMIT = 5e4;
var SortedPublicItemIds = (
  /** @class */
  function() {
    function SortedPublicItemIds2() {
      this.objects = [];
    }
    SortedPublicItemIds2.prototype.init = function(publicItemIds) {
      var currentObj;
      for (var i = 0; i < publicItemIds.length; i++) {
        if (i % PROPS_COUNT_LIMIT === 0) {
          currentObj = {};
          this.objects.push(currentObj);
        }
        currentObj[publicItemIds[i]] = true;
      }
    };
    SortedPublicItemIds2.prototype.hasId = function(publicItemId) {
      return this.objects.some(function(obj) {
        return obj[publicItemId];
      });
    };
    return SortedPublicItemIds2;
  }()
);
var SortedPublicItemIds_default = SortedPublicItemIds;

// node_modules/@progress/kendo-react-treeview/dist/es/utils/misc.js
function getNestedValue(fieldName, dataItem) {
  var path = (fieldName || "").split(".");
  var data = dataItem;
  path.forEach(function(p) {
    data = data ? data[p] : void 0;
  });
  return data;
}
function isArray(operation) {
  return operation.length !== void 0;
}

// node_modules/@progress/kendo-react-treeview/dist/es/utils/itemUtils.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function hasChildren(item, childrenField) {
  var children = getNestedValue(childrenField, item);
  return Boolean(children && children.length);
}
function isItemExpandedAndWithChildren(item, fieldsSvc) {
  return fieldsSvc.expanded(item) && hasChildren(item, fieldsSvc.getChildrenField());
}
function resolveItemId(publicId, idField, items, childrenField) {
  var resolvedIds = resolveItemsIds([publicId], idField, items, childrenField);
  return resolvedIds.length ? resolvedIds[0] : void 0;
}
function resolveItemsIds(publicIds, idField, items, childrenField) {
  var result = [];
  var sortedIds = new SortedPublicItemIds_default();
  sortedIds.init(publicIds);
  resolveItemsIdsHelper(sortedIds, idField, items, EMPTY_ID, result, childrenField);
  return result;
}
function updateItem(items, itemId, update, cloneField, childrenField) {
  var _a;
  var itemIndex = Number(getRootParentId(itemId));
  if (itemIndex >= items.length) {
    return items;
  }
  var result = items;
  var item = items[itemIndex];
  if (!item[cloneField]) {
    result = items.slice();
    item = result[itemIndex] = Object.assign({}, item, (_a = {}, _a[cloneField] = true, _a));
  }
  if (isIdZeroLevel(itemId)) {
    update(item);
  } else if (item[childrenField]) {
    item[childrenField] = updateItem(item[childrenField], getIdWithoutRootParentId(itemId), update, cloneField, childrenField);
  }
  return result;
}
function isEnabledAndAllParentsEnabled(itemId, items, fieldsSvc) {
  var ids = getAllShortIds(itemId);
  var currentItems = items;
  for (var i = 0; i < ids.length; i++) {
    var currentItem = currentItems[Number(ids[i])];
    if (fieldsSvc.disabled(currentItem)) {
      return false;
    } else {
      currentItems = currentItem[fieldsSvc.getChildrenField()];
    }
  }
  return true;
}
function getAllDirectIndirectChildrenIds(item, itemId, childrenField, idField) {
  return idField ? getChildrenPublicIds(item) : getChildrenHierarchicalIndices(item, itemId);
  function getChildrenHierarchicalIndices(startItem, startItemId) {
    var result = [];
    var children = startItem[childrenField] || [];
    for (var i = 0; i < children.length; i++) {
      var id = createId(i, startItemId);
      result.push(id);
      result = result.concat(getChildrenHierarchicalIndices(children[i], id));
    }
    return result;
  }
  function getChildrenPublicIds(startItem) {
    var result = [];
    var children = startItem[childrenField] || [];
    for (var i = 0; i < children.length; i++) {
      result.push(getNestedValue(idField, children[i]));
      result = result.concat(getChildrenPublicIds(children[i]));
    }
    return result;
  }
}
function areAllDirectChildrenChecked(item, itemId, idField, childrenField, check) {
  var children = item[childrenField] || [];
  return children.every(function(child, index) {
    return check.indexOf(idField ? getNestedValue(idField, child) : createId(index, itemId)) > -1;
  });
}
function getAllParents(itemId, childrenField, items) {
  var result = [];
  var ids = getAllShortIds(itemId);
  var currentItems = items;
  for (var i = 0; i < ids.length - 1; i++) {
    if (!currentItems) {
      break;
    }
    var currentItem = currentItems[Number(ids[i])];
    result.push(currentItem);
    currentItems = currentItem[childrenField];
  }
  return result;
}
function removeItem(itemId, childrenField, items) {
  var result = items.slice();
  if (isIdZeroLevel(itemId)) {
    result.splice(Number(itemId), 1);
  } else {
    var rootParentIndex = Number(getRootParentId(itemId));
    var rootParent = result[rootParentIndex] = __assign({}, result[rootParentIndex]);
    rootParent[childrenField] = removeItem(getIdWithoutRootParentId(itemId), childrenField, rootParent[childrenField]);
  }
  return result;
}
function addItem(item, operation, childrenField, targetItemId, items) {
  var result = items.slice();
  if (isIdZeroLevel(targetItemId)) {
    if (operation === "child") {
      var targetItem = result[Number(targetItemId)] = __assign({}, result[Number(targetItemId)]);
      if (targetItem[childrenField]) {
        targetItem[childrenField] = targetItem[childrenField].slice();
        targetItem[childrenField].push(item);
      } else {
        targetItem[childrenField] = [item];
      }
    } else {
      result.splice(Number(targetItemId) + (operation === "after" ? 1 : 0), 0, item);
    }
  } else {
    var rootParentIndex = Number(getRootParentId(targetItemId));
    var rootParent = result[rootParentIndex] = __assign({}, result[rootParentIndex]);
    rootParent[childrenField] = addItem(item, operation, childrenField, getIdWithoutRootParentId(targetItemId), rootParent[childrenField]);
  }
  return result;
}
function resolveItemsIdsHelper(publicItemIds, idField, items, parentItemId, resolvedIds, childrenField) {
  for (var i = 0; i < items.length; i++) {
    var item = items[i];
    var id = createId(i, parentItemId);
    if (publicItemIds.hasId(getNestedValue(idField, item))) {
      resolvedIds.push(id);
    }
    if (hasChildren(item, childrenField)) {
      resolveItemsIdsHelper(publicItemIds, idField, getNestedValue(childrenField, item), id, resolvedIds, childrenField);
    }
  }
}

// node_modules/@progress/kendo-react-treeview/dist/es/utils/getItemIdUponKeyboardNavigation.js
function getItemIdUponKeyboardNavigation(item, itemId, items, keyCode, fieldsSvc) {
  switch (keyCode) {
    case Keys.left:
      return getIdUponLeftKey();
    case Keys.right:
      return getIdUponRightKey();
    case Keys.up:
      return getIdUponUpKey();
    case Keys.down:
      return getIdUponDownKey();
    case Keys.home:
      return ZERO_LEVEL_ZERO_NODE_ID;
    case Keys.end:
      return getIdUponEndKey();
    default:
      return itemId;
  }
  function getIdUponLeftKey() {
    return isIdZeroLevel(itemId) || fieldsSvc.expanded(item) && isEnabledAndAllParentsEnabled(itemId, items, fieldsSvc) ? itemId : getDirectParentId(itemId);
  }
  function getIdUponRightKey() {
    return isItemExpandedAndWithChildren(item, fieldsSvc) ? getFirstChildId(itemId) : itemId;
  }
  function getIdUponUpKey() {
    var index = Number(getShortId(itemId));
    var parentId = getDirectParentId(itemId);
    return index ? getLastNotOpenedChildId(createId(index - 1, parentId), items, fieldsSvc) : isIdZeroLevel(itemId) ? itemId : parentId;
  }
  function getIdUponDownKey() {
    if (isItemExpandedAndWithChildren(item, fieldsSvc)) {
      return getFirstChildId(itemId);
    } else {
      return getNextItemId(itemId, items, fieldsSvc) || itemId;
    }
  }
  function getIdUponEndKey() {
    var result = (items.length - 1).toString();
    var currentItem = items[items.length - 1];
    var children;
    while (isItemExpandedAndWithChildren(currentItem, fieldsSvc)) {
      children = currentItem[fieldsSvc.getChildrenField()];
      result = createId(children.length - 1, result);
      currentItem = children[children.length - 1];
    }
    return result;
  }
}
function getNextItemId(itemId, items, fieldsSvc) {
  var parentId = getDirectParentId(itemId);
  var parent = parentId ? getItemById(parentId, items, fieldsSvc.getChildrenField()) : void 0;
  var siblings = parent ? parent[fieldsSvc.getChildrenField()] : items;
  var index = Number(getShortId(itemId));
  return index < siblings.length - 1 ? createId(index + 1, parentId) : parent ? getNextItemId(parentId, items, fieldsSvc) : void 0;
}
function getLastNotOpenedChildId(itemId, items, fieldsSvc) {
  var item = getItemById(itemId, items, fieldsSvc.getChildrenField());
  if (isItemExpandedAndWithChildren(item, fieldsSvc)) {
    return getLastNotOpenedChildId(createId(item[fieldsSvc.getChildrenField()].length - 1, itemId), items, fieldsSvc);
  } else {
    return itemId;
  }
}

// node_modules/@progress/kendo-react-treeview/dist/es/TreeViewItem.js
var React = __toESM(require_react());

// node_modules/@progress/kendo-react-treeview/dist/es/utils/consts.js
var EXPAND_FIELD = "expanded";
var TEXT_FIELD = "text";
var DISABLED_FIELD = "disabled";
var CHILDREN_FIELD = "items";
var HAS_CHILDREN_FIELD = "hasChildren";
var SELECT_FIELD = "selected";
var CHECK_FIELD = "checked";
var CHECK_INDETERMINATE_FIELD = "checkIndeterminate";
var DOM_KENDO_ITEM_ID_FIELD = "_kendoItemId";
var DOM_KENDO_TREEVIEW_GUID_FIELD = "_kendoTreeViewGuid";

// node_modules/@progress/kendo-react-treeview/dist/es/TreeViewItem.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var sizeMap = kendoThemeMaps.sizeMap;
var TreeViewItemPropsContext = React.createContext(function(props) {
  return props;
});
var TreeViewItemWithoutContext = (
  /** @class */
  function(_super) {
    __extends(TreeViewItemWithoutContext2, _super);
    function TreeViewItemWithoutContext2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.itemGuid = guid();
      _this.onCheckChange = function(e) {
        _this.props.onCheckChange(e, _this.item, _this.itemId);
      };
      _this.onExpandChange = function(e) {
        _this.props.onExpandChange(e, _this.item, _this.itemId);
      };
      _this.onItemClick = function(e) {
        _this.props.onItemClick(e, _this.item, _this.itemId);
      };
      _this.onPress = function(e) {
        _this.props.onPress(e.event, _this.item, _this.itemId);
      };
      _this.onDrag = function(e) {
        _this.props.onDrag(e.event, _this.item, _this.itemId);
      };
      _this.onRelease = function(e) {
        _this.props.onRelease(e.event, _this.item, _this.itemId);
      };
      _this.assignDraggableMeta = function(element) {
        if (element) {
          element[DOM_KENDO_ITEM_ID_FIELD] = _this.props.itemId;
          element[DOM_KENDO_TREEVIEW_GUID_FIELD] = _this.props.treeGuid;
        }
      };
      return _this;
    }
    TreeViewItemWithoutContext2.prototype.render = function() {
      var _this = this;
      var subitems = this.renderSubitemsIfApplicable();
      var itemInPart = this.renderItemInPart();
      return React.createElement(
        "li",
        { className: classNames("k-treeview-item"), tabIndex: this.tabIndex, role: "treeitem", "aria-expanded": this.ariaExpanded, "aria-selected": this.ariaSelected, "aria-checked": this.ariaChecked, "aria-disabled": this.disabled ? true : void 0, ref: function(el) {
          return _this.itemElement = el;
        } },
        React.createElement(
          "div",
          { className: "k-treeview-".concat(this.props.position), ref: this.assignDraggableMeta },
          this.renderExpandIcon(),
          this.renderCheckbox(),
          this.props.draggable ? React.createElement(Draggable, { onPress: this.onPress, onDrag: this.onDrag, onRelease: this.onRelease }, itemInPart) : itemInPart
        ),
        this.props.animate ? React.createElement(Reveal, { transitionEnterDuration: 200, transitionExitDuration: 200, style: { display: "block" }, children: subitems }) : subitems
      );
    };
    TreeViewItemWithoutContext2.prototype.componentDidMount = function() {
      var focusedItemId = this.props.focusedItemId;
      var currentItemId = this.itemId;
      if (focusedItemId && focusedItemId === currentItemId) {
        this.props.onFocusDomElNeeded(this.itemElement);
      }
      if (this.checkboxElement) {
        this.checkboxElement.indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
      }
    };
    TreeViewItemWithoutContext2.prototype.componentDidUpdate = function(prevProps) {
      var focusedItemId = this.props.focusedItemId;
      if (focusedItemId && focusedItemId !== prevProps.focusedItemId && focusedItemId === this.itemId) {
        this.props.onFocusDomElNeeded(this.itemElement);
      }
      if (this.checkboxElement) {
        var indeterminate = this.fieldsSvc.checkIndeterminate(this.item);
        if (indeterminate !== prevProps.fieldsService.checkIndeterminate(prevProps.item)) {
          this.checkboxElement.indeterminate = indeterminate;
        }
      }
    };
    TreeViewItemWithoutContext2.prototype.renderCheckbox = function() {
      var _a;
      var _this = this;
      if (this.props.checkboxes) {
        var size = this.props.size;
        return React.createElement(
          "div",
          { className: classNames("k-checkbox-wrap") },
          React.createElement("input", { type: "checkbox", className: classNames("k-checkbox k-rounded-md", (_a = {}, _a["k-checkbox-".concat(sizeMap[size] || size)] = size, _a["k-disabled"] = this.disabled, _a)), "aria-label": this.item.text, checked: Boolean(this.fieldsSvc.checked(this.item)), id: this.itemGuid, tabIndex: -1, onChange: this.onCheckChange, ref: function(el) {
            return _this.checkboxElement = el;
          } }),
          React.createElement("label", { className: "k-checkbox-label", htmlFor: this.itemGuid })
        );
      } else {
        return void 0;
      }
    };
    TreeViewItemWithoutContext2.prototype.renderExpandIcon = function() {
      var renderExpand = this.props.expandIcons && // If it is explicitly said that the item has children (even not loaded yet)
      // or if the item actually has children, then render the icon.
      (this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()));
      return renderExpand && // Allowing the toggle-button even with `disabled=true` might be a valid case!
      // Re-evaluate the classes bellow if such scenario occurs
      React.createElement(
        "span",
        { className: classNames("k-treeview-toggle", { "k-disabled": this.disabled }), onClick: this.onExpandChange },
        React.createElement(IconWrap, __assign2({}, this.getIconProps()))
      );
    };
    TreeViewItemWithoutContext2.prototype.renderSubitemsIfApplicable = function() {
      var _this = this;
      var data = this.fieldsSvc.children(this.item);
      return isItemExpandedAndWithChildren(this.item, this.fieldsSvc) ? React.createElement("ul", { className: "k-treeview-group", role: "group" }, data.map(function(item, index) {
        return React.createElement(TreeViewItem, { item, position: index === 0 ? "top" : index === data.length - 1 ? "bot" : "mid", itemId: createId(index, _this.itemId), treeGuid: _this.props.treeGuid, animate: _this.props.animate, focusedItemId: _this.props.focusedItemId, tabbableItemId: _this.props.tabbableItemId, fieldsService: _this.props.fieldsService, itemUI: _this.props.itemUI, checkboxes: _this.props.checkboxes, ariaMultiSelectable: _this.props.ariaMultiSelectable, onItemClick: _this.props.onItemClick, onFocusDomElNeeded: _this.props.onFocusDomElNeeded, draggable: _this.props.draggable, onPress: _this.props.onPress, onDrag: _this.props.onDrag, onRelease: _this.props.onRelease, expandIcons: _this.props.expandIcons, onExpandChange: _this.props.onExpandChange, onCheckChange: _this.props.onCheckChange, key: index, size: _this.props.size, disabled: _this.disabled });
      })) : void 0;
    };
    TreeViewItemWithoutContext2.prototype.renderItemInPart = function() {
      return React.createElement(
        "span",
        { className: classNames("k-treeview-leaf", {
          "k-focus": this.props.focusedItemId === this.itemId,
          "k-selected": this.fieldsSvc.selected(this.item),
          "k-disabled": this.disabled
        }), style: { touchAction: "none" }, onClick: this.onItemClick },
        React.createElement("span", { className: "k-treeview-leaf-text" }, this.props.itemUI ? React.createElement(this.props.itemUI, { item: this.item, itemHierarchicalIndex: this.itemId }) : this.fieldsSvc.text(this.item))
      );
    };
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "fieldsSvc", {
      get: function() {
        return this.props.fieldsService;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "itemId", {
      get: function() {
        return this.props.itemId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "item", {
      get: function() {
        return this.props.item;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "tabIndex", {
      get: function() {
        return (this.props.focusedItemId || this.props.tabbableItemId) === this.itemId ? 0 : -1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "ariaExpanded", {
      get: function() {
        return this.fieldsSvc.hasChildren(this.item) || hasChildren(this.item, this.fieldsSvc.getChildrenField()) ? Boolean(this.fieldsSvc.expanded(this.item)) : void 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "disabled", {
      get: function() {
        return this.props.disabled || this.fieldsSvc.disabled(this.item);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "ariaChecked", {
      get: function() {
        if (this.props.checkboxes) {
          if (this.fieldsSvc.checked(this.item)) {
            return "true";
          } else {
            return this.fieldsSvc.checkIndeterminate(this.item) ? "mixed" : "false";
          }
        } else {
          return void 0;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewItemWithoutContext2.prototype, "ariaSelected", {
      get: function() {
        if (this.fieldsSvc.selected(this.item)) {
          return true;
        } else if (this.props.ariaMultiSelectable) {
          return this.disabled ? void 0 : false;
        } else {
          return void 0;
        }
      },
      enumerable: false,
      configurable: true
    });
    TreeViewItemWithoutContext2.prototype.getIconProps = function() {
      var expanded = this.fieldsSvc.expanded(this.item);
      var loading = expanded && !hasChildren(this.item, this.fieldsSvc.getChildrenField());
      if (loading) {
        return { name: "loading" };
      }
      return expanded ? { name: "caret-alt-down", icon: caretAltDownIcon } : { name: "caret-alt-right", icon: caretAltRightIcon };
    };
    TreeViewItemWithoutContext2.defaultProps = {
      position: "top"
    };
    return TreeViewItemWithoutContext2;
  }(React.Component)
);
var TreeViewItem = React.forwardRef(function(props, ref) {
  var contextPropsCallback = React.useContext(TreeViewItemPropsContext);
  var treeViewItemProps = contextPropsCallback.call(void 0, props);
  return React.createElement(TreeViewItemWithoutContext, __assign2({ ref }, treeViewItemProps));
});
TreeViewItem.displayName = "TreeViewItem";

// node_modules/@progress/kendo-react-treeview/dist/es/utils/FieldsService.js
var FieldsService = (
  /** @class */
  function() {
    function FieldsService2(treeViewProps) {
      this.expandField = treeViewProps.expandField;
      this.selectField = treeViewProps.selectField;
      this.hasChildrenField = treeViewProps.hasChildrenField;
      this.childrenField = treeViewProps.childrenField;
      this.textField = treeViewProps.textField;
      this.disableField = treeViewProps.disableField;
      this.checkField = treeViewProps.checkField;
      this.checkIndeterminateField = treeViewProps.checkIndeterminateField;
      this.focusIdField = treeViewProps.focusIdField;
    }
    FieldsService2.prototype.expanded = function(item) {
      return getNestedValue(this.expandField, item);
    };
    FieldsService2.prototype.selected = function(item) {
      return getNestedValue(this.selectField, item);
    };
    FieldsService2.prototype.text = function(item) {
      return getNestedValue(this.textField, item);
    };
    FieldsService2.prototype.disabled = function(item) {
      return getNestedValue(this.disableField, item);
    };
    FieldsService2.prototype.hasChildren = function(item) {
      return getNestedValue(this.hasChildrenField, item);
    };
    FieldsService2.prototype.children = function(item) {
      var children = getNestedValue(this.childrenField, item);
      return children ? children : [];
    };
    FieldsService2.prototype.checked = function(item) {
      return getNestedValue(this.checkField, item);
    };
    FieldsService2.prototype.checkIndeterminate = function(item) {
      return getNestedValue(this.checkIndeterminateField, item);
    };
    FieldsService2.prototype.focusId = function(item) {
      return this.focusIdField && getNestedValue(this.focusIdField, item);
    };
    FieldsService2.prototype.getChildrenField = function() {
      return this.childrenField;
    };
    return FieldsService2;
  }()
);
var FieldsService_default = FieldsService;

// node_modules/@progress/kendo-react-treeview/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-treeview",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1680171841,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-treeview/dist/es/TreeView.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var sizeMap2 = kendoThemeMaps.sizeMap;
var TreeView = (
  /** @class */
  function(_super) {
    __extends2(TreeView2, _super);
    function TreeView2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = { focusedItemId: void 0, focusedItemPublicId: void 0, tabbableItemId: ZERO_LEVEL_ZERO_NODE_ID };
      _this.fieldsSvc = null;
      _this.allowExplicitFocus = false;
      _this.treeGuid = guid();
      _this._element = null;
      _this.onFocusDomElNeeded = function(domItem) {
        if (_this.allowExplicitFocus) {
          _this.focusDomItem(domItem);
        }
      };
      _this.onCheckChange = function(event, item, itemId) {
        _this.setFocus(itemId);
        _this.dispatchCheckChange(event, item, itemId);
      };
      _this.onExpandChange = function(event, item, itemId) {
        _this.setFocus(itemId);
        _this.dispatchExpandChange(event, item, itemId);
      };
      _this.onPress = function(_event, item, itemId) {
        if (_this.props.onItemDragStart) {
          _this.props.onItemDragStart.call(void 0, { target: _this, item, itemHierarchicalIndex: itemId });
        }
      };
      _this.onDrag = function(event, item, itemId) {
        var pageX = event.pageX, pageY = event.pageY, clientX = event.clientX, clientY = event.clientY;
        if (_this.props.onItemDragOver) {
          _this.props.onItemDragOver.call(void 0, {
            target: _this,
            item,
            itemHierarchicalIndex: itemId,
            pageX,
            pageY,
            clientX,
            clientY
          });
        }
      };
      _this.onRelease = function(event, item, itemId) {
        var pageX = event.pageX, pageY = event.pageY, clientX = event.clientX, clientY = event.clientY;
        if (_this.props.onItemDragEnd) {
          _this.props.onItemDragEnd.call(void 0, {
            target: _this,
            item,
            itemHierarchicalIndex: itemId,
            pageX,
            pageY,
            clientX,
            clientY
          });
        }
      };
      _this.onItemClick = function(event, item, itemId) {
        _this.setFocus(itemId);
        _this.dispatchItemClick(event, item, itemId);
      };
      _this.onFocus = function() {
        clearTimeout(_this.blurRequest);
        if (_this.state.focusedItemId === void 0 && _this.data.length) {
          _this.setFocus(_this.state.tabbableItemId);
        }
      };
      _this.onBlur = function() {
        clearTimeout(_this.blurRequest);
        _this.blurRequest = window.setTimeout(function() {
          return _this.setFocus(void 0);
        }, 0);
      };
      _this.onKeyDown = function(event) {
        var focusedItem = _this.getFocusedItem();
        if (focusedItem && _this.fieldsSvc) {
          var newItemId = getItemIdUponKeyboardNavigation(focusedItem, _this.state.focusedItemId, _this.data, event.keyCode, _this.fieldsSvc);
          if (newItemId !== _this.state.focusedItemId) {
            event.preventDefault();
            _this.allowExplicitFocus = true;
            _this.setFocus(newItemId);
          }
          _this.dispatchEventsOnKeyDown(event, focusedItem);
        }
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(TreeView2.prototype, "element", {
      /**
       * @hidden
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    TreeView2.prototype.render = function() {
      var _a;
      var _this = this;
      this.fieldsSvc = new FieldsService_default(this.props);
      var _b = this.props, size = _b.size, className = _b.className;
      return React2.createElement(
        "div",
        { className: classNames("k-treeview", (_a = {}, _a["k-treeview-".concat(sizeMap2[size] || size)] = size, _a), className), onKeyDown: this.onKeyDown, onFocus: this.onFocus, onBlur: this.onBlur, role: "tree", "aria-multiselectable": this.ariaMultiSelectable ? true : void 0, "aria-label": this.props["aria-label"], "aria-labelledby": this.props["aria-labelledby"], ref: function(element) {
          return _this._element = element;
        }, tabIndex: this.props.tabIndex },
        React2.createElement("ul", { className: "k-treeview-lines k-treeview-group", role: "group" }, this.data.map(function(item, index) {
          return React2.createElement(TreeViewItem, { item, position: index === 0 ? "top" : index === _this.data.length - 1 ? "bot" : "mid", itemId: index.toString(), treeGuid: _this.treeGuid, animate: _this.props.animate, focusedItemId: _this.state.focusedItemId, tabbableItemId: _this.state.tabbableItemId, fieldsService: _this.fieldsSvc, itemUI: _this.props.item, checkboxes: _this.props.checkboxes, ariaMultiSelectable: _this.ariaMultiSelectable, onItemClick: _this.onItemClick, onFocusDomElNeeded: _this.onFocusDomElNeeded, draggable: _this.props.draggable, onPress: _this.onPress, onDrag: _this.onDrag, onRelease: _this.onRelease, expandIcons: _this.props.expandIcons, onExpandChange: _this.onExpandChange, onCheckChange: _this.onCheckChange, key: index, size });
        }))
      );
    };
    TreeView2.prototype.componentDidUpdate = function() {
      this.allowExplicitFocus = false;
      this.refocusDueToFocusIdField();
    };
    TreeView2.prototype.dispatchEventsOnKeyDown = function(event, focusedItem) {
      var _this = this;
      if (this.fieldsSvc === null) {
        return;
      }
      var isEnabled = function() {
        return _this.fieldsSvc && isEnabledAndAllParentsEnabled(_this.state.focusedItemId, _this.data, _this.fieldsSvc);
      };
      if (event.keyCode === Keys.left && this.fieldsSvc.expanded(focusedItem) && isEnabled()) {
        this.dispatchExpandChange(event, focusedItem, this.state.focusedItemId);
      } else if (event.keyCode === Keys.right && !this.fieldsSvc.expanded(focusedItem) && (this.fieldsSvc.hasChildren(focusedItem) || hasChildren(focusedItem, this.props.childrenField)) && isEnabled()) {
        this.dispatchExpandChange(event, focusedItem, this.state.focusedItemId);
      } else if (event.keyCode === Keys.enter && isEnabled()) {
        this.dispatchItemClick(event, focusedItem, this.state.focusedItemId);
      } else if (event.keyCode === Keys.space && isEnabled()) {
        event.preventDefault();
        this.dispatchCheckChange(event, focusedItem, this.state.focusedItemId);
      }
    };
    TreeView2.prototype.setFocus = function(focusedItemId) {
      if (focusedItemId && this.fieldsSvc) {
        if (this.fieldsSvc.focusIdField) {
          var item = this.getItemById(focusedItemId);
          this.setState({ focusedItemId, focusedItemPublicId: this.fieldsSvc.focusId(item) });
        } else {
          this.setState({ focusedItemId });
        }
      } else {
        this.setState(function(state) {
          return {
            focusedItemId: void 0,
            focusedItemPublicId: void 0,
            tabbableItemId: state.focusedItemId
          };
        });
      }
    };
    TreeView2.prototype.getFocusedItem = function() {
      return this.state.focusedItemId ? this.getItemById(this.state.focusedItemId) : void 0;
    };
    TreeView2.prototype.getItemById = function(itemId) {
      return getItemById(itemId, this.data, this.props.childrenField || CHILDREN_FIELD);
    };
    TreeView2.prototype.dispatchCheckChange = function(dispatchedEvent, item, itemId) {
      dispatchEvent(this.props.onCheckChange, dispatchedEvent, this, { item, itemHierarchicalIndex: itemId });
    };
    TreeView2.prototype.dispatchExpandChange = function(dispatchedEvent, item, itemId) {
      dispatchEvent(this.props.onExpandChange, dispatchedEvent, this, { item, itemHierarchicalIndex: itemId });
    };
    TreeView2.prototype.dispatchItemClick = function(dispatchedEvent, item, itemId) {
      dispatchEvent(this.props.onItemClick, dispatchedEvent, this, { item, itemHierarchicalIndex: itemId });
    };
    TreeView2.prototype.refocusDueToFocusIdField = function() {
      if (this.fieldsSvc && this.fieldsSvc.focusIdField) {
        var focusedItemPublicId = this.state.focusedItemPublicId;
        if (focusedItemPublicId) {
          var focusedItemId = this.props.getFocusHierarchicalIndex ? this.props.getFocusHierarchicalIndex(focusedItemPublicId) : resolveItemId(focusedItemPublicId, this.fieldsSvc.focusIdField, this.data, this.props.childrenField);
          if (focusedItemId !== this.state.focusedItemId) {
            this.allowExplicitFocus = true;
            this.setState({ focusedItemId });
          }
        }
      }
    };
    Object.defineProperty(TreeView2.prototype, "ariaMultiSelectable", {
      get: function() {
        return this.props["aria-multiselectable"] === true || this.props["aria-multiselectable"] === "true";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeView2.prototype, "data", {
      get: function() {
        return this.props.data || [];
      },
      enumerable: false,
      configurable: true
    });
    TreeView2.prototype.focusDomItem = function(domItem) {
      domItem.focus();
    };
    Object.defineProperty(TreeView2.prototype, "guid", {
      /**
       * Returns the `guid` which is associated with the TreeView.
       */
      get: function() {
        return this.treeGuid;
      },
      enumerable: false,
      configurable: true
    });
    TreeView2.propTypes = {
      data: PropTypes.arrayOf(PropTypes.any),
      animate: PropTypes.bool,
      tabIndex: PropTypes.number,
      focusIdField: PropTypes.string,
      getHierarchicalIndexById: PropTypes.func,
      onExpandChange: PropTypes.func,
      onItemClick: PropTypes.func,
      expandField: PropTypes.string,
      selectField: PropTypes.string,
      childrenField: PropTypes.string,
      hasChildrenField: PropTypes.string,
      textField: PropTypes.string,
      disableField: PropTypes.string,
      item: PropTypes.any,
      "aria-multiselectable": function(props, propName, componentName) {
        if (props[propName] !== void 0 && props[propName] !== true && props[propName] !== false && props[propName] !== "true" && props[propName] !== "false") {
          return new Error("Invalid prop `" + propName + "` supplied to `" + componentName + "`. Validation failed.");
        }
        return null;
      },
      "aria-label": PropTypes.string,
      "aria-labelledby": PropTypes.string,
      size: PropTypes.oneOf([null, "small", "medium", "large"])
    };
    TreeView2.defaultProps = {
      animate: true,
      expandField: EXPAND_FIELD,
      selectField: SELECT_FIELD,
      hasChildrenField: HAS_CHILDREN_FIELD,
      childrenField: CHILDREN_FIELD,
      textField: TEXT_FIELD,
      disableField: DISABLED_FIELD,
      checkField: CHECK_FIELD,
      checkIndeterminateField: CHECK_INDETERMINATE_FIELD,
      size: "medium"
    };
    return TreeView2;
  }(React2.Component)
);

// node_modules/@progress/kendo-react-treeview/dist/es/processTreeViewItems.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function processTreeViewItems(data, operations) {
  if (!data || !data.length) {
    return [];
  }
  var result = data;
  var cloneField = operations.cloneField || "cloned";
  var expandField = operations.expandField || EXPAND_FIELD;
  var selectField = operations.selectField || SELECT_FIELD;
  var checkField = operations.checkField || CHECK_FIELD;
  var childrenField = operations.childrenField || CHILDREN_FIELD;
  result = handleOperation(result, expandField, operations.expand, cloneField, childrenField);
  result = handleOperation(result, selectField, operations.select, cloneField, childrenField);
  result = handleOperation(result, checkField, operations.check, cloneField, childrenField);
  applyCheckIndeterminate(result, childrenField, operations.check);
  return result;
}
function handleOperation(items, defaultField, operation, cloneField, childrenField) {
  if (operation) {
    var _a = parseOperation(operation, defaultField), ids = _a.ids, field = _a.field;
    var indices = !isArray(operation) && operation.idField ? resolveItemsIds(ids, operation.idField, items, childrenField) : ids;
    return raiseFlags(items, indices, field, cloneField, childrenField);
  } else {
    return items;
  }
}
function parseOperation(operation, defaultField) {
  var ids;
  var field;
  if (isArray(operation)) {
    ids = operation;
    field = defaultField;
  } else {
    ids = operation.ids || [];
    field = operation.operationField || defaultField;
  }
  return { ids, field };
}
function raiseFlags(items, indices, field, cloneField, childrenField) {
  var result = items;
  indices.forEach(function(itemIndex) {
    result = updateItem(result, itemIndex, function(item) {
      return raiseNestedFlag(field, item);
    }, cloneField, childrenField);
  });
  return result;
}
function raiseNestedFlag(fieldName, dataItem) {
  var fields = (fieldName || "").split(".");
  var item = dataItem;
  for (var index = 0; index < fields.length; index++) {
    var field = fields[index];
    if (index === fields.length - 1) {
      item[field] = true;
    } else if (item[field] !== void 0) {
      item[field] = __assign3({}, item[field]);
      item = item[field];
    } else {
      return;
    }
  }
}
function applyCheckIndeterminate(items, childrenField, check) {
  if (check && !isArray(check) && check.applyCheckIndeterminate) {
    var checkField = parseOperation(check, CHECK_FIELD).field;
    var checkIndeterminateField = check.checkIndeterminateField || CHECK_INDETERMINATE_FIELD;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var subItems = item[childrenField];
      if (subItems) {
        applyCheckIndeterminateHelper(subItems, getNestedValue(checkField, item) ? [] : [item], childrenField, checkField, checkIndeterminateField);
      }
    }
  }
}
function applyCheckIndeterminateHelper(data, parents, childrenField, checkField, checkIndeterminateField) {
  var parentsAlreadyUpdated = false;
  for (var i = 0; i < data.length; i++) {
    var item = data[i];
    if (getNestedValue(checkField, item)) {
      if (!parentsAlreadyUpdated) {
        for (var j = 0; j < parents.length; j++) {
          raiseNestedFlag(checkIndeterminateField, parents[j]);
        }
      }
      parentsAlreadyUpdated = true;
      if (item[childrenField]) {
        applyCheckIndeterminateHelper(item[childrenField], [], childrenField, checkField, checkIndeterminateField);
      }
    } else {
      if (item[childrenField]) {
        applyCheckIndeterminateHelper(item[childrenField], parentsAlreadyUpdated ? [item] : parents.concat([item]), childrenField, checkField, checkIndeterminateField);
      }
    }
  }
}

// node_modules/@progress/kendo-react-treeview/dist/es/moveTreeViewItem.js
function moveTreeViewItem(sourceItemHierarchicalIndex, sourceData, operation, targetItemHierarchicalIndex, targetData, childrenField) {
  var subItemsField = childrenField || CHILDREN_FIELD;
  if (!validateInput()) {
    return prepareInputDataForReturn();
  }
  var sourceItem = getItemById(sourceItemHierarchicalIndex, sourceData, subItemsField);
  if (!sourceItem) {
    return prepareInputDataForReturn();
  }
  if (!targetData || targetData === sourceData) {
    if (!validateNoCircularReference()) {
      return prepareInputDataForReturn();
    }
    var updatedSourceData = removeItem(sourceItemHierarchicalIndex, subItemsField, sourceData);
    var resultData = addItem(sourceItem, operation, subItemsField, getDecrementedItemIdAfterRemoval(sourceItemHierarchicalIndex, targetItemHierarchicalIndex), updatedSourceData);
    return targetData ? { sourceData: resultData, targetData: resultData } : resultData;
  } else {
    var updatedSource = removeItem(sourceItemHierarchicalIndex, subItemsField, sourceData);
    var updatedTarget = addItem(sourceItem, operation, subItemsField, targetItemHierarchicalIndex, targetData);
    return { sourceData: updatedSource, targetData: updatedTarget };
  }
  function prepareInputDataForReturn() {
    return targetData ? { sourceData, targetData } : sourceData;
  }
  function validateNoCircularReference() {
    return !"".concat(targetItemHierarchicalIndex, "_").startsWith("".concat(sourceItemHierarchicalIndex, "_"));
  }
  function validateInput() {
    if (!sourceData || !sourceData.length || !sourceItemHierarchicalIndex || !targetItemHierarchicalIndex) {
      return false;
    }
    if (targetData && !targetData.length) {
      return false;
    }
    var data = !targetData || targetData === sourceData ? sourceData : targetData;
    if (!getItemById(targetItemHierarchicalIndex, data, subItemsField)) {
      return false;
    }
    return true;
  }
}

// node_modules/@progress/kendo-react-treeview/dist/es/handleTreeViewCheckChange.js
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
function handleTreeViewCheckChange(event, check, data, settings, childrenField) {
  if (settings === void 0) {
    settings = {};
  }
  if (!data || !data.length) {
    return [];
  }
  var _a = parseOperation2(check), ids = _a.ids, idField = _a.idField;
  var itemId = idField ? getNestedValue(idField, event.item) : event.itemHierarchicalIndex;
  var idIndex = ids.indexOf(itemId);
  var itemJustChecked = idIndex === -1;
  var subItemsField = childrenField || CHILDREN_FIELD;
  var newIds;
  if (settings.singleMode) {
    newIds = itemJustChecked ? [itemId] : [];
  } else {
    newIds = ids.slice();
    itemJustChecked ? newIds.push(itemId) : newIds.splice(idIndex, 1);
    if (settings.checkChildren) {
      checkChildren(event.item, event.itemHierarchicalIndex, itemJustChecked, idField, subItemsField, newIds);
    }
    if (settings.checkParents) {
      checkParents(event.itemHierarchicalIndex, itemJustChecked, idField, subItemsField, newIds, data);
    }
  }
  return isArray(check) ? newIds : Object.assign({}, check, { ids: newIds });
}
function parseOperation2(operation) {
  var ids;
  var idField = void 0;
  if (isArray(operation)) {
    ids = operation;
  } else {
    ids = operation.ids || [];
    idField = operation.idField;
  }
  return { ids, idField };
}
function checkChildren(item, itemHierarchicalIndex, itemJustChecked, idField, childrenField, ids) {
  getAllDirectIndirectChildrenIds(item, itemHierarchicalIndex, childrenField, idField).forEach(function(itemId) {
    if (itemJustChecked && ids.indexOf(itemId) === -1) {
      ids.push(itemId);
    } else if (!itemJustChecked && ids.indexOf(itemId) > -1) {
      ids.splice(ids.indexOf(itemId), 1);
    }
  });
}
function checkParents(itemHierarchicalIndex, itemJustChecked, idField, childrenField, ids, data) {
  var it = makeParentsIterator();
  var result = it.next();
  itemJustChecked ? check() : uncheck();
  function check() {
    while (!result.done) {
      var _a = result.value, id = _a.id, item = _a.item;
      if (ids.indexOf(id) === -1 && areAllDirectChildrenChecked(item, id, idField, childrenField, ids)) {
        ids.push(id);
        result = it.next();
      } else {
        break;
      }
    }
  }
  function uncheck() {
    while (!result.done) {
      var id = result.value.id;
      var idIndex = ids.indexOf(id);
      if (idIndex > -1) {
        ids.splice(idIndex, 1);
        result = it.next();
      } else {
        break;
      }
    }
  }
  function makeParentsIterator() {
    var parents, i, parentId;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!idField)
            return [3, 5];
          parents = getAllParents(itemHierarchicalIndex, childrenField, data);
          i = parents.length - 1;
          _a.label = 1;
        case 1:
          if (!(i > -1))
            return [3, 4];
          return [4, { id: getNestedValue(idField, parents[i]), item: itemJustChecked ? parents[i] : void 0 }];
        case 2:
          _a.sent();
          _a.label = 3;
        case 3:
          i--;
          return [3, 1];
        case 4:
          return [3, 8];
        case 5:
          parentId = getDirectParentId(itemHierarchicalIndex);
          _a.label = 6;
        case 6:
          if (!parentId)
            return [3, 8];
          return [4, { id: parentId, item: itemJustChecked ? getItemById(parentId, data, childrenField) : void 0 }];
        case 7:
          _a.sent();
          parentId = getDirectParentId(parentId);
          return [3, 6];
        case 8:
          return [
            2
            /*return*/
          ];
      }
    });
  }
}

// node_modules/@progress/kendo-react-treeview/dist/es/TreeViewDragClue.js
var React3 = __toESM(require_react());
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var TreeViewDragClue = (
  /** @class */
  function(_super) {
    __extends3(TreeViewDragClue2, _super);
    function TreeViewDragClue2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.state = {
        visible: false,
        top: 0,
        left: 0,
        text: "",
        operationClassName: "k-i-cancel"
      };
      return _this;
    }
    TreeViewDragClue2.prototype.render = function() {
      var dynamicStyle = { top: this.state.top + "px", left: this.state.left + "px" };
      return this.state.visible && React3.createElement(
        "div",
        { className: "k-header k-drag-clue", style: __assign4(__assign4({}, this.props.style), dynamicStyle) },
        React3.createElement(
          "span",
          { className: classNames("k-icon k-drag-status k-icon-with-modifier", this.state.operationClassName) },
          React3.createElement("span", { className: "k-icon k-icon-modifier" })
        ),
        this.state.text
      );
    };
    TreeViewDragClue2.prototype.show = function(top, left, text, operationClassName) {
      this.setState({ visible: true, top, left, text, operationClassName });
    };
    TreeViewDragClue2.prototype.hide = function() {
      this.setState({ visible: false });
    };
    TreeViewDragClue2.defaultProps = { style: { display: "block", position: "absolute", zIndex: 2e4, padding: "4px 6px" } };
    return TreeViewDragClue2;
  }(React3.PureComponent)
);

// node_modules/@progress/kendo-react-treeview/dist/es/TreeViewDragAnalyzer.js
var DROPZONE_BOUNDARY_DELTA = 6;
var TreeViewDragAnalyzer = (
  /** @class */
  function() {
    function TreeViewDragAnalyzer2(event) {
      this.event = event;
      this.initialized = false;
      this.destItemId = "";
      this.destTreeViewGuid = "";
      this.itemId = event.itemHierarchicalIndex;
      this.treeViewGuid = event.target.guid;
    }
    TreeViewDragAnalyzer2.prototype.init = function() {
      if (!this.initialized) {
        this.setDestimationMeta(document.elementFromPoint(this.event.clientX, this.event.clientY));
        this.initialized = true;
      }
      return this;
    };
    Object.defineProperty(TreeViewDragAnalyzer2.prototype, "isDropAllowed", {
      /**
       * Returns `true` if dropping is allowed. Otherwise, returns `false`.
       */
      get: function() {
        if (this.initialized && this.destItemId && this.destTreeViewGuid) {
          return !"".concat(this.destTreeViewGuid, "_").concat(this.destItemId, "_").startsWith("".concat(this.treeViewGuid, "_").concat(this.itemId, "_"));
        } else {
          return false;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TreeViewDragAnalyzer2.prototype, "destinationMeta", {
      /**
       * Returns an object which contains:
       * * The `itemHierarchicalIndex` of the destination item (the item below the dragged item) and
       * * The `guid` of the destination TreeView (the TreeView which renders the destination item).
       */
      get: function() {
        return { itemHierarchicalIndex: this.destItemId, treeViewGuid: this.destTreeViewGuid };
      },
      enumerable: false,
      configurable: true
    });
    TreeViewDragAnalyzer2.prototype.getDropOperation = function() {
      if (this.initialized && this.isDropAllowed) {
        var _a = this.destDomNodeWithMeta.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
        if (top_1 + height - this.event.clientY < DROPZONE_BOUNDARY_DELTA) {
          return "after";
        } else if (this.event.clientY - top_1 < DROPZONE_BOUNDARY_DELTA) {
          return "before";
        } else {
          return "child";
        }
      } else {
        return void 0;
      }
    };
    TreeViewDragAnalyzer2.prototype.setDestimationMeta = function(element) {
      var node = element;
      while (node && !node[DOM_KENDO_ITEM_ID_FIELD]) {
        node = node.parentNode;
      }
      if (node && node[DOM_KENDO_ITEM_ID_FIELD]) {
        this.destDomNodeWithMeta = node;
        this.destItemId = node[DOM_KENDO_ITEM_ID_FIELD];
        this.destTreeViewGuid = node[DOM_KENDO_TREEVIEW_GUID_FIELD];
      }
    };
    return TreeViewDragAnalyzer2;
  }()
);

export {
  TreeViewItemPropsContext,
  TreeView,
  processTreeViewItems,
  moveTreeViewItem,
  handleTreeViewCheckChange,
  TreeViewDragClue,
  TreeViewDragAnalyzer
};
//# sourceMappingURL=chunk-JEFUAUFC.js.map
