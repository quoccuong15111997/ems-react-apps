import {
  caretAltDownIcon
} from "./chunk-RFS2H3W2.js";
import {
  Popup
} from "./chunk-XVBPUVJV.js";
import {
  IconWrap,
  Keys,
  ZIndexContext,
  classNames,
  dispatchEvent,
  getTabIndex,
  getter,
  guid,
  kendoThemeMaps,
  svgIconPropType,
  toIconName,
  useDir,
  useMouse,
  useZIndexContext,
  validatePackage2 as validatePackage
} from "./chunk-KTMNFILY.js";
import {
  require_prop_types
} from "./chunk-O6GWARG4.js";
import {
  require_react
} from "./chunk-ABDRZE5M.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/@progress/kendo-react-buttons/dist/es/Button.js
var React = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-buttons",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1680171534,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-buttons/dist/es/Button.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function iconElement(_a) {
  var imageUrl = _a.imageUrl, name = _a.name, iconClass = _a.iconClass, svgIcon = _a.svgIcon, imageAlt = _a.imageAlt;
  if (imageUrl) {
    return React.createElement("img", { role: "presentation", className: "k-button-icon", alt: imageAlt, src: imageUrl });
  } else if (name || svgIcon) {
    return React.createElement(IconWrap, { className: "k-button-icon", name, icon: svgIcon });
  } else if (iconClass) {
    return React.createElement("span", { role: "presentation", className: classNames("k-button-icon", iconClass) });
  }
  return null;
}
var Button = (
  /** @class */
  function(_super) {
    __extends(Button2, _super);
    function Button2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this.handleClick = function(event) {
        _this.toggleIfApplicable();
        if (_this.props.onClick) {
          _this.props.onClick.call(void 0, event);
        }
      };
      validatePackage(packageMetadata);
      _this.state = { selected: _this.props.togglable === true && _this.props.selected === true };
      return _this;
    }
    Object.defineProperty(Button2.prototype, "element", {
      /**
       * Gets the DOM element of the Button component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Button2.prototype, "selected", {
      /**
       * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).
       * Otherwise, returns `false`.
       */
      get: function() {
        return this._selectedTemp !== void 0 ? this._selectedTemp : this.state.selected;
      },
      enumerable: false,
      configurable: true
    });
    Button2.getDerivedStateFromProps = function(props, state) {
      if (props.togglable && props.selected !== void 0 && props.selected !== state.selected) {
        return { selected: props.selected };
      }
      return null;
    };
    Button2.prototype.render = function() {
      var _a;
      var _this = this;
      var _b = this.props, children = _b.children, togglable = _b.togglable, icon = _b.icon, iconClass = _b.iconClass, svgIcon = _b.svgIcon, imageUrl = _b.imageUrl, imageAlt = _b.imageAlt, className = _b.className, onClick = _b.onClick, _c = _b.size, size = _c === void 0 ? Button2.defaultProps.size : _c, _d = _b.rounded, rounded = _d === void 0 ? Button2.defaultProps.rounded : _d, _e = _b.fillMode, fillMode = _e === void 0 ? Button2.defaultProps.fillMode : _e, _f = _b.themeColor, themeColor = _f === void 0 ? Button2.defaultProps.themeColor : _f, htmlAttributes = __rest(_b, ["children", "togglable", "icon", "iconClass", "svgIcon", "imageUrl", "imageAlt", "className", "onClick", "size", "rounded", "fillMode", "themeColor"]);
      var hasIcon = icon !== void 0 || iconClass !== void 0 || imageUrl !== void 0;
      var hasChildren = children !== void 0;
      var iconEl = iconElement({
        name: icon,
        svgIcon,
        iconClass,
        imageUrl,
        imageAlt
      });
      return React.createElement(
        "button",
        __assign({ ref: function(button) {
          return _this._element = button;
        }, "aria-pressed": togglable ? this.state.selected : void 0 }, htmlAttributes, { onClick: this.handleClick, className: classNames("k-button", (_a = {}, _a["k-button-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-button-".concat(fillMode)] = fillMode, _a["k-button-".concat(fillMode, "-").concat(themeColor)] = Boolean(fillMode && themeColor), _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a["k-icon-button"] = !hasChildren && hasIcon, _a["k-disabled"] = this.props.disabled, _a["k-selected"] = this.state.selected, _a["k-rtl"] = this.props.dir === "rtl", _a), this.props.className) }),
        iconEl,
        children && React.createElement("span", { className: "k-button-text" }, children)
      );
    };
    Button2.prototype.toggleIfApplicable = function() {
      var _this = this;
      if (this.props.togglable && this.props.selected === void 0) {
        var selected = !this.state.selected;
        this._selectedTemp = selected;
        this.setState({ selected }, function() {
          return _this._selectedTemp = void 0;
        });
      }
    };
    Button2.propTypes = {
      children: PropTypes.node,
      selected: PropTypes.bool,
      togglable: PropTypes.bool,
      icon: PropTypes.string,
      svgIcon: svgIconPropType,
      iconClass: PropTypes.string,
      imageUrl: PropTypes.string,
      imageAlt: PropTypes.string,
      size: PropTypes.oneOf([null, "small", "medium", "large"]),
      rounded: PropTypes.oneOf([null, "small", "medium", "large", "full"]),
      fillMode: PropTypes.oneOf([null, "flat", "link", "outline", "solid"]),
      // eslint-disable-next-line max-len
      themeColor: PropTypes.oneOf([null, "base", "primary", "secondary", "tertiary", "info", "success", "warning", "error", "dark", "light", "inverse"])
    };
    Button2.defaultProps = {
      togglable: false,
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      themeColor: "base"
    };
    return Button2;
  }(React.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ButtonGroup.js
var React2 = __toESM(require_react());
var PropTypes2 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/util.js
var styles = {
  button: "k-button",
  "flat": "k-flat",
  "outline": "k-outline",
  "clear": "k-button-clear",
  "primary": "k-primary",
  "state-selected": "k-selected",
  "button-icon": "k-button-icon",
  "button-icontext": "k-button-icontext",
  "state-disabled": "k-disabled",
  "group-start": "k-group-start",
  "group-end": "k-group-end",
  "button-group": "k-button-group",
  "button-group-stretched": "k-button-group-stretched",
  "ltr": "k-ltr",
  "rtl": "k-rtl"
};
var noInnerButton = ":not(.k-dropdownlist button):not(.k-colorpicker button):not(.k-split-button .k-split-button-arrow)";
var toolbarButtons = [
  "button" + noInnerButton,
  ".k-button-group > button" + noInnerButton,
  ".k-dropdownlist",
  ".k-colorpicker"
];
var util_default = {
  styles
};

// node_modules/@progress/kendo-react-buttons/dist/es/ButtonGroup.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var styles2 = util_default.styles;
var ButtonGroup = (
  /** @class */
  function(_super) {
    __extends2(ButtonGroup2, _super);
    function ButtonGroup2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      validatePackage(packageMetadata);
      return _this;
    }
    ButtonGroup2.prototype.render = function() {
      var _a;
      var _this = this;
      var buttons = this.mapButtons(this.props.children);
      var groupClasses = classNames([styles2["button-group"]], (_a = {}, _a["k-disabled"] = this.props.disabled, _a[styles2["button-group-stretched"]] = !!this.props.width, _a), this.props.className);
      var groupProps = {
        className: groupClasses,
        style: { "width": "".concat(this.props.width) },
        dir: this.props.dir,
        // Accessibility properties
        role: "group",
        "aria-disabled": this.props.disabled
      };
      return React2.createElement("div", __assign2({ ref: function(div) {
        _this._element = div;
      } }, groupProps, { className: groupClasses }), buttons);
    };
    ButtonGroup2.prototype.mapButtons = function(children) {
      var _this = this;
      var count = React2.Children.count(children);
      var rtl = this.props.dir !== void 0 ? this.props.dir === "rtl" : this._element && getComputedStyle(this._element).direction === "rtl" || false;
      return React2.Children.map(children, function(child, index) {
        if (React2.isValidElement(child)) {
          return _this.renderButton(child, index, index === count - 1, rtl);
        }
        return child;
      });
    };
    ButtonGroup2.prototype.renderButton = function(child, index, isLast, isRtl) {
      var _a;
      var className = classNames(child.props.className, (_a = {}, _a[styles2["group-start"]] = isRtl ? isLast : index === 0, _a[styles2["group-end"]] = isRtl ? index === 0 : isLast, _a));
      var style = __assign2(__assign2({}, this.props.width ? { width: this.props.width } : {}), child.props.style || {});
      var disabled = this.props.disabled || child.props.disabled;
      var buttonProps = __assign2(__assign2(__assign2(__assign2({}, child.props), className ? { className } : {}), Object.keys(style).length ? { style } : {}), disabled !== void 0 ? { disabled } : {});
      return React2.Children.count(child.props.children) > 0 ? React2.cloneElement(child, buttonProps, child.props.children) : React2.cloneElement(child, buttonProps);
    };
    ButtonGroup2.propTypes = {
      children: PropTypes2.oneOfType([PropTypes2.arrayOf(PropTypes2.element), PropTypes2.element]),
      className: PropTypes2.string,
      disabled: PropTypes2.bool,
      width: PropTypes2.string,
      dir: PropTypes2.string
    };
    return ButtonGroup2;
  }(React2.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/SplitButton.js
var React5 = __toESM(require_react());
var PropTypes4 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/ButtonItem.js
var React3 = __toESM(require_react());
var ButtonItem = function(props) {
  var handleClick = React3.useCallback(function(event) {
    props.onClick(event, props.index);
  }, [props]);
  var As = props.dataItem.render || props.item || (props.item === void 0 ? props.render : null);
  var text = props.dataItem.text !== void 0 ? props.dataItem.text : props.textField ? props.dataItem[props.textField] : props.dataItem;
  var item = React3.createElement("li", { id: props.id, className: classNames("k-item", props.className, { "k-focus": props.focused }), tabIndex: -1, onClick: handleClick, onMouseDown: props.onDown, onPointerDown: props.onDown, role: "menuitem", "aria-disabled": props.dataItem.disabled || void 0 }, React3.createElement("span", { tabIndex: -1, className: classNames("k-link k-menu-link", {
    "k-selected": props.dataItem.selected,
    "k-disabled": props.dataItem.disabled
  }), key: "icon" }, As ? React3.createElement(As, { item: props.dataItem, itemIndex: props.index }) : React3.createElement(
    React3.Fragment,
    null,
    (props.dataItem.icon || props.dataItem.iconClass) && React3.createElement(IconWrap, { className: props.dataItem.iconClass, name: props.dataItem.icon, icon: props.dataItem.svgIcon }),
    props.dataItem.imageUrl && React3.createElement("img", { role: "presentation", alt: "", src: props.dataItem.imageUrl, className: "k-icon" }),
    text && React3.createElement("span", { className: "k-menu-link-text" }, text)
  )));
  return props.item !== void 0 && /* to be removed in 5.0.0 */
  props.render !== void 0 ? props.render.call(void 0, item, props) : item;
};
ButtonItem.displayName = "KendoReactButtonItem";

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/SplitButtonItem.js
var React4 = __toESM(require_react());
var PropTypes3 = __toESM(require_prop_types());
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SplitButtonItem = (
  /** @class */
  function(_super) {
    __extends3(SplitButtonItem2, _super);
    function SplitButtonItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SplitButtonItem2.prototype.render = function() {
      return null;
    };
    SplitButtonItem2.propTypes = {
      text: PropTypes3.string,
      icon: PropTypes3.string,
      iconClass: PropTypes3.string,
      imageUrl: PropTypes3.string,
      disabled: PropTypes3.bool,
      render: PropTypes3.any
    };
    return SplitButtonItem2;
  }(React4.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/utils/navigation.js
var navigate = function(focusedIndex, keyCode, altKey, total) {
  if (altKey) {
    return focusedIndex;
  }
  var index = Math.min(total - 1, Math.max(0, focusedIndex));
  switch (keyCode) {
    case Keys.enter:
    case Keys.space:
    case Keys.esc:
      return -1;
    case Keys.up:
    case Keys.left:
      return index - 1 < 0 ? total - 1 : index - 1;
    case Keys.down:
    case Keys.right:
      return index + 1 >= total ? 0 : index + 1;
    case Keys.home:
      return 0;
    case Keys.end:
      return total - 1;
    default:
      return focusedIndex;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/utils/popup.js
function getAnchorAlign(isDirectionRightToLeft) {
  var align = { horizontal: "left", vertical: "bottom" };
  if (isDirectionRightToLeft) {
    align.horizontal = "right";
  }
  return align;
}
function getPopupAlign(isDirectionRightToLeft) {
  var align = { horizontal: "left", vertical: "top" };
  if (isDirectionRightToLeft) {
    align.horizontal = "right";
  }
  return align;
}

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/SplitButton.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SplitButton = (
  /** @class */
  function(_super) {
    __extends4(SplitButton2, _super);
    function SplitButton2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {
        focused: false,
        focusedIndex: -1,
        opened: false
      };
      _this.wrapper = null;
      _this.mainButton = null;
      _this.list = null;
      _this.guid = guid();
      _this.skipFocus = false;
      _this.buttonsData = [];
      _this.onKeyDown = function(event) {
        var focusedIndex = _this.state.focusedIndex;
        if (event.altKey) {
          if (!_this.opened && event.keyCode === Keys.down) {
            _this.dispatchPopupEvent(event, true);
            _this.setState({ focusedIndex: 0, opened: true });
          } else if (_this.opened && event.keyCode === Keys.up) {
            _this.dispatchPopupEvent(event, false);
            _this.setState({ focusedIndex: -1, opened: false });
          }
          return;
        }
        var newState = void 0;
        if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {
          event.preventDefault();
          _this.dispatchClickEvent(event, focusedIndex);
          if (focusedIndex >= 0) {
            newState = {
              focusedIndex: _this.opened ? -1 : 0,
              opened: !_this.opened
            };
            _this.dispatchPopupEvent(event, newState.opened);
          }
        } else if (_this.opened && event.keyCode === Keys.esc) {
          newState = {
            focusedIndex: -1,
            opened: false
          };
          _this.dispatchPopupEvent(event, newState.opened);
        }
        if (_this.opened) {
          var newFocused = navigate(focusedIndex, event.keyCode, event.altKey, _this.buttonsData.length);
          if (newFocused !== focusedIndex) {
            newState = newState || {};
            newState.focusedIndex = newFocused;
          }
          var arrowKey = event.keyCode === Keys.up || event.keyCode === Keys.down || event.keyCode === Keys.left || event.keyCode === Keys.right;
          if (!event.altKey && (arrowKey || event.keyCode === Keys.home || event.keyCode === Keys.end)) {
            event.preventDefault();
          }
        }
        if (newState) {
          _this.setState(newState);
        }
      };
      _this.switchFocus = function(focusFn) {
        _this.skipFocus = true;
        focusFn();
        window.setTimeout(function() {
          return _this.skipFocus = false;
        }, 0);
      };
      _this.onFocus = function(event) {
        if (_this.skipFocus) {
          return;
        }
        dispatchEvent(_this.props.onFocus, event, _this, void 0);
        _this.setState({ focused: true });
      };
      _this.onItemClick = function(event, clickedItemIndex) {
        var opened = _this.opened;
        if (opened) {
          _this.setState({ focusedIndex: 0, opened: false });
        }
        _this.dispatchClickEvent(event, clickedItemIndex);
        if (opened) {
          _this.dispatchPopupEvent(event, false);
        }
      };
      _this.onBlur = function(event) {
        if (_this.skipFocus) {
          return;
        }
        _this.setState({
          focused: false,
          focusedIndex: -1,
          opened: false
        });
        dispatchEvent(_this.props.onBlur, event, _this, void 0);
        if (_this.opened) {
          _this.dispatchPopupEvent(event, false);
        }
      };
      _this.onPopupClose = function() {
        if (_this.state.focused) {
          _this.switchFocus(function() {
            if (_this.element) {
              _this.element.removeAttribute("tabindex");
              _this.element.focus({ preventScroll: true });
            }
          });
        }
      };
      _this.listRef = function(list) {
        _this.list = list;
        if (list && _this.state.focused) {
          _this.switchFocus(function() {
            list.focus({ preventScroll: true });
            if (_this.element) {
              _this.element.tabIndex = -1;
            }
          });
        }
      };
      _this.onSplitPartClick = function(event) {
        if (_this.buttonsData.length) {
          var toOpen = !_this.opened;
          _this.dispatchPopupEvent(event, toOpen);
          _this.setState({
            focusedIndex: toOpen ? 0 : -1,
            opened: toOpen,
            focused: true
          });
        }
      };
      _this.onDownSplitPart = function(event) {
        event.preventDefault();
        if (_this.element && document.activeElement !== _this.element && document.activeElement !== _this.list) {
          _this.element.focus();
        }
      };
      _this.onItemDown = function(event) {
        if (document.activeElement === _this.list) {
          event.preventDefault();
        }
      };
      _this.dispatchPopupEvent = function(dispatchedEvent, open) {
        dispatchEvent(open ? _this.props.onOpen : _this.props.onClose, dispatchedEvent, _this, void 0);
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(SplitButton2.prototype, "opened", {
      get: function() {
        return this.props.opened === void 0 ? this.state.opened : this.props.opened;
      },
      enumerable: false,
      configurable: true
    });
    SplitButton2.prototype.render = function() {
      var _this = this;
      this.buttonsData = this.props.items || React5.Children.toArray(this.props.children).filter(function(child) {
        return child && child.type === SplitButtonItem;
      }).map(function(child) {
        return child.props;
      });
      var rtl = this.isRtl();
      var dir = rtl ? "rtl" : void 0;
      var _a = this.props, id = _a.id, style = _a.style, tabIndex = _a.tabIndex, disabled = _a.disabled;
      return React5.createElement(
        "div",
        { id, style, className: classNames("k-split-button", "k-button-group", {
          "k-focus": this.state.focused
        }, "k-rounded-".concat(kendoThemeMaps.roundedMap[this.props.rounded || "medium"]), this.props.className), onKeyDown: this.onKeyDown, onFocus: this.onFocus, onBlur: this.onBlur, dir, ref: function(el) {
          return _this.wrapper = el;
        } },
        React5.createElement(Button, { ref: function(el) {
          return _this.mainButton = el && el.element;
        }, type: "button", size: this.props.size, rounded: this.props.rounded, fillMode: this.props.fillMode, themeColor: this.props.themeColor, onClick: function(event) {
          return _this.onItemClick(event, -1);
        }, disabled: disabled || void 0, tabIndex, accessKey: this.props.accessKey, className: this.props.buttonClass, icon: this.props.icon, svgIcon: this.props.svgIcon, iconClass: this.props.iconClass, imageUrl: this.props.imageUrl, dir, "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": this.opened || void 0, "aria-label": this.props.ariaLabel, "aria-controls": this.opened ? this.guid : void 0, id: "button-" + this.guid, title: this.props.title }, this.props.text),
        React5.createElement(Button, { type: "button", size: this.props.size, rounded: this.props.rounded, fillMode: this.props.fillMode, themeColor: this.props.themeColor, icon: "caret-alt-down", svgIcon: caretAltDownIcon, className: "k-split-button-arrow", disabled: disabled || void 0, tabIndex: -1, onClick: this.onSplitPartClick, onMouseDown: this.onDownSplitPart, onPointerDown: this.onDownSplitPart, dir, "aria-label": "menu toggling button" }),
        this.renderPopup(rtl)
      );
    };
    SplitButton2.prototype.componentDidMount = function() {
      if (this.props.dir === void 0 && this.isRtl() || this.opened) {
        this.forceUpdate();
      }
    };
    Object.defineProperty(SplitButton2.prototype, "element", {
      /**
       * The DOM element of main button.
       */
      get: function() {
        return this.mainButton;
      },
      enumerable: false,
      configurable: true
    });
    SplitButton2.prototype.dispatchClickEvent = function(dispatchedEvent, clickedItemIndex) {
      if (!this.isItemDisabled(clickedItemIndex)) {
        if (clickedItemIndex === -1) {
          dispatchEvent(this.props.onButtonClick, dispatchedEvent, this, void 0);
        } else {
          dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {
            item: this.buttonsData[clickedItemIndex],
            itemIndex: clickedItemIndex
          });
        }
      }
    };
    SplitButton2.prototype.renderPopup = function(rtl) {
      var _a;
      var _b = this.props.popupSettings, popupSettings = _b === void 0 ? {} : _b;
      var focusedIndex = this.state.focusedIndex;
      return React5.createElement(
        Popup,
        { anchor: this.wrapper, show: this.opened, animate: popupSettings.animate, popupClass: classNames("k-menu-popup", popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || getAnchorAlign(rtl), popupAlign: popupSettings.popupAlign || getPopupAlign(rtl), style: rtl ? { direction: "rtl" } : void 0, onClose: this.onPopupClose },
        React5.createElement("ul", { role: "menu", id: this.guid, "aria-labelledby": "button-" + this.guid, tabIndex: -1, ref: this.listRef, "aria-activedescendant": focusedIndex >= 0 ? "".concat(this.guid, "-").concat(focusedIndex) : void 0, className: classNames("k-group k-menu-group k-reset", (_a = {}, _a["k-menu-group-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a)) }, this.renderChildItems())
      );
    };
    SplitButton2.prototype.renderChildItems = function() {
      var _this = this;
      var _a = this.props, item = _a.item, itemRender = _a.itemRender, textField = _a.textField;
      return this.buttonsData.length > 0 ? this.buttonsData.map(function(dataItem, index) {
        return React5.createElement(ButtonItem, { className: "k-menu-item", dataItem, textField, focused: _this.state.focusedIndex === index, onClick: _this.onItemClick, onDown: _this.onItemDown, render: itemRender, item, key: index, index, id: "".concat(_this.guid, "-").concat(index) });
      }) : null;
    };
    SplitButton2.prototype.isItemDisabled = function(index) {
      return this.buttonsData[index] ? this.buttonsData[index].disabled : this.props.disabled;
    };
    SplitButton2.prototype.isRtl = function() {
      return this.props.dir !== void 0 ? this.props.dir === "rtl" : !!this.wrapper && getComputedStyle(this.wrapper).direction === "rtl";
    };
    SplitButton2.propTypes = {
      accessKey: PropTypes4.string,
      ariaLabel: PropTypes4.string,
      title: PropTypes4.string,
      onButtonClick: PropTypes4.func,
      onFocus: PropTypes4.func,
      onBlur: PropTypes4.func,
      onItemClick: PropTypes4.func,
      onOpen: PropTypes4.func,
      onClose: PropTypes4.func,
      text: PropTypes4.string,
      items: PropTypes4.arrayOf(PropTypes4.any),
      textField: PropTypes4.string,
      tabIndex: PropTypes4.number,
      disabled: PropTypes4.bool,
      icon: PropTypes4.string,
      svgIcon: svgIconPropType,
      iconClass: PropTypes4.string,
      imageUrl: PropTypes4.string,
      popupSettings: PropTypes4.object,
      itemRender: PropTypes4.any,
      item: PropTypes4.func,
      className: PropTypes4.string,
      buttonClass: PropTypes4.string,
      dir: PropTypes4.string
    };
    SplitButton2.defaultProps = {
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      themeColor: "base"
    };
    return SplitButton2;
  }(React5.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/DropDownButton.js
var React7 = __toESM(require_react());
var PropTypes6 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/DropDownButtonItem.js
var React6 = __toESM(require_react());
var PropTypes5 = __toESM(require_prop_types());
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DropDownButtonItem = (
  /** @class */
  function(_super) {
    __extends5(DropDownButtonItem2, _super);
    function DropDownButtonItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DropDownButtonItem2.prototype.render = function() {
      return null;
    };
    DropDownButtonItem2.propTypes = {
      text: PropTypes5.string,
      icon: PropTypes5.string,
      iconClass: PropTypes5.string,
      imageUrl: PropTypes5.string,
      selected: PropTypes5.bool,
      disabled: PropTypes5.bool,
      render: PropTypes5.any
    };
    return DropDownButtonItem2;
  }(React6.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/DropDownButton.js
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var DropDownButton = (
  /** @class */
  function(_super) {
    __extends6(DropDownButton2, _super);
    function DropDownButton2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {
        opened: false,
        focused: false,
        focusedIndex: -1
      };
      _this.wrapper = null;
      _this.mainButton = null;
      _this.list = null;
      _this.skipFocus = false;
      _this.guid = guid();
      _this.buttonsData = [];
      _this.onKeyDown = function(event) {
        var focusedIndex = _this.state.focusedIndex;
        if (event.altKey) {
          if (!_this.opened && event.keyCode === Keys.down) {
            _this.dispatchPopupEvent(event, true);
            _this.setState({ focusedIndex: 0, opened: true });
          } else if (_this.opened && event.keyCode === Keys.up) {
            _this.dispatchPopupEvent(event, false);
            _this.setState({ focusedIndex: -1, opened: false });
          }
          return;
        }
        var newState = __assign3({}, _this.state);
        if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {
          if (focusedIndex >= 0) {
            _this.dispatchClickEvent(event, focusedIndex);
          }
          event.preventDefault();
          newState.focusedIndex = _this.opened ? -1 : 0, newState.opened = !_this.opened;
          _this.dispatchPopupEvent(event, newState.opened);
        } else if (_this.opened && event.keyCode === Keys.esc) {
          newState.focusedIndex = -1;
          newState.opened = false;
          _this.dispatchPopupEvent(event, newState.opened);
        }
        if (_this.opened) {
          var newFocused = navigate(focusedIndex, event.keyCode, event.altKey, _this.buttonsData.length);
          newState.focusedIndex = newFocused;
          var arrowKey = event.keyCode === Keys.up || event.keyCode === Keys.down || event.keyCode === Keys.left || event.keyCode === Keys.right;
          if (!event.altKey && (arrowKey || event.keyCode === Keys.home || event.keyCode === Keys.end)) {
            event.preventDefault();
          }
        }
        _this.setState(newState);
      };
      _this.switchFocus = function(focusFn) {
        _this.skipFocus = true;
        focusFn();
        window.setTimeout(function() {
          return _this.skipFocus = false;
        }, 0);
      };
      _this.handleFocus = function(event) {
        if (_this.skipFocus) {
          return;
        }
        _this.setState({ focused: true, focusedIndex: _this.opened ? 0 : -1 });
        dispatchEvent(_this.props.onFocus, event, _this, void 0);
      };
      _this.handleBlur = function(event) {
        if (_this.skipFocus) {
          return;
        }
        _this.setState({ focused: false, opened: false, focusedIndex: -1 });
        dispatchEvent(_this.props.onBlur, event, _this, void 0);
        var fireCloseEvent = _this.opened;
        if (fireCloseEvent) {
          _this.dispatchPopupEvent(event, false);
        }
      };
      _this.onItemClick = function(event, clickedItemIndex) {
        _this.setState({ focusedIndex: -1, opened: false });
        _this.dispatchClickEvent(event, clickedItemIndex);
        _this.dispatchPopupEvent(event, false);
      };
      _this.onItemDown = function(event) {
        if (document.activeElement === _this.list) {
          event.preventDefault();
        }
      };
      _this.mouseDown = function(event) {
        event.preventDefault();
        if (_this.element && document.activeElement !== _this.element && document.activeElement !== _this.list) {
          _this.element.focus();
        }
      };
      _this.onPopupClose = function() {
        if (_this.state.focused) {
          _this.switchFocus(function() {
            if (_this.element) {
              _this.element.removeAttribute("tabindex");
              _this.element.focus({ preventScroll: true });
            }
          });
        }
      };
      _this.listRef = function(list) {
        _this.list = list;
        if (list && _this.state.focused) {
          _this.switchFocus(function() {
            list.focus({ preventScroll: true });
            if (_this.element) {
              _this.element.tabIndex = -1;
            }
          });
        }
      };
      _this.onClickMainButton = function(event) {
        if (!_this.buttonsData.length) {
          return;
        }
        var toOpen = !_this.opened;
        _this.setState({
          opened: toOpen,
          focused: true,
          focusedIndex: toOpen ? 0 : -1
        });
        _this.dispatchPopupEvent(event, toOpen);
      };
      _this.dispatchPopupEvent = function(dispatchedEvent, open) {
        dispatchEvent(open ? _this.props.onOpen : _this.props.onClose, dispatchedEvent, _this, void 0);
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(DropDownButton2.prototype, "opened", {
      get: function() {
        return this.props.opened === void 0 ? this.state.opened : this.props.opened;
      },
      enumerable: false,
      configurable: true
    });
    DropDownButton2.prototype.render = function() {
      var _this = this;
      var rtl = this.isRtl();
      var dir = rtl ? "rtl" : void 0;
      var _a = this.props, id = _a.id, style = _a.style, tabIndex = _a.tabIndex, disabled = _a.disabled;
      this.buttonsData = this.props.items || React7.Children.toArray(this.props.children).filter(function(child) {
        return child && child.type === DropDownButtonItem;
      }).map(function(child) {
        return child.props;
      });
      return React7.createElement(
        "div",
        { id, style, className: classNames("k-dropdown-button", {
          "k-focus": this.state.focused
        }, this.props.className), onKeyDown: this.onKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur, dir, ref: function(el) {
          return _this.wrapper = el;
        } },
        React7.createElement(Button, { size: this.props.size, rounded: this.props.rounded, fillMode: this.props.fillMode, themeColor: this.props.themeColor, onClick: this.onClickMainButton, onMouseDown: this.mouseDown, disabled: disabled || void 0, tabIndex, accessKey: this.props.accessKey, icon: this.props.icon, svgIcon: this.props.svgIcon, iconClass: this.props.iconClass, className: this.props.buttonClass, imageUrl: this.props.imageUrl, dir, ref: function(btn) {
          return _this.mainButton = btn && btn.element;
        }, type: "button", "aria-haspopup": true, "aria-expanded": this.opened || void 0, "aria-label": this.props.ariaLabel, "aria-controls": this.opened ? this.guid : void 0, id: "button-" + this.guid, title: this.props.title }, this.props.text),
        this.renderPopup(rtl)
      );
    };
    DropDownButton2.prototype.componentDidMount = function() {
      if (this.props.dir === void 0 && this.isRtl() || this.opened) {
        this.forceUpdate();
      }
    };
    Object.defineProperty(DropDownButton2.prototype, "element", {
      /**
       * The DOM element of main button.
       */
      get: function() {
        return this.mainButton;
      },
      enumerable: false,
      configurable: true
    });
    DropDownButton2.prototype.dispatchClickEvent = function(dispatchedEvent, index) {
      if (!this.isItemDisabled(index)) {
        dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {
          item: this.buttonsData[index],
          itemIndex: index
        });
      }
    };
    DropDownButton2.prototype.renderPopup = function(rtl) {
      var _a;
      var _b = this.props.popupSettings, popupSettings = _b === void 0 ? {} : _b;
      var focusedIndex = this.state.focusedIndex;
      return React7.createElement(
        Popup,
        { anchor: this.wrapper, show: this.opened, animate: popupSettings.animate, popupClass: classNames("k-menu-popup", popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || getAnchorAlign(rtl), popupAlign: popupSettings.popupAlign || getPopupAlign(rtl), style: rtl ? { direction: "rtl" } : void 0, onClose: this.onPopupClose },
        React7.createElement("ul", { role: "menu", id: this.guid, "aria-labelledby": "button-" + this.guid, tabIndex: -1, "aria-activedescendant": focusedIndex >= 0 ? "".concat(this.guid, "-").concat(focusedIndex) : void 0, ref: this.listRef, className: classNames("k-group k-menu-group k-reset", (_a = {}, _a["k-menu-group-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a)) }, this.renderChildItems())
      );
    };
    DropDownButton2.prototype.renderChildItems = function() {
      var _this = this;
      var _a = this.props, item = _a.item, itemRender = _a.itemRender, textField = _a.textField;
      return this.buttonsData.length > 0 ? this.buttonsData.map(function(dataItem, index) {
        return React7.createElement(ButtonItem, { className: "k-menu-item", dataItem, textField, focused: _this.state.focusedIndex === index, onClick: _this.onItemClick, onDown: _this.onItemDown, render: itemRender, item, index, key: index, id: "".concat(_this.guid, "-").concat(index) });
      }) : null;
    };
    DropDownButton2.prototype.isItemDisabled = function(index) {
      return this.buttonsData[index] ? this.buttonsData[index].disabled : this.props.disabled;
    };
    DropDownButton2.prototype.isRtl = function() {
      return this.props.dir !== void 0 ? this.props.dir === "rtl" : !!this.wrapper && getComputedStyle(this.wrapper).direction === "rtl";
    };
    DropDownButton2.propTypes = {
      accessKey: PropTypes6.string,
      ariaLabel: PropTypes6.string,
      title: PropTypes6.string,
      onFocus: PropTypes6.func,
      onBlur: PropTypes6.func,
      onItemClick: PropTypes6.func,
      onOpen: PropTypes6.func,
      onClose: PropTypes6.func,
      items: PropTypes6.arrayOf(PropTypes6.any),
      textField: PropTypes6.string,
      tabIndex: PropTypes6.number,
      disabled: PropTypes6.bool,
      icon: PropTypes6.string,
      svgIcon: svgIconPropType,
      iconClass: PropTypes6.string,
      imageUrl: PropTypes6.string,
      popupSettings: PropTypes6.object,
      itemRender: PropTypes6.func,
      item: PropTypes6.func,
      className: PropTypes6.string,
      buttonClass: PropTypes6.string,
      dir: PropTypes6.string
    };
    DropDownButton2.defaultProps = {
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      themeColor: "base"
    };
    return DropDownButton2;
  }(React7.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/Toolbar.js
var React8 = __toESM(require_react());
var PropTypes7 = __toESM(require_prop_types());
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var Toolbar = (
  /** @class */
  function(_super) {
    __extends7(Toolbar2, _super);
    function Toolbar2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this.offsetHeight = 0;
      _this.offsetWidth = 0;
      _this.buttons = [];
      _this.focusedSelector = _this.selectors.map(function(s) {
        return s + ":focus";
      }).join(",");
      _this.setTabIndex = function(focusedIndex) {
        var _a = _this.props.tabIndex, tabIndex = _a === void 0 ? Toolbar2.defaultProps.tabIndex : _a;
        _this.buttons.forEach(function(button, index) {
          button.tabIndex = index === focusedIndex ? tabIndex : -1;
        });
      };
      _this.onKeyDown = function(event) {
        var target = event.target;
        var arrowKey = event.keyCode === Keys.left || event.keyCode === Keys.right;
        if (!arrowKey || event.defaultPrevented || _this.buttons.findIndex(function(b) {
          return b === target;
        }) === -1) {
          return;
        }
        var focusedIndex = _this.focusedIndex;
        if (event.keyCode === Keys.left) {
          _this.focusButton(focusedIndex, focusedIndex - 1);
        } else {
          _this.focusButton(focusedIndex, focusedIndex + 1);
        }
      };
      _this.onWindowResize = function(event) {
        var element2 = _this.element;
        if (!element2) {
          return;
        }
        var offsetWidth = element2.offsetWidth;
        var offsetHeight = element2.offsetHeight;
        if (_this.offsetWidth !== offsetWidth || _this.offsetHeight !== offsetHeight) {
          _this.offsetWidth = offsetWidth;
          _this.offsetHeight = offsetHeight;
          var newSizes = { offsetWidth: _this.offsetWidth, offsetHeight: _this.offsetHeight };
          if (_this.props.onResize) {
            _this.props.onResize.call(void 0, __assign4(__assign4({ target: _this }, newSizes), { nativeEvent: event }));
          }
        }
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(Toolbar2.prototype, "selectors", {
      get: function() {
        return this.props.buttons || toolbarButtons;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Toolbar2.prototype, "focusedIndex", {
      get: function() {
        var focused = this.element && this.element.querySelector(this.focusedSelector);
        return Math.max(0, this.buttons.findIndex(function(e) {
          return e === focused;
        }));
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Toolbar2.prototype, "element", {
      /**
       * Returns the HTML element of the Toolbar component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Toolbar2.prototype.componentDidMount = function() {
      window.addEventListener("resize", this.onWindowResize);
      var element2 = this.element;
      if (element2) {
        this.offsetWidth = element2.offsetWidth;
        this.offsetHeight = element2.offsetHeight;
        if (this.props.keyboardNavigation !== false) {
          this.buttons = Array.from(element2.querySelectorAll(this.selectors.join(",")));
          this.setTabIndex(0);
        }
      }
    };
    Toolbar2.prototype.componentDidUpdate = function() {
      var element2 = this.element;
      if (!element2 || this.props.keyboardNavigation === false) {
        return;
      }
      this.buttons = Array.from(element2.querySelectorAll(this.selectors.join(",")));
      this.setTabIndex(this.focusedIndex);
    };
    Toolbar2.prototype.componentWillUnmount = function() {
      window.removeEventListener("resize", this.onWindowResize);
      this.buttons.length = 0;
    };
    Toolbar2.prototype.render = function() {
      var _a;
      var _this = this;
      return React8.createElement("div", { id: this.props.id, "aria-label": this.props.ariaLabel, className: classNames("k-toolbar", (_a = {}, _a["k-toolbar-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a), this.props.className), style: this.props.style, role: this.props.role !== void 0 ? this.props.role || void 0 : "toolbar", dir: this.props.dir, ref: function(element2) {
        return _this._element = element2;
      }, onKeyDown: this.props.keyboardNavigation !== false ? this.onKeyDown : void 0 }, this.props.children);
    };
    Toolbar2.prototype.focusButton = function(prevIndex, index) {
      var _a = this.props.tabIndex, tabIndex = _a === void 0 ? Toolbar2.defaultProps.tabIndex : _a;
      var button = this.buttons[index];
      if (button) {
        button.tabIndex = tabIndex;
        button.focus();
        var prevButton = this.buttons[prevIndex];
        if (prevButton) {
          prevButton.tabIndex = -1;
        }
      }
    };
    Toolbar2.propTypes = {
      tabIndex: PropTypes7.number,
      dir: PropTypes7.string,
      keyboardNavigation: PropTypes7.bool,
      style: PropTypes7.object,
      className: PropTypes7.string,
      role: PropTypes7.string,
      onResize: PropTypes7.func,
      buttons: PropTypes7.arrayOf(PropTypes7.string),
      size: PropTypes7.oneOf([null, "small", "medium", "large"])
    };
    Toolbar2.defaultProps = {
      tabIndex: 0,
      size: "medium"
    };
    return Toolbar2;
  }(React8.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/tools/ToolbarItem.js
var React9 = __toESM(require_react());
var PropTypes8 = __toESM(require_prop_types());
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ToolbarItem = (
  /** @class */
  function(_super) {
    __extends8(ToolbarItem2, _super);
    function ToolbarItem2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._element = null;
      return _this;
    }
    Object.defineProperty(ToolbarItem2.prototype, "element", {
      /**
       * Returns the HTML element of the ToolbarItem component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    ToolbarItem2.prototype.render = function() {
      var _this = this;
      return React9.createElement("div", { id: this.props.id, className: classNames("k-toolbar-item", this.props.className), style: this.props.style, ref: function(e) {
        return _this._element = e;
      } }, this.props.children);
    };
    ToolbarItem2.propTypes = {
      className: PropTypes8.string
    };
    return ToolbarItem2;
  }(React9.PureComponent)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/tools/ToolbarSeparator.js
var React10 = __toESM(require_react());
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ToolbarSeparator = (
  /** @class */
  function(_super) {
    __extends9(ToolbarSeparator2, _super);
    function ToolbarSeparator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolbarSeparator2.prototype.render = function() {
      return React10.createElement("div", { className: classNames("k-separator", this.props.className) });
    };
    return ToolbarSeparator2;
  }(React10.PureComponent)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/tools/ToolbarSpacer.js
var React11 = __toESM(require_react());
var PropTypes9 = __toESM(require_prop_types());
var ToolbarSpacer = React11.forwardRef(function(props, ref) {
  var element2 = React11.useRef(null);
  var spacer = React11.useRef(null);
  React11.useImperativeHandle(spacer, function() {
    return { element: element2.current };
  });
  React11.useImperativeHandle(ref, function() {
    return { element: element2.current };
  });
  var className = React11.useMemo(function() {
    return classNames("k-spacer", props.className);
  }, [props.className]);
  return React11.createElement("span", { ref: element2, className });
});
ToolbarSpacer.displayName = "KendoReactToolbarSpacer";
ToolbarSpacer.propTypes = {
  className: PropTypes9.string
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/Chip.js
var React13 = __toESM(require_react());
var PropTypes11 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/ChipList.js
var React12 = __toESM(require_react());
var PropTypes10 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/selection-reducer.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var SELECTION_TYPE;
(function(SELECTION_TYPE2) {
  SELECTION_TYPE2["single"] = "single";
  SELECTION_TYPE2["multiple"] = "multiple";
  SELECTION_TYPE2["none"] = "none";
})(SELECTION_TYPE || (SELECTION_TYPE = {}));
var SELECTION_ACTION;
(function(SELECTION_ACTION2) {
  SELECTION_ACTION2["toggle"] = "toggle";
  SELECTION_ACTION2["remove"] = "remove";
})(SELECTION_ACTION || (SELECTION_ACTION = {}));
var selectionReducer = function(state, action) {
  switch (action.selection) {
    case SELECTION_TYPE.single:
      switch (action.type) {
        case SELECTION_ACTION.toggle: {
          if (!Array.isArray(state) || state === null) {
            return action.payload === state ? null : action.payload;
          }
          throw new Error("State cannot be an array in single selection");
        }
        case SELECTION_ACTION.remove: {
          return action.payload === state ? null : state;
        }
        default:
          return state;
      }
    case SELECTION_TYPE.multiple:
      switch (action.type) {
        case SELECTION_ACTION.toggle: {
          if (Array.isArray(state)) {
            return state.some(function(i) {
              return i === action.payload;
            }) ? state.filter(function(i) {
              return i !== action.payload;
            }) : __spreadArray(__spreadArray([], state, true), [action.payload], false);
          }
          if (state === null) {
            return [action.payload];
          }
          throw new Error("State cannot be non-array in multiple selection");
        }
        case SELECTION_ACTION.remove: {
          if (Array.isArray(state)) {
            return state.some(function(i) {
              return i === action.payload;
            }) ? state.filter(function(i) {
              return i !== action.payload;
            }) : __spreadArray(__spreadArray([], state, true), [action.payload], false);
          }
          return state;
        }
        default:
          return state;
      }
    case SELECTION_TYPE.none:
      return null;
    default:
      return state;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/focus-reducer.js
var FOCUS_ACTION;
(function(FOCUS_ACTION2) {
  FOCUS_ACTION2["next"] = "next";
  FOCUS_ACTION2["prev"] = "prev";
  FOCUS_ACTION2["current"] = "current";
  FOCUS_ACTION2["reset"] = "reset";
})(FOCUS_ACTION || (FOCUS_ACTION = {}));
var focusReducer = function(state, action) {
  var currentIndex = action.items.findIndex(function(i) {
    return i === state;
  });
  switch (action.type) {
    case FOCUS_ACTION.next:
      return currentIndex === action.items.length - 1 ? state : action.items[currentIndex + 1];
    case FOCUS_ACTION.prev:
      return currentIndex === 0 ? state : action.items[currentIndex - 1];
    case FOCUS_ACTION.current:
      return action.payload;
    case FOCUS_ACTION.reset:
      return null;
    default:
      return state;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/data-reducer.js
var DATA_ACTION;
(function(DATA_ACTION2) {
  DATA_ACTION2["remove"] = "remove";
  DATA_ACTION2["add"] = "add";
  DATA_ACTION2["reorder"] = "reorder";
})(DATA_ACTION || (DATA_ACTION = {}));
var dataReducer = function(state, action) {
  switch (action.type) {
    case DATA_ACTION.add:
      break;
    case DATA_ACTION.remove:
      return state.filter(function(i) {
        return i[action.valueField] !== action.payload;
      });
    case DATA_ACTION.reorder:
      break;
    default:
      return state;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/ChipList.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var ChipListSelectionContext = React12.createContext([null, function(_args) {
}]);
var ChipListFocusContext = React12.createContext([null, function(_args) {
}]);
var ChipListDataContext = React12.createContext([null, function(_args) {
}]);
var useSelection = function(defaultValue, args, callback) {
  var _a = React12.useState(defaultValue), state = _a[0], setState = _a[1];
  var handleDispatchSelection = function(action) {
    var newState = selectionReducer(args.state || state, __assign5(__assign5({}, action), args));
    if (callback) {
      callback(newState, action.event);
    }
    setState(newState);
  };
  return [state, handleDispatchSelection];
};
var useFocus = function(args) {
  var _a = React12.useState(null), state = _a[0], setState = _a[1];
  var handleDispatchFocus = function(action) {
    var newState = focusReducer(action.payload, __assign5(__assign5({}, action), args));
    setState(newState);
  };
  return [state, handleDispatchFocus];
};
var useData = function(defaultData, args, callback) {
  var _a = React12.useState(defaultData), state = _a[0], setState = _a[1];
  var handleDispatchData = function(action) {
    var newState = dataReducer(args.state || state, __assign5(__assign5({}, action), args));
    if (callback) {
      callback(newState, action.event);
    }
    setState(newState);
  };
  return [state, handleDispatchData];
};
var ChipList = React12.forwardRef(function(props, ref) {
  var _a;
  validatePackage(packageMetadata);
  var target = React12.useRef(null);
  var chipListRef = React12.useRef(null);
  var dir = useDir(chipListRef, props.dir);
  var chip = props.chip, id = props.id, style = props.style, tabIndex = props.tabIndex, disabled = props.disabled, size = props.size, className = props.className, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, _b = props.selection, selection = _b === void 0 ? defaultProps.selection : _b, _c = props.value, value = _c === void 0 ? defaultProps.defaultValue : _c, _d = props.defaultData, defaultData = _d === void 0 ? defaultProps.defaultData : _d, _e = props.valueField, valueField = _e === void 0 ? defaultProps.valueField : _e, _f = props.textField, textField = _f === void 0 ? defaultProps.textField : _f, onChange = props.onChange, onDataChange = props.onDataChange;
  var ChipComponent = React12.useMemo(function() {
    return chip || Chip;
  }, [chip, Chip]);
  React12.useImperativeHandle(target, function() {
    return {
      element: chipListRef.current,
      props
    };
  });
  React12.useImperativeHandle(ref, function() {
    return target.current;
  });
  var handleChange = React12.useCallback(function(newValue, event) {
    if (onChange && target.current) {
      onChange.call(void 0, {
        value: newValue,
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [onChange]);
  var _g = useSelection(value, {
    selection,
    state: value
  }, handleChange), stateValue = _g[0], dispatchStateValue = _g[1];
  var handleDataChange = React12.useCallback(function(newData, event) {
    if (onDataChange && target.current) {
      onDataChange.call(void 0, {
        value: newData,
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [onDataChange]);
  var _h = useData(props.data || defaultData, {
    state: props.data,
    valueField
  }, handleDataChange), stateData = _h[0], dispatchData = _h[1];
  var itemsReducer = React12.useCallback(function(acc, current) {
    acc.push(current[valueField]);
    return acc;
  }, [valueField]);
  var data = React12.useMemo(function() {
    return props.data || stateData;
  }, [props.data, stateData]);
  var chipValue = React12.useMemo(function() {
    return value || stateValue;
  }, [value, stateValue]);
  var items = React12.useMemo(function() {
    return data.reduce(itemsReducer, []);
  }, [data, itemsReducer]);
  var valueGetter = React12.useCallback(function(item) {
    return getter(valueField)(item);
  }, [valueField]);
  var textGetter = React12.useCallback(function(item) {
    return getter(textField)(item);
  }, [textField]);
  var _j = useFocus({ items }), focus = _j[0], dispatchFocus = _j[1];
  var mouseProps = useMouse(props, target);
  return React12.createElement(
    ChipListSelectionContext.Provider,
    { value: [chipValue, dispatchStateValue] },
    React12.createElement(
      ChipListFocusContext.Provider,
      { value: [focus, dispatchFocus] },
      React12.createElement(
        ChipListDataContext.Provider,
        { value: [data, dispatchData] },
        React12.createElement("div", __assign5({ ref: chipListRef }, mouseProps, { role: "listbox", id, dir, style, tabIndex: getTabIndex(tabIndex, disabled, void 0), className: classNames("k-chip-list", (_a = {
          "k-rtl": dir === "rtl",
          "k-disabled": disabled
        }, _a["k-chip-list-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a), className), "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }), data.map(function(item, index) {
          return React12.createElement(ChipComponent, { role: "option", dataItem: item, size, key: [valueGetter(item), index].join("-"), text: textGetter(item), value: valueGetter(item) });
        }))
      )
    )
  );
});
var propTypes = {
  id: PropTypes10.string,
  className: PropTypes10.string,
  tabIndex: PropTypes10.number,
  data: PropTypes10.any,
  defaultData: PropTypes10.arrayOf(PropTypes10.any),
  onDataChange: PropTypes10.func,
  value: PropTypes10.oneOfType([PropTypes10.any, PropTypes10.arrayOf(PropTypes10.any)]),
  defaultValue: PropTypes10.oneOfType([PropTypes10.any, PropTypes10.arrayOf(PropTypes10.any)]),
  onChange: PropTypes10.func,
  selection: PropTypes10.oneOf(["single", "none", "multiple"]),
  textField: PropTypes10.string,
  valueField: PropTypes10.string,
  disabled: PropTypes10.bool,
  dir: PropTypes10.oneOf(["ltr", "rtl"]),
  ariaLabelledBy: PropTypes10.string,
  ariaDescribedBy: PropTypes10.string,
  size: PropTypes10.oneOf([null, "small", "medium", "large"])
};
var defaultProps = {
  chip: Chip,
  size: "medium",
  disabled: false,
  defaultValue: null,
  defaultData: [],
  dir: "ltr",
  selection: "none",
  textField: "text",
  valueField: "value",
  removable: "removable"
};
ChipList.displayName = "KendoReactChipList";
ChipList.propTypes = propTypes;
ChipList.defaultProps = defaultProps;

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/Chip.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var Chip = React13.forwardRef(function(props, ref) {
  var _a;
  validatePackage(packageMetadata);
  var target = React13.useRef(null);
  var chipRef = React13.useRef(null);
  var dir = useDir(chipRef, props.dir);
  React13.useImperativeHandle(target, function() {
    return {
      element: chipRef.current,
      props
    };
  });
  React13.useImperativeHandle(ref, function() {
    return target.current;
  });
  var _b = React13.useContext(ChipListSelectionContext), selection = _b[0], dispatchSelection = _b[1];
  var _c = React13.useContext(ChipListFocusContext), focus = _c[0], dispatchFocus = _c[1];
  var _d = React13.useContext(ChipListDataContext), dispatchData = _d[1];
  var selected = React13.useMemo(function() {
    return props.selected || (Array.isArray(selection) ? selection.some(function(i) {
      return i === props.value;
    }) : selection === props.value);
  }, [props.selected, props.value, selection]);
  var focused = React13.useMemo(function() {
    return focus === props.value;
  }, [props.value, focus]);
  React13.useEffect(function() {
    if (focused && chipRef.current) {
      chipRef.current.focus();
    }
  }, [focused]);
  var handleClick = React13.useCallback(function(event) {
    dispatchSelection({ type: SELECTION_ACTION.toggle, payload: props.value, event });
  }, [dispatchSelection, props.value]);
  var handleRemove = React13.useCallback(function(event) {
    if (!props.removable) {
      return;
    }
    dispatchData({ type: DATA_ACTION.remove, payload: props.value, event });
    dispatchFocus({ type: FOCUS_ACTION.reset, payload: props.value, event });
    dispatchSelection({ type: SELECTION_ACTION.remove, payload: props.value, event });
    if (props.onRemove) {
      props.onRemove.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onRemove, props.value, props.removable, dispatchData, dispatchFocus, dispatchSelection]);
  var handleKeyDown = React13.useCallback(function(event) {
    switch (event.keyCode) {
      case Keys.left:
        dispatchFocus({ type: FOCUS_ACTION.prev, payload: props.value, event });
        break;
      case Keys.right:
        dispatchFocus({ type: FOCUS_ACTION.next, payload: props.value, event });
        break;
      case Keys.enter:
        dispatchSelection({ type: SELECTION_ACTION.toggle, payload: props.value, event });
        break;
      case Keys.delete:
        handleRemove(event);
        break;
      default:
        break;
    }
    if (props.onKeyDown) {
      props.onKeyDown.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onKeyDown, props.value, dispatchFocus, dispatchSelection, handleRemove]);
  var handleFocus = React13.useCallback(function(event) {
    dispatchFocus({ payload: props.value, type: FOCUS_ACTION.current, event });
    if (props.onFocus) {
      props.onFocus.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onFocus, props.value, dispatchFocus]);
  var handleBlur = React13.useCallback(function(event) {
    if (props.onBlur) {
      props.onBlur.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onBlur]);
  var mouseProps = useMouse(props, target, { onClick: handleClick });
  return React13.createElement(
    "div",
    __assign6({}, mouseProps, { role: props.role, id: props.value, style: props.style, ref: chipRef, dir, tabIndex: getTabIndex(props.tabIndex, props.disabled, void 0), className: classNames("k-chip", (_a = {
      "k-rtl": dir === "rtl",
      "k-disabled": props.disabled,
      "k-selected": selected,
      "k-focus": focused
    }, _a["k-chip-".concat(kendoThemeMaps.sizeMap[props.size] || props.size)] = props.size, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[props.rounded] || props.rounded)] = props.rounded, _a["k-chip-".concat(props.fillMode)] = props.fillMode, _a["k-chip-".concat(props.fillMode, "-").concat(props.themeColor)] = Boolean(props.fillMode && props.themeColor), _a), props.className), "aria-checked": selected, "aria-disabled": props.disabled, "aria-describedby": props.ariaDescribedBy, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown }),
    selected && (props.selectedIcon || props.selectedSvgIcon) && React13.createElement(IconWrap, { className: "k-chip-icon", name: props.selectedIcon ? toIconName(props.selectedIcon) : void 0, icon: props.selectedSvgIcon }),
    (props.icon || props.svgIcon) && React13.createElement(IconWrap, { className: "k-chip-icon", name: props.icon ? toIconName(props.icon) : void 0, icon: props.svgIcon }),
    React13.createElement("span", { className: "k-chip-content" }, props.children !== void 0 ? props.children : props.text && React13.createElement("span", { "aria-label": props.text, className: "k-chip-label" }, props.text)),
    props.removable && React13.createElement(
      "span",
      { className: "k-chip-actions" },
      React13.createElement(
        "span",
        { className: classNames("k-chip-action", "k-chip-remove-action"), onClick: handleRemove },
        React13.createElement(IconWrap, { name: props.removeIcon ? toIconName(props.removeIcon) : void 0, icon: props.removeSvgIcon })
      )
    )
  );
});
var propTypes2 = {
  id: PropTypes11.string,
  text: PropTypes11.string,
  value: PropTypes11.any,
  dir: PropTypes11.oneOf(["ltr", "rtl"]),
  removable: PropTypes11.bool,
  removeIcon: PropTypes11.string,
  removeIconSvg: svgIconPropType,
  disabled: PropTypes11.bool,
  icon: PropTypes11.string,
  svgIcon: svgIconPropType,
  selectedIcon: PropTypes11.string,
  selectedIconSvg: svgIconPropType,
  onRemove: PropTypes11.func,
  dataItem: PropTypes11.any,
  selected: PropTypes11.bool,
  ariaDescribedBy: PropTypes11.string,
  size: PropTypes11.oneOf([null, "small", "medium", "large"]),
  rounded: PropTypes11.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: PropTypes11.oneOf([null, "outline", "solid"]),
  // eslint-disable-next-line max-len
  themeColor: PropTypes11.oneOf([null, "base", "info", "success", "warning", "error"])
};
var defaultProps2 = {
  disabled: false,
  removable: false,
  removeIcon: "k-i-x-circle",
  dir: "ltr",
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  themeColor: "base"
};
Chip.displayName = "KendoReactChip";
Chip.propTypes = propTypes2;
Chip.defaultProps = defaultProps2;

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/FloatingActionButton.js
var React15 = __toESM(require_react());
var PropTypes13 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/FloatingActionButtonItem.js
var React14 = __toESM(require_react());
var PropTypes12 = __toESM(require_prop_types());
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var FloatingActionButtonItem = React14.forwardRef(function(props, ref) {
  var className = props.className, disabled = props.disabled, text = props.text, icon = props.icon, style = props.style, id = props.id, focused = props.focused, tabIndex = props.tabIndex, index = props.index, dataItem = props.dataItem, item = props.item, onDown = props.onDown, onClick = props.onClick, others = __rest2(props, ["className", "disabled", "text", "icon", "style", "id", "focused", "tabIndex", "index", "dataItem", "item", "onDown", "onClick"]);
  var elementRef = React14.useRef(null);
  var focusElement = React14.useCallback(function() {
    if (elementRef.current) {
      elementRef.current.focus();
    }
  }, []);
  var getImperativeHandle = React14.useCallback(function() {
    return {
      element: elementRef.current,
      focus: focusElement
    };
  }, [focusElement]);
  React14.useImperativeHandle(ref, getImperativeHandle);
  var handleClick = React14.useCallback(function(event) {
    if (onClick && index !== void 0 && !disabled) {
      onClick(event, index);
    }
  }, [onClick, index]);
  var itemClassNames = React14.useMemo(function() {
    return classNames("k-fab-item", {
      "k-focus": focused,
      "k-disabled": disabled
    }, className);
  }, [className, disabled, focused]);
  var ItemComp = item;
  return React14.createElement("li", __assign7({ ref: elementRef, id, className: itemClassNames, style, role: "menuitem", tabIndex: getTabIndex(tabIndex, disabled), "aria-disabled": disabled, "aria-label": "".concat(text || "", " floatingactionbutton item"), onClick: handleClick, onMouseDown: onDown, onPointerDown: onDown }, others), ItemComp ? React14.createElement(ItemComp, { itemIndex: index, item: dataItem }) : React14.createElement(
    React14.Fragment,
    null,
    text && React14.createElement("span", { className: "k-fab-item-text" }, text),
    icon && React14.createElement("span", { className: classNames("k-fab-item-icon k-icon k-i-".concat(icon)) })
  ));
});
FloatingActionButtonItem.propTypes = {
  className: PropTypes12.string,
  style: PropTypes12.object,
  children: PropTypes12.any,
  disabled: PropTypes12.bool,
  focused: PropTypes12.bool,
  index: PropTypes12.number,
  icon: PropTypes12.string,
  text: PropTypes12.string,
  tabIndex: PropTypes12.number,
  customProp: PropTypes12.any
};
FloatingActionButtonItem.displayName = "KendoFloatingActionButtonItem";

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/utils.js
var DEFAULT_OFFSET = "16px";
var toStringValues = function(val) {
  if (typeof val === "number") {
    return val + "px";
  }
  return val;
};
var getAnchorAlign2 = function(fabAlign, rtl) {
  var align = { horizontal: rtl ? "right" : "left", vertical: "bottom" };
  if (fabAlign.horizontal === "end") {
    align.horizontal = rtl ? "left" : "right";
  }
  return align;
};
var getPopupAlign2 = function(fabAlign, rtl) {
  var align = { horizontal: rtl ? "right" : "left", vertical: "top" };
  if (fabAlign.horizontal === "end") {
    align.horizontal = rtl ? "left" : "right";
  }
  return align;
};
var getTextDirectionClass = function(rtl, hAlign) {
  var al = hAlign === "end" ? "end" : "start";
  var directions = {
    rtl: { end: "k-text-left", start: "k-text-right" },
    ltr: { start: "k-text-left", end: "k-text-right" }
  };
  return directions[rtl][al];
};
var position = function(ref, align, alignOffset, isRtl) {
  var horizontal = align.horizontal;
  var vertical = align.vertical;
  if (ref.current) {
    var xFab = alignOffset && alignOffset.x !== void 0 ? toStringValues(alignOffset.x) : DEFAULT_OFFSET;
    var xCenterFab = alignOffset && alignOffset.x !== void 0 ? "calc(50% + ".concat(toStringValues(alignOffset.x), ")") : "50%";
    var yFab = alignOffset && alignOffset.y !== void 0 ? toStringValues(alignOffset.y) : DEFAULT_OFFSET;
    var yCenterFab = alignOffset && alignOffset.y !== void 0 ? "calc(50% + ".concat(toStringValues(alignOffset.y), ")") : "50%";
    ref.current.style.setProperty(horizontalPosition(align, isRtl), horizontal === "center" ? xCenterFab : xFab);
    ref.current.style.setProperty(verticalPosition(align), vertical === "middle" ? yCenterFab : yFab);
    if (isRtl) {
      if ((vertical === "top" || vertical === "bottom") && horizontal === "start") {
        ref.current.style.setProperty("left", "unset");
      }
      if (vertical === "middle" && horizontal === "end") {
        ref.current.style.setProperty("right", "unset");
      }
      if (vertical === "middle" && horizontal === "start") {
        ref.current.style.setProperty("left", "unset");
      }
    }
  }
};
var horizontalPosition = function(align, isRtl) {
  var horizontal = align.horizontal;
  return {
    end: isRtl ? "left" : "right",
    center: "left",
    start: isRtl ? "right" : "left"
  }[horizontal || "end"];
};
var verticalPosition = function(align) {
  return {
    top: "top",
    middle: "top",
    bottom: "bottom"
  }[align.vertical || "bottom"];
};

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/FloatingActionButton.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var ZINDEX_FAB_STEP = 2;
var DEFAULT_FAB_ZINDEX = 100;
var FloatingActionButton = React15.forwardRef(function(props, ref) {
  validatePackage(packageMetadata);
  var _a = props.align, align = _a === void 0 ? defaultProps3.align : _a, alignOffset = props.alignOffset, className = props.className, disabled = props.disabled, icon = props.icon, svgIcon = props.svgIcon, iconClass = props.iconClass, id = props.id, items = props.items, item = props.item, text = props.text, _b = props.positionMode, positionMode = _b === void 0 ? defaultProps3.positionMode : _b, _c = props.size, size = _c === void 0 ? defaultProps3.size : _c, style = props.style, _d = props.rounded, rounded = _d === void 0 ? defaultProps3.rounded : _d, _e = props.themeColor, themeColor = _e === void 0 ? defaultProps3.themeColor : _e, overlayStyle = props.overlayStyle, tabIndex = props.tabIndex, accessKey = props.accessKey, _f = props.popupSettings, popupSettings = _f === void 0 ? {} : _f, modal = props.modal, onClick = props.onClick, onItemClick = props.onItemClick, onFocus = props.onFocus, onBlur = props.onBlur, onKeyDown = props.onKeyDown, onOpen = props.onOpen, onClose = props.onClose, others = __rest3(props, ["align", "alignOffset", "className", "disabled", "icon", "svgIcon", "iconClass", "id", "items", "item", "text", "positionMode", "size", "style", "rounded", "themeColor", "overlayStyle", "tabIndex", "accessKey", "popupSettings", "modal", "onClick", "onItemClick", "onFocus", "onBlur", "onKeyDown", "onOpen", "onClose"]);
  var zIndexContext = useZIndexContext();
  var currentZIndex = zIndexContext ? zIndexContext + ZINDEX_FAB_STEP : DEFAULT_FAB_ZINDEX;
  var target = React15.useRef(null);
  var elementRef = React15.useRef(null);
  var listRef = React15.useRef(null);
  var popupRef = React15.useRef(null);
  var focusElement = React15.useCallback(function() {
    if (elementRef.current) {
      elementRef.current.focus();
    }
  }, []);
  var getImperativeHandle = React15.useCallback(function() {
    return {
      element: elementRef.current,
      focus: focusElement
    };
  }, [focusElement]);
  React15.useImperativeHandle(target, getImperativeHandle);
  React15.useImperativeHandle(ref, function() {
    return target.current;
  });
  var _g = React15.useState(false), open = _g[0], setOpen = _g[1];
  var _h = React15.useState(false), focused = _h[0], setFocused = _h[1];
  var _j = React15.useState(-1), focusedIndex = _j[0], setFocusedIndex = _j[1];
  var buttonId = React15.useMemo(function() {
    return guid();
  }, []);
  var dir = useDir(elementRef, props.dir);
  var isRtl = dir === "rtl";
  var listId = React15.useMemo(function() {
    return guid();
  }, []);
  React15.useEffect(function() {
    position(elementRef, align, alignOffset, isRtl);
  }, [elementRef, align, alignOffset, isRtl]);
  React15.useEffect(function() {
    if (focused && elementRef && elementRef.current) {
      elementRef.current.focus();
    }
  }, [focused, elementRef]);
  var dispatchPopupEvent = React15.useCallback(function(dispatchedEvent, isOpen) {
    if (!items) {
      return;
    }
    dispatchEvent(isOpen ? onOpen : onClose, dispatchedEvent, getImperativeHandle(), void 0);
  }, [onOpen, onClose, items]);
  var handleClick = React15.useCallback(function(event) {
    if (!event.target || disabled) {
      return;
    }
    if (!items && onClick) {
      dispatchEvent(onClick, event, getImperativeHandle(), void 0);
    } else {
      setOpen(!open);
      setFocused(true);
      setFocusedIndex(!open ? 0 : -1);
      dispatchPopupEvent(event, !open);
    }
  }, [
    setOpen,
    setFocused,
    setFocusedIndex,
    onClick,
    dispatchPopupEvent,
    open,
    items,
    disabled
  ]);
  var handleFocus = React15.useCallback(function(event) {
    setFocused(true);
    setFocusedIndex(open ? 0 : -1);
    if (onFocus) {
      dispatchEvent(onFocus, event, getImperativeHandle(), void 0);
    }
  }, [onFocus, setFocused, setFocusedIndex]);
  var handleBlur = React15.useCallback(function(event) {
    setFocused(false);
    setOpen(false);
    setFocusedIndex(-1);
    dispatchEvent(onBlur, event, getImperativeHandle(), void 0);
    var fireCloseEvent = open;
    if (fireCloseEvent) {
      dispatchPopupEvent(event, false);
    }
  }, [onBlur, setFocused, setOpen, setFocusedIndex, dispatchPopupEvent]);
  var handleMouseDown = React15.useCallback(function(event) {
    event.preventDefault();
  }, []);
  var dispatchItemClickEvent = React15.useCallback(function(dispatchedEvent, index) {
    if (!items) {
      return;
    }
    if (!items[index].disabled) {
      dispatchEvent(onItemClick, dispatchedEvent, getImperativeHandle(), {
        itemProps: items[index],
        itemIndex: index
      });
    }
  }, [onItemClick]);
  var handleItemClick = React15.useCallback(function(event, clickedItemIndex) {
    if (!event.target || !items) {
      return;
    }
    setFocusedIndex(clickedItemIndex);
    setOpen(false);
    dispatchItemClickEvent(event, clickedItemIndex);
    dispatchPopupEvent(event, false);
  }, [setFocusedIndex, setOpen, dispatchItemClickEvent, dispatchPopupEvent]);
  var handleItemDown = React15.useCallback(function(event) {
    if (document.activeElement === elementRef.current) {
      event.preventDefault();
    }
  }, [elementRef, document.activeElement]);
  var handleKeyDown = React15.useCallback(function(event) {
    var currIndex = focusedIndex;
    var maxNavIndex = items ? items.length - 1 : -1;
    var isAtBottom = align.vertical === "bottom";
    switch (event.keyCode) {
      case Keys.enter:
      case Keys.space:
        if (currIndex >= 0) {
          dispatchItemClickEvent(event, currIndex);
        }
        event.preventDefault();
        setOpen(!open);
        setFocusedIndex(!open ? 0 : -1);
        break;
      case Keys.esc:
        event.preventDefault();
        setOpen(false);
        setFocusedIndex(-1);
        break;
      case Keys.home:
        event.preventDefault();
        setFocusedIndex(0);
        break;
      case Keys.end:
        event.preventDefault();
        setFocusedIndex(maxNavIndex);
        break;
      case Keys.down:
      case Keys.right:
        event.preventDefault();
        if (currIndex < maxNavIndex && !isAtBottom) {
          setFocusedIndex(currIndex + 1);
        }
        if (currIndex > 0 && isAtBottom) {
          setFocusedIndex(currIndex - 1);
        }
        break;
      case Keys.up:
      case Keys.left:
        event.preventDefault();
        if (currIndex > 0 && !isAtBottom) {
          setFocusedIndex(currIndex - 1);
        }
        if (currIndex < maxNavIndex && isAtBottom) {
          setFocusedIndex(currIndex + 1);
        }
        break;
      default:
        break;
    }
    dispatchEvent(onKeyDown, event, getImperativeHandle(), void 0);
  }, [onKeyDown, focusedIndex, setFocusedIndex, isRtl, setOpen]);
  var buttonClassNames = React15.useMemo(function() {
    var _a2;
    return classNames("k-fab k-fab-solid", (_a2 = {
      "k-fab-sm": size === "small",
      "k-fab-md": size === "medium",
      "k-fab-lg": size === "large",
      "k-disabled": disabled,
      "k-pos-absolute": positionMode === "absolute",
      "k-pos-fixed": positionMode === "fixed",
      "k-focus": focused
    }, _a2["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a2["k-fab-solid-".concat(themeColor)] = themeColor, _a2), "k-".concat(align.vertical, "-").concat(align.horizontal), className);
  }, [themeColor, size, rounded, disabled, positionMode, align, focused, className]);
  var fabItems = items && items.map(function(element2, index) {
    return React15.createElement(FloatingActionButtonItem, __assign8({}, element2, { key: index, index, id: "".concat(listId, "-").concat(index), disabled: disabled || element2.disabled, focused: focusedIndex === index, dataItem: element2, item, className: classNames(element2.className, getTextDirectionClass(dir || "ltr", align.horizontal)), onClick: handleItemClick, onDown: handleItemDown }));
  });
  var isIconFab = Boolean((icon || svgIcon) && !text);
  var fabWidth = elementRef.current ? elementRef.current.offsetWidth : 0;
  var iconWidth = 32;
  var spacing = fabWidth / 2 - iconWidth / 2;
  return React15.createElement(
    ZIndexContext.Provider,
    { value: currentZIndex },
    React15.createElement(
      React15.Fragment,
      null,
      React15.createElement(
        "button",
        __assign8({ ref: elementRef, id: id || buttonId, role: items ? "menubutton" : "button", type: "button", "aria-disabled": disabled, "aria-expanded": items ? open : void 0, "aria-haspopup": items ? true : false, "aria-label": "".concat(text || "", " floatingactionbutton"), "aria-owns": items ? listId : void 0, "aria-activedescendant": focusedIndex >= 0 && items ? "".concat(listId, "-").concat(focusedIndex) : void 0, tabIndex: getTabIndex(tabIndex, disabled), accessKey, dir, disabled, className: buttonClassNames, style, onClick: handleClick, onMouseDown: handleMouseDown, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown }, others),
        icon || svgIcon ? React15.createElement(IconWrap, { className: "k-fab-icon", name: icon, icon: svgIcon }) : iconClass ? React15.createElement("span", { role: "presentation", className: iconClass }) : null,
        text && React15.createElement("span", { className: "k-fab-text" }, text)
      ),
      modal && open && React15.createElement("div", { className: "k-overlay", style: __assign8({ zIndex: currentZIndex }, overlayStyle) }),
      React15.createElement(
        Popup,
        { ref: popupRef, anchor: elementRef.current, show: open, animate: popupSettings.animate, popupClass: classNames("k-popup-transparent k-fab-popup", popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || getAnchorAlign2(align, isRtl), popupAlign: popupSettings.popupAlign || getPopupAlign2(align, isRtl), style: { boxShadow: "none" } },
        React15.createElement("ul", { ref: listRef, role: "menu", "aria-labelledby": id, id: listId, className: classNames("k-fab-items", {
          "k-fab-items-bottom": align.vertical !== "bottom",
          "k-fab-items-top": align.vertical === "bottom"
        }), style: {
          paddingLeft: isIconFab ? spacing : void 0,
          paddingRight: isIconFab ? spacing : void 0
        } }, fabItems)
      )
    )
  );
});
FloatingActionButton.propTypes = {
  className: PropTypes13.string,
  style: PropTypes13.object,
  id: PropTypes13.string,
  dir: PropTypes13.string,
  tabIndex: PropTypes13.number,
  accessKey: PropTypes13.string,
  disabled: PropTypes13.bool,
  icon: PropTypes13.string,
  svgIcon: svgIconPropType,
  iconClass: PropTypes13.string,
  text: PropTypes13.string,
  alignOffset: PropTypes13.shape({
    x: PropTypes13.oneOfType([PropTypes13.number, PropTypes13.string]),
    y: PropTypes13.oneOfType([PropTypes13.number, PropTypes13.string])
  }),
  align: PropTypes13.shape({
    vertical: PropTypes13.oneOf(["top", "middle", "bottom"]),
    horizontal: PropTypes13.oneOf(["start", "center", "end"])
  }),
  positionMode: PropTypes13.oneOf(["absolute", "fixed"]),
  size: PropTypes13.oneOf([null, "small", "medium", "large"]),
  rounded: PropTypes13.oneOf([null, "small", "medium", "large", "full"]),
  themeColor: PropTypes13.oneOf([
    null,
    "primary",
    "secondary",
    "tertiary",
    "info",
    "success",
    "warning",
    "error",
    "dark",
    "light",
    "inverse"
  ]),
  modal: PropTypes13.bool,
  overlayStyle: PropTypes13.object
};
var defaultProps3 = {
  align: { vertical: "bottom", horizontal: "end" },
  size: "medium",
  rounded: "full",
  themeColor: "primary",
  positionMode: "fixed"
};
FloatingActionButton.displayName = "KendoFloatingActionButton";

export {
  Button,
  toolbarButtons,
  ButtonGroup,
  SplitButtonItem,
  SplitButton,
  DropDownButtonItem,
  DropDownButton,
  Toolbar,
  ToolbarItem,
  ToolbarSeparator,
  ToolbarSpacer,
  ChipList,
  Chip,
  FloatingActionButtonItem,
  FloatingActionButton
};
//# sourceMappingURL=chunk-FUIIQ4Y4.js.map
