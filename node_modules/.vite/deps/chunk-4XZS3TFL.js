import {
  FloatingLabel
} from "./chunk-4R6ABWJA.js";
import {
  Button,
  ButtonGroup
} from "./chunk-FUIIQ4Y4.js";
import {
  arrowsSwapIcon,
  calendarIcon,
  caretAltDownIcon,
  caretAltUpIcon,
  chevronLeftIcon,
  chevronRightIcon,
  clockIcon
} from "./chunk-RFS2H3W2.js";
import {
  provideIntlService,
  provideLocalizationService,
  registerForIntl,
  registerForLocalization
} from "./chunk-NQBGXZOD.js";
import {
  Popup
} from "./chunk-XVBPUVJV.js";
import {
  AsyncFocusBlur,
  IconWrap,
  Keys,
  canUseDOM,
  classNames,
  createPropsContext,
  guid,
  kendoThemeMaps,
  noop,
  setScrollbarWidth,
  validatePackage2 as validatePackage,
  withPropsContext
} from "./chunk-KTMNFILY.js";
import {
  require_prop_types
} from "./chunk-O6GWARG4.js";
import {
  require_react
} from "./chunk-ABDRZE5M.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/Calendar.js
var React11 = __toESM(require_react());
var PropTypes7 = __toESM(require_prop_types());

// node_modules/@progress/kendo-date-math/dist/es/clone-date.js
var cloneDate = function(date2) {
  return date2 ? new Date(date2.getTime()) : null;
};

// node_modules/@progress/kendo-date-math/dist/es/adjust-dst.js
var adjustDST = function(date2, hour) {
  var newDate = cloneDate(date2);
  if (hour === 0 && newDate.getHours() === 23) {
    newDate.setHours(newDate.getHours() + 2);
  }
  return newDate;
};

// node_modules/@progress/kendo-date-math/dist/es/add-days.js
var addDays = function(date2, offset2) {
  var newDate = cloneDate(date2);
  newDate.setDate(newDate.getDate() + offset2);
  return adjustDST(newDate, date2.getHours());
};

// node_modules/@progress/kendo-date-math/dist/es/create-date.js
var createDate = function(year, month, day, hours, minutes, seconds, milliseconds) {
  if (hours === void 0) {
    hours = 0;
  }
  if (minutes === void 0) {
    minutes = 0;
  }
  if (seconds === void 0) {
    seconds = 0;
  }
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  var date2 = new Date(year, month, day, hours, minutes, seconds, milliseconds);
  if (year > -1 && year < 100) {
    date2.setFullYear(date2.getFullYear() - 1900);
  }
  return adjustDST(date2, hours);
};

// node_modules/@progress/kendo-date-math/dist/es/last-day-of-month.js
var lastDayOfMonth = function(date2) {
  var newDate = createDate(date2.getFullYear(), date2.getMonth() + 1, 1, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
  return addDays(newDate, -1);
};

// node_modules/@progress/kendo-date-math/dist/es/add-months.js
var MONTHS_LENGTH = 12;
var normalize = function(date2, expectedMonth) {
  return date2.getMonth() !== expectedMonth ? lastDayOfMonth(addMonths(date2, -1)) : date2;
};
var addMonths = function(date2, offset2) {
  var newDate = cloneDate(date2);
  var diff = (newDate.getMonth() + offset2) % MONTHS_LENGTH;
  var expectedMonth = (MONTHS_LENGTH + diff) % MONTHS_LENGTH;
  newDate.setMonth(newDate.getMonth() + offset2);
  return normalize(adjustDST(newDate, date2.getHours()), expectedMonth);
};

// node_modules/@progress/kendo-date-math/dist/es/set-year.js
var setYear = function(value, year) {
  var month = value.getMonth();
  var candidate = createDate(year, month, value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());
  return candidate.getMonth() === month ? candidate : lastDayOfMonth(addMonths(candidate, -1));
};

// node_modules/@progress/kendo-date-math/dist/es/add-years.js
var addYears = function(value, offset2) {
  return adjustDST(setYear(value, value.getFullYear() + offset2), value.getHours());
};

// node_modules/@progress/kendo-date-math/dist/es/add-centuries.js
var addCenturies = function(value, offset2) {
  return addYears(value, 100 * offset2);
};

// node_modules/@progress/kendo-date-math/dist/es/add-decades.js
var addDecades = function(value, offset2) {
  return addYears(value, 10 * offset2);
};

// node_modules/@progress/kendo-date-math/dist/es/add-weeks.js
var addWeeks = function(date2, offset2) {
  return addDays(date2, offset2 * 7);
};

// node_modules/@progress/kendo-date-math/dist/es/constants.js
var MS_PER_MINUTE = 6e4;
var MS_PER_HOUR = 36e5;
var MS_PER_DAY = 864e5;

// node_modules/@progress/kendo-date-math/dist/es/direction.enum.js
var Direction;
(function(Direction4) {
  Direction4[Direction4["Forward"] = 1] = "Forward";
  Direction4[Direction4["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));

// node_modules/@progress/kendo-date-math/dist/es/day-of-week.js
var dayOfWeek = function(date2, weekDay, direction) {
  if (direction === void 0) {
    direction = Direction.Forward;
  }
  var newDate = cloneDate(date2);
  var newDay = (weekDay - newDate.getDay() + 7 * direction) % 7;
  newDate.setDate(newDate.getDate() + newDay);
  return adjustDST(newDate, date2.getHours());
};

// node_modules/@progress/kendo-date-math/dist/es/day.enum.js
var Day;
(function(Day2) {
  Day2[Day2["Sunday"] = 0] = "Sunday";
  Day2[Day2["Monday"] = 1] = "Monday";
  Day2[Day2["Tuesday"] = 2] = "Tuesday";
  Day2[Day2["Wednesday"] = 3] = "Wednesday";
  Day2[Day2["Thursday"] = 4] = "Thursday";
  Day2[Day2["Friday"] = 5] = "Friday";
  Day2[Day2["Saturday"] = 6] = "Saturday";
})(Day || (Day = {}));

// node_modules/@progress/kendo-date-math/dist/es/normalize-year.js
var normalizeYear = function(value, year) {
  return setYear(value, year(value.getFullYear()));
};

// node_modules/@progress/kendo-date-math/dist/es/first-decade-of-century.js
var firstDecadeOfCentury = function(value) {
  return normalizeYear(value, function(y) {
    return y - y % 100;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-centuries.js
var durationInCenturies = function(start2, end2) {
  return (firstDecadeOfCentury(end2).getFullYear() - firstDecadeOfCentury(start2).getFullYear()) / 100;
};

// node_modules/@progress/kendo-date-math/dist/es/first-year-of-decade.js
var firstYearOfDecade = function(value) {
  return normalizeYear(value, function(y) {
    return y - y % 10;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-decades.js
var durationInDecades = function(start2, end2) {
  return (firstYearOfDecade(end2).getFullYear() - firstYearOfDecade(start2).getFullYear()) / 10;
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-months.js
var durationInMonths = function(start2, end2) {
  return (end2.getFullYear() - start2.getFullYear()) * 12 + (end2.getMonth() - start2.getMonth());
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-years.js
var durationInYears = function(start2, end2) {
  return end2.getFullYear() - start2.getFullYear();
};

// node_modules/@progress/kendo-date-math/dist/es/first-day-of-month.js
var firstDayOfMonth = function(date2) {
  return createDate(date2.getFullYear(), date2.getMonth(), 1, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
};

// node_modules/@progress/kendo-date-math/dist/es/set-month.js
var setMonth = function(value, month) {
  var day = value.getDate();
  var candidate = createDate(value.getFullYear(), month, day, value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());
  return candidate.getDate() === day ? candidate : lastDayOfMonth(addMonths(candidate, -1));
};

// node_modules/@progress/kendo-date-math/dist/es/first-month-of-year.js
var firstMonthOfYear = function(value) {
  return setMonth(value, 0);
};

// node_modules/@progress/kendo-date-math/dist/es/get-date.js
var getDate = function(date2) {
  return createDate(date2.getFullYear(), date2.getMonth(), date2.getDate(), 0, 0, 0);
};

// node_modules/@progress/kendo-date-math/dist/es/is-equal.js
var isEqual = function(candidate, expected) {
  if (!candidate && !expected) {
    return true;
  }
  return candidate && expected && candidate.getTime() === expected.getTime();
};

// node_modules/@progress/kendo-date-math/dist/es/is-equal-date.js
var isEqualDate = function(candidate, expected) {
  if (!candidate && !expected) {
    return true;
  }
  return candidate && expected && isEqual(getDate(candidate), getDate(expected));
};

// node_modules/@progress/kendo-date-math/dist/es/last-decade-of-century.js
var lastDecadeOfCentury = function(value) {
  return normalizeYear(value, function(y) {
    return y - y % 100 + 90;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/last-month-of-year.js
var lastMonthOfYear = function(value) {
  return setMonth(value, 11);
};

// node_modules/@progress/kendo-date-math/dist/es/last-year-of-decade.js
var lastYearOfDecade = function(value) {
  return normalizeYear(value, function(y) {
    return y - y % 10 + 9;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/prev-day-of-week.js
var prevDayOfWeek = function(date2, weekDay) {
  return dayOfWeek(date2, weekDay, Direction.Backward);
};

// node_modules/@progress/kendo-date-math/dist/es/tz/timezones.js
var timezones = {
  rules: {},
  titles: {},
  zones: {}
};

// node_modules/@progress/kendo-date-math/dist/es/tz/rule-to-date.js
var MONTHS = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
var DAYS = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };
var MS_PER_MINUTE2 = 6e4;
var ruleToDate = function(year, rule, zoneOffset) {
  var month = rule[3];
  var on = rule[4];
  var time2 = rule[5];
  var date2;
  var ruleOffset = time2[3] === "u" ? -zoneOffset * MS_PER_MINUTE2 : 0;
  if (!isNaN(on)) {
    date2 = new Date(Date.UTC(year, MONTHS[month], on, time2[0], time2[1], time2[2]) + ruleOffset);
  } else if (on.indexOf("last") === 0) {
    date2 = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time2[0] - 24, time2[1], time2[2]) + ruleOffset);
    var targetDay = DAYS[on.substr(4, 3)];
    var ourDay = date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
  } else if (on.indexOf(">=") >= 0) {
    date2 = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time2[0], time2[1], time2[2], 0) + ruleOffset);
    var targetDay = DAYS[on.substr(0, 3)];
    var ourDay = date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
  }
  return date2;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/find-rule.js
var CURRENT_UTC_TIME = new Date().getTime();
var findRule = function(zoneRule, utcTime, zoneOffset) {
  if (utcTime === void 0) {
    utcTime = CURRENT_UTC_TIME;
  }
  if (zoneOffset === void 0) {
    zoneOffset = 0;
  }
  var rules = timezones.rules[zoneRule];
  if (!rules) {
    var time2 = zoneRule.split(":");
    var offset2 = 0;
    if (time2.length > 1) {
      offset2 = time2[0] * 60 + Number(time2[1]);
    }
    return [-1e6, "max", "-", "Jan", 1, [0, 0, 0], offset2, "-"];
  }
  var year = new Date(utcTime).getUTCFullYear();
  rules = rules.filter(function(currentRule) {
    var from = currentRule[0];
    var to = currentRule[1];
    return from <= year && (to >= year || from === year && to === "only" || to === "max");
  });
  rules.push(utcTime);
  rules.sort(function(a, b) {
    if (typeof a !== "number") {
      a = Number(ruleToDate(year, a, zoneOffset));
    }
    if (typeof b !== "number") {
      b = Number(ruleToDate(year, b, zoneOffset));
    }
    return a - b;
  });
  var rule = rules[rules.indexOf(utcTime) - 1] || rules[rules.length - 1];
  return isNaN(rule) ? rule : null;
};

// node_modules/@progress/kendo-date-math/dist/es/errors.js
var NO_TZ_INFO = "The required {0} timezone information is not provided!";
var formatRegExp = /\{(\d+)}?\}/g;
var flatten = function(arr) {
  return arr.reduce(function(a, b) {
    return a.concat(b);
  }, []);
};
var formatMessage = function(message) {
  var values = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    values[_i - 1] = arguments[_i];
  }
  var flattenValues = flatten(values);
  return message.replace(formatRegExp, function(_, index) {
    return flattenValues[parseInt(index, 10)];
  });
};

// node_modules/@progress/kendo-date-math/dist/es/tz/get-zone.js
var getZoneRules = function(timezone) {
  var zones = timezones.zones;
  if (!zones) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  var zoneRules = zones[timezone];
  var result = typeof zoneRules === "string" ? zones[zoneRules] : zoneRules;
  if (!result) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  return result;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/find-zone.js
var findZone = function(timezone, utcTime) {
  if (utcTime === void 0) {
    utcTime = new Date().getTime();
  }
  if (timezone === "Etc/UTC" || timezone === "Etc/GMT") {
    return [0, "-", "UTC", null];
  }
  var zoneRules = getZoneRules(timezone);
  var idx = zoneRules.length - 1;
  for (; idx >= 0; idx--) {
    var until = zoneRules[idx][3];
    if (until && utcTime > until) {
      break;
    }
  }
  var zone = zoneRules[idx + 1];
  if (!zone) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  return zone;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/zone-and-rule.js
var zoneAndRule = function(timezone, date2) {
  var utcTime = date2.getTime();
  var zone = findZone(timezone, utcTime);
  return {
    rule: findRule(zone[1], utcTime, zone[0]),
    zone
  };
};

// node_modules/@progress/kendo-date-math/dist/es/tz/abbr-timezone.js
var abbrTimezone = function(timezone, date2) {
  if (date2 === void 0) {
    date2 = new Date();
  }
  if (timezone === "Etc/UTC") {
    return "UTC";
  }
  if (timezone === "Etc/GMT") {
    return "GMT";
  }
  if (timezone === "") {
    return "";
  }
  var _a9 = zoneAndRule(timezone, date2), zone = _a9.zone, rule = _a9.rule;
  var base = zone[2];
  if (base.indexOf("/") >= 0) {
    return base.split("/")[rule && +rule[6] ? 1 : 0];
  } else if (base.indexOf("%s") >= 0) {
    return base.replace("%s", !rule || rule[7] === "-" ? "" : rule[7]);
  }
  return base;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/offset.js
var offset = function(timezone, date2) {
  if (date2 === void 0) {
    date2 = new Date();
  }
  if (timezone === "Etc/UTC" || timezone === "Etc/GMT") {
    return 0;
  }
  if (timezone === "") {
    return date2.getTimezoneOffset();
  }
  var _a9 = zoneAndRule(timezone, date2), rule = _a9.rule, zone = _a9.zone;
  return parseFloat(rule ? zone[0] - rule[6] : zone[0]);
};

// node_modules/@progress/kendo-date-math/dist/es/tz/to-local-date.js
function toLocalDate(date2) {
  return new Date(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds());
}

// node_modules/@progress/kendo-date-math/dist/es/tz/zoned-date.js
var addMinutes = function(date2, minutes) {
  return new Date(date2.getTime() + minutes * MS_PER_MINUTE);
};
var addHours = function(date2, hours) {
  return new Date(date2.getTime() + hours * MS_PER_HOUR);
};
var dayAbbr = [
  "Sun",
  "Mon",
  "Tue",
  "Wed",
  "Thu",
  "Fri",
  "Sat"
];
var monthAbbr = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dev"
];
var datePrefix = function(utcDate) {
  return dayAbbr[utcDate.getUTCDay()] + " " + monthAbbr[utcDate.getUTCMonth()];
};
var padNumber = function(num, len) {
  if (len === void 0) {
    len = 2;
  }
  var sign = num < 0 ? "-" : "";
  return sign + new Array(len).concat([Math.abs(num)]).join("0").slice(-len);
};
function isZoneMissingHour(date2, timezone) {
  var currentOffset = offset(timezone, date2);
  var prevHour = addHours(date2, -1);
  var prevOffset = offset(timezone, prevHour);
  return currentOffset < prevOffset;
}
function shiftZoneMissingHour(utcDate, timezone) {
  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;
  return addHours(utcDate, dstOffset);
}
function convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {
  if (fromTimezone === toTimezone) {
    return utcLocal;
  }
  var fromOffset = offset(fromTimezone, utcLocal);
  var toOffset = offset(toTimezone, utcLocal);
  var baseDiff = fromOffset - toOffset;
  var midDate = addMinutes(utcLocal, baseDiff);
  var midOffset = offset(toTimezone, midDate);
  var dstDiff = toOffset - midOffset;
  return addMinutes(utcLocal, baseDiff + dstDiff);
}
function formatOffset(tzOffset) {
  var sign = tzOffset <= 0 ? "+" : "-";
  var value = Math.abs(tzOffset);
  var hours = padNumber(Math.floor(value / 60));
  var minutes = padNumber(value % 60);
  return "GMT" + sign + hours + minutes;
}
var ZonedDate = (
  /** @class */
  function() {
    function ZonedDate2(utcDate, timezone) {
      this._utcDate = cloneDate(utcDate);
      this.timezone = timezone;
      var tzOffset = offset(timezone, utcDate);
      this.timezoneOffset = tzOffset;
      var localDate = shiftZoneMissingHour(utcDate, timezone);
      this._localDate = convertTimezoneUTC(localDate, timezone, "Etc/UTC");
    }
    Object.defineProperty(ZonedDate2.prototype, "cachedLocalDate", {
      /**
       * Returns a cached local date that denotes the exact time in the set timezone.
       *
       * @return Date - A local date that denotes the exact time in the set timezone.
       *
       * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.
       *
       * > Modifying the returned instance will corrupt the `ZonedDate` state.
       */
      get: function() {
        return this._localDate;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZonedDate2.prototype, "cachedUTCDate", {
      /**
       * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.
       *
       * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.
       *
       * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.
       *
       * > Modifying the returned instance will corrupt the `ZonedDate` state.
       */
      get: function() {
        return this._utcDate;
      },
      enumerable: true,
      configurable: true
    });
    ZonedDate2.fromLocalDate = function(date2, timezone) {
      if (timezone === void 0) {
        timezone = "";
      }
      var utcDate = convertTimezoneUTC(date2, "Etc/UTC", timezone);
      var shiftZone = isZoneMissingHour(utcDate, timezone);
      var zoneOffset = offset(timezone, utcDate);
      var fixedOffset = 0;
      if (shiftZone) {
        fixedOffset = zoneOffset > 0 ? -1 : 1;
      }
      var adjDate = addHours(utcDate, fixedOffset);
      return ZonedDate2.fromUTCDate(adjDate, timezone);
    };
    ZonedDate2.fromUTCDate = function(utcDate, timezone) {
      if (timezone === void 0) {
        timezone = "";
      }
      return new ZonedDate2(utcDate, timezone);
    };
    ZonedDate2.prototype.toLocalDate = function() {
      return cloneDate(this._localDate);
    };
    ZonedDate2.prototype.toUTCDate = function() {
      return cloneDate(this._utcDate);
    };
    ZonedDate2.prototype.toTimezone = function(toTimezone) {
      if (this.timezone === toTimezone) {
        return this.clone();
      }
      var tzOffset = offset(this.timezone, this._utcDate);
      var date2 = addMinutes(this._utcDate, tzOffset);
      return ZonedDate2.fromLocalDate(date2, toTimezone);
    };
    ZonedDate2.prototype.clone = function() {
      return ZonedDate2.fromUTCDate(this._utcDate, this.timezone);
    };
    ZonedDate2.prototype.addDays = function(days) {
      var newDate = new Date(this._utcDate.getTime());
      newDate.setUTCDate(newDate.getUTCDate() + days);
      return ZonedDate2.fromUTCDate(newDate, this.timezone);
    };
    ZonedDate2.prototype.addTime = function(milliseconds) {
      var utcDate = new Date(this._utcDate.getTime());
      var utcMid = shiftZoneMissingHour(utcDate, this.timezone);
      utcMid.setTime(utcMid.getTime() + milliseconds);
      var utcResult = shiftZoneMissingHour(utcMid, this.timezone);
      return ZonedDate2.fromUTCDate(utcResult, this.timezone);
    };
    ZonedDate2.prototype.stripTime = function() {
      var date2 = this._utcDate;
      var ticks = Date.UTC(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), 0, 0, 0);
      return ZonedDate2.fromUTCDate(new Date(ticks), this.timezone);
    };
    ZonedDate2.prototype.getTime = function() {
      return this._localDate.getTime();
    };
    ZonedDate2.prototype.getTimezoneOffset = function() {
      return this.timezoneOffset;
    };
    ZonedDate2.prototype.getFullYear = function() {
      return this._utcDate.getUTCFullYear();
    };
    ZonedDate2.prototype.getMonth = function() {
      return this._utcDate.getUTCMonth();
    };
    ZonedDate2.prototype.getDate = function() {
      return this._utcDate.getUTCDate();
    };
    ZonedDate2.prototype.getDay = function() {
      return this._utcDate.getUTCDay();
    };
    ZonedDate2.prototype.getHours = function() {
      return this._utcDate.getUTCHours();
    };
    ZonedDate2.prototype.getMinutes = function() {
      return this._utcDate.getUTCMinutes();
    };
    ZonedDate2.prototype.getSeconds = function() {
      return this._utcDate.getUTCSeconds();
    };
    ZonedDate2.prototype.getMilliseconds = function() {
      return this._utcDate.getUTCMilliseconds();
    };
    ZonedDate2.prototype.getUTCDate = function() {
      return this._localDate.getUTCDate();
    };
    ZonedDate2.prototype.getUTCDay = function() {
      return this._localDate.getUTCDay();
    };
    ZonedDate2.prototype.getUTCFullYear = function() {
      return this._localDate.getUTCFullYear();
    };
    ZonedDate2.prototype.getUTCHours = function() {
      return this._localDate.getUTCHours();
    };
    ZonedDate2.prototype.getUTCMilliseconds = function() {
      return this._localDate.getUTCMilliseconds();
    };
    ZonedDate2.prototype.getUTCMinutes = function() {
      return this._localDate.getUTCMinutes();
    };
    ZonedDate2.prototype.getUTCMonth = function() {
      return this._localDate.getUTCMonth();
    };
    ZonedDate2.prototype.getUTCSeconds = function() {
      return this._localDate.getUTCSeconds();
    };
    ZonedDate2.prototype.setTime = function(time2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMilliseconds = function(ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMilliseconds = function(ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setSeconds = function(sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCSeconds = function(sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMinutes = function(min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMinutes = function(min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setHours = function(hours, min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCHours = function(hours, min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setDate = function(date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCDate = function(date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMonth = function(month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMonth = function(month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setFullYear = function(year, month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCFullYear = function(year, month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.toISOString = function() {
      return this._localDate.toISOString();
    };
    ZonedDate2.prototype.toJSON = function() {
      return this._localDate.toJSON();
    };
    ZonedDate2.prototype.toString = function() {
      var dateString = datePrefix(this._utcDate);
      var timeString = this.toTimeString();
      return dateString + " " + this.getDate() + " " + this.getFullYear() + " " + timeString;
    };
    ZonedDate2.prototype.toDateString = function() {
      return toLocalDate(this._utcDate).toDateString();
    };
    ZonedDate2.prototype.toTimeString = function() {
      var hours = padNumber(this.getHours());
      var minutes = padNumber(this.getMinutes());
      var seconds = padNumber(this.getSeconds());
      var time2 = hours + ":" + minutes + ":" + seconds;
      var tzOffset = formatOffset(this.timezoneOffset);
      var abbrev = abbrTimezone(this.timezone, this._utcDate);
      if (abbrev) {
        abbrev = " (" + abbrev + ")";
      }
      return time2 + " " + tzOffset + abbrev;
    };
    ZonedDate2.prototype.toLocaleString = function(locales, options) {
      return this._localDate.toLocaleString(locales, options);
    };
    ZonedDate2.prototype.toLocaleDateString = function(locales, options) {
      return this._localDate.toLocaleDateString(locales, options);
    };
    ZonedDate2.prototype.toLocaleTimeString = function(locales, options) {
      return this._localDate.toLocaleTimeString(locales, options);
    };
    ZonedDate2.prototype.toUTCString = function() {
      return this.toTimezone("Etc/UTC").toString();
    };
    ZonedDate2.prototype[Symbol.toPrimitive] = function(hint) {
      if (hint === "string" || hint === "default") {
        return this.toString();
      }
      return this._localDate.getTime();
    };
    ZonedDate2.prototype.valueOf = function() {
      return this.getTime();
    };
    ZonedDate2.prototype.getVarDate = function() {
      throw new Error("Not implemented.");
    };
    ZonedDate2.prototype.format = function(_) {
      throw new Error("Not implemented.");
    };
    ZonedDate2.prototype.formatUTC = function(_) {
      throw new Error("Not implemented.");
    };
    return ZonedDate2;
  }()
);

// node_modules/@progress/kendo-date-math/dist/es/week-in-year.js
var moveDateToWeekStart = function(date2, weekStartDay) {
  if (weekStartDay !== Day.Monday) {
    return addDays(prevDayOfWeek(date2, weekStartDay), 4);
  }
  return addDays(date2, 4 - (date2.getDay() || 7));
};
var calcWeekInYear = function(date2, weekStartDay) {
  var firstWeekInYear = createDate(date2.getFullYear(), 0, 1, -6);
  var newDate = moveDateToWeekStart(date2, weekStartDay);
  var diffInMS = newDate.getTime() - firstWeekInYear.getTime();
  var days = Math.floor(diffInMS / MS_PER_DAY);
  return 1 + Math.floor(days / 7);
};
var weekInYear = function(date2, weekStartDay) {
  if (weekStartDay === void 0) {
    weekStartDay = Day.Monday;
  }
  date2 = getDate(date2);
  var prevWeekDate = addDays(date2, -7);
  var nextWeekDate = addDays(date2, 7);
  var weekNumber = calcWeekInYear(date2, weekStartDay);
  if (weekNumber === 0) {
    return calcWeekInYear(prevWeekDate, weekStartDay) + 1;
  }
  if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {
    return 1;
  }
  return weekNumber;
};

// node_modules/@progress/kendo-react-dateinputs/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-dateinputs",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1680171694,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/ViewList.js
var React8 = __toESM(require_react());
var PropTypes5 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/virtualization/Virtualization.js
var React = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/virtualization/services/RowHeightService.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var update = function(arr, idx, value) {
  return __spreadArray(__spreadArray([], arr.slice(0, idx + 1), true), arr.slice(idx + 1).map(function(x) {
    return x + value;
  }), true);
};
var RowHeightService = (
  /** @class */
  function() {
    function RowHeightService2(total, rowHeight, detailRowHeight) {
      if (total === void 0) {
        total = 0;
      }
      this.total = total;
      this.rowHeight = rowHeight;
      this.detailRowHeight = detailRowHeight;
      this.offsets = [];
      this.heights = [];
      var agg = 0;
      for (var idx = 0; idx < total; idx++) {
        this.offsets.push(agg);
        agg += rowHeight;
        this.heights.push(rowHeight);
      }
    }
    RowHeightService2.prototype.height = function(rowIndex) {
      return this.heights[rowIndex];
    };
    RowHeightService2.prototype.expandDetail = function(rowIndex) {
      if (this.height(rowIndex) === this.rowHeight) {
        this.updateRowHeight(rowIndex, this.detailRowHeight);
      }
    };
    RowHeightService2.prototype.collapseDetail = function(rowIndex) {
      if (this.height(rowIndex) > this.rowHeight) {
        this.updateRowHeight(rowIndex, this.detailRowHeight * -1);
      }
    };
    RowHeightService2.prototype.index = function(position) {
      for (var i = 0; i < this.offsets.length; i++) {
        if (position === this.offsets[i]) {
          return i;
        }
        if (position < this.offsets[i]) {
          return i - 1;
        }
      }
      return this.total - 1;
    };
    RowHeightService2.prototype.offset = function(rowIndex) {
      return this.offsets[rowIndex];
    };
    RowHeightService2.prototype.totalHeight = function() {
      return this.heights.reduce(function(prev, curr) {
        return prev + curr;
      }, 0);
    };
    RowHeightService2.prototype.updateRowHeight = function(rowIndex, value) {
      this.heights[rowIndex] += value;
      this.offsets = update(this.offsets, rowIndex, value);
    };
    return RowHeightService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/virtualization/services/ScrollerService.js
var normalize2 = function(x) {
  return Math.max(x, 0);
};
var ScrollAction = (
  /** @class */
  function() {
    function ScrollAction2(offset2) {
      this.offset = offset2;
    }
    return ScrollAction2;
  }()
);
var PageAction = (
  /** @class */
  function() {
    function PageAction2(skip) {
      this.skip = skip;
    }
    return PageAction2;
  }()
);
var ScrollerService = (
  /** @class */
  function() {
    function ScrollerService2(onScrollAction, onPageAction) {
      this.onScrollAction = onScrollAction;
      this.onPageAction = onPageAction;
      this.direction = "vertical";
      this.firstLoaded = 0;
      this.lastLoaded = 0;
      this.lastScrollTop = 0;
      this.take = 0;
      this.total = 0;
      this.rowHeightService = null;
      this.bottomOffset = 0;
      this.topOffset = 0;
    }
    ScrollerService2.prototype.create = function(rowHeightService, skip, take, total, topOffset, bottomOffset, direction) {
      if (topOffset === void 0) {
        topOffset = 0;
      }
      if (bottomOffset === void 0) {
        bottomOffset = 0;
      }
      if (direction === void 0) {
        direction = "vertical";
      }
      this.rowHeightService = rowHeightService;
      this.firstLoaded = skip;
      this.lastLoaded = skip + take;
      this.take = take;
      this.total = total;
      this.lastScrollTop = 0;
      this.topOffset = topOffset;
      this.bottomOffset = bottomOffset;
      this.direction = direction;
      var offsetBufferRows = this.rowsForHeight(topOffset);
      var skipWithOffset = normalize2(skip - offsetBufferRows);
      this.onScrollAction(new ScrollAction(this.rowOffset(skipWithOffset)));
      this.onPageAction(new PageAction(skipWithOffset));
    };
    ScrollerService2.prototype.onScroll = function(_a9) {
      var scrollLeft = _a9.scrollLeft, scrollTop = _a9.scrollTop, offsetHeight = _a9.offsetHeight, offsetWidth = _a9.offsetWidth;
      var scrollPosition = this.direction === "vertical" ? scrollTop : scrollLeft;
      var offsetSize = this.direction === "vertical" ? offsetHeight : offsetWidth;
      if (this.lastScrollTop === scrollPosition || !this.rowHeightService) {
        return;
      }
      var up = this.lastScrollTop >= scrollPosition;
      this.lastScrollTop = scrollPosition;
      var firstItemIndex = this.rowHeightService.index(normalize2(scrollPosition - this.topOffset));
      var lastItemIndex = this.rowHeightService.index(normalize2(scrollPosition + offsetSize - this.bottomOffset));
      if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
        this.firstLoaded = firstItemIndex;
        this.onScrollAction(new ScrollAction(this.rowOffset(firstItemIndex)));
        this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
        this.onPageAction(new PageAction(this.firstLoaded));
      }
      if (up && firstItemIndex <= this.firstLoaded) {
        var nonVisibleBuffer = Math.floor(this.take * 0.3);
        this.firstLoaded = normalize2(firstItemIndex - nonVisibleBuffer);
        this.onScrollAction(new ScrollAction(this.rowOffset(this.firstLoaded)));
        this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
        this.onPageAction(new PageAction(this.firstLoaded));
      }
    };
    ScrollerService2.prototype.rowOffset = function(index) {
      return this.rowHeightService ? this.rowHeightService.offset(index) + this.topOffset : 0;
    };
    ScrollerService2.prototype.rowsForHeight = function(height) {
      return this.rowHeightService ? Math.ceil(height / this.rowHeightService.height(0)) : 0;
    };
    return ScrollerService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/virtualization/Virtualization.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var _a;
var _b;
var _c;
var ScrollDirection;
(function(ScrollDirection2) {
  ScrollDirection2[ScrollDirection2["Backward"] = 0] = "Backward";
  ScrollDirection2[ScrollDirection2["Forward"] = 1] = "Forward";
})(ScrollDirection || (ScrollDirection = {}));
var differenceToScroll = function(scrollTop, staticOffset, maxScrollDifference) {
  return Math.min(Math.abs(staticOffset - scrollTop), maxScrollDifference);
};
var FRAME_DURATION = 17;
var scrollModifiers = (_a = {}, _a[ScrollDirection.Forward] = function(step) {
  return function(value) {
    return value + step;
  };
}, _a[ScrollDirection.Backward] = function(step) {
  return function(value) {
    return value - step;
  };
}, _a);
var scrollNormalizers = (_b = {}, _b[ScrollDirection.Forward] = function(end2) {
  return function(value) {
    return Math.min(value, end2);
  };
}, _b[ScrollDirection.Backward] = function(end2) {
  return function(value) {
    return Math.max(value, end2);
  };
}, _b);
var scrollValidators = (_c = {}, _c[ScrollDirection.Forward] = function(end2) {
  return function(start2) {
    return start2 < end2;
  };
}, _c[ScrollDirection.Backward] = function(end2) {
  return function(start2) {
    return start2 > end2;
  };
}, _c);
var Virtualization = (
  /** @class */
  function(_super) {
    __extends(Virtualization2, _super);
    function Virtualization2(props) {
      var _this = _super.call(this, props) || this;
      _this.rowHeightService = null;
      _this.scrollContainer = null;
      _this.lastDirection = null;
      _this.lastTotal = 0;
      _this.lastTake = 0;
      _this.animationInProgress = false;
      _this.scrollToIndexTimeout = 0;
      _this.scrollTo = function(value) {
        var scrollProperty = _this.direction === "vertical" ? "scrollTop" : "scrollLeft";
        if (!_this.scrollContainer) {
          return;
        }
        _this.scrollContainer[scrollProperty] = value;
      };
      _this.scrollToIndex = function(index) {
        if (_this.scrollToIndexTimeout !== void 0) {
          window.cancelAnimationFrame(_this.scrollToIndexTimeout);
        }
        if (!_this.rowHeightService) {
          return;
        }
        _this.scrollToIndexTimeout = window.requestAnimationFrame(function() {
          _this.animationInProgress = false;
          if (_this.rowHeightService) {
            _this.scrollTo(_this.rowHeightService.offset(index));
          }
        });
      };
      _this.animateToIndex = function(index) {
        if (!_this.rowHeightService || !window) {
          return;
        }
        window.cancelAnimationFrame(_this.cancelAnimation);
        var indexOffset = _this.rowHeightService.offset(index);
        var direction = _this.getContainerScrollDirection(indexOffset);
        var _a9 = _this.scrollRange(indexOffset, direction), start2 = _a9.start, end2 = _a9.end;
        if (start2 === end2) {
          return;
        }
        var step = _this.scrollStep(start2, end2);
        var modifyScroll = scrollModifiers[direction](step);
        var normalizeScroll = scrollNormalizers[direction](end2);
        var isScrollValid = scrollValidators[direction](modifyScroll(end2));
        var animate = function(progress) {
          _this.animationInProgress = true;
          var next = modifyScroll(progress);
          _this.scrollTo(normalizeScroll(next));
          isScrollValid(next) ? _this.cancelAnimation = window.requestAnimationFrame(function() {
            animate(next);
          }) : _this.animationInProgress = false;
        };
        _this.cancelAnimation = window.requestAnimationFrame(function() {
          animate(start2);
        });
      };
      _this.scrollToBottom = function() {
        if (!_this.rowHeightService) {
          return;
        }
        _this.scrollTo(_this.rowHeightService.totalHeight() + _this.props.bottomOffset);
      };
      _this.scrollStep = function(start2, end2) {
        var duration = _this.props.scrollDuration || Virtualization2.defaultProps.scrollDuration;
        return Math.abs(end2 - start2) / (duration / FRAME_DURATION);
      };
      _this.scrollRange = function(indexOffset, direction) {
        var containerScroll = _this.containerScrollPosition;
        if (parseInt("".concat(indexOffset), 10) === parseInt("".concat(containerScroll), 10)) {
          return { start: indexOffset, end: indexOffset };
        }
        var maxScroll = _this.containerMaxScroll();
        var sign = direction === ScrollDirection.Backward ? 1 : -1;
        var difference = differenceToScroll(containerScroll, indexOffset, _this.props.maxScrollDifference || 0);
        var end2 = Math.min(indexOffset, maxScroll);
        var start2 = Math.min(Math.max(end2 + sign * difference, 0), maxScroll);
        return { start: start2, end: end2 };
      };
      _this.containerMaxScroll = function() {
        return _this.containerScrollSize - _this.containerOffsetSize;
      };
      _this.getContainerScrollDirection = function(indexOffset) {
        return indexOffset < _this.containerScrollPosition ? ScrollDirection.Backward : ScrollDirection.Forward;
      };
      _this.initServices = function(props2) {
        if (props2 === void 0) {
          props2 = _this.props;
        }
        var dimension = _this.direction === "vertical" ? props2.itemHeight : props2.itemWidth;
        if (dimension === void 0) {
          return;
        }
        _this.rowHeightService = new RowHeightService(props2.total, dimension, 0);
        _this.scrollerService.create(_this.rowHeightService, props2.skip, props2.take, props2.total, props2.topOffset, _this.scrollOffsetSize, _this.direction);
      };
      _this.getContainerProperty = function(propertyName) {
        if (!_this.scrollContainer) {
          return 0;
        }
        return _this.scrollContainer[propertyName];
      };
      _this.handleScroll = function(event) {
        if (!_this.scrollContainer || !_this.rowHeightService) {
          return;
        }
        var target = event.target;
        _this.scrollerService.onScroll({
          scrollLeft: target.scrollLeft,
          scrollTop: target.scrollTop,
          offsetHeight: target.offsetHeight,
          offsetWidth: target.offsetWidth
        });
        var index = _this.rowHeightService.index(_this.containerScrollPosition - _this.props.topOffset);
        var onScrollAction = _this.props.onScrollAction;
        var args = {
          index,
          target,
          scrollAction: _this.scrollAction,
          pageAction: _this.pageAction,
          animationInProgress: _this.animationInProgress
        };
        if (_this.props.onScroll) {
          _this.props.onScroll.call(void 0, event);
        }
        if (onScrollAction) {
          onScrollAction.call(void 0, args);
        }
        _this.scrollAction = void 0;
        _this.pageAction = void 0;
      };
      _this.handleScrollAction = function(action) {
        _this.scrollAction = action;
      };
      _this.handlePageAction = function(action) {
        _this.pageAction = action;
      };
      _this.scrollerService = new ScrollerService(_this.handleScrollAction, _this.handlePageAction);
      return _this;
    }
    Object.defineProperty(Virtualization2.prototype, "element", {
      get: function() {
        return this.scrollContainer;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Virtualization2.prototype, "containerOffsetSize", {
      get: function() {
        return this.getContainerProperty(this.direction === "vertical" ? "offsetHeight" : "offsetWidth");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Virtualization2.prototype, "containerScrollSize", {
      get: function() {
        return this.getContainerProperty(this.direction === "vertical" ? "scrollHeight" : "scrollWidth");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Virtualization2.prototype, "containerScrollPosition", {
      get: function() {
        return this.getContainerProperty(this.direction === "vertical" ? "scrollTop" : "scrollLeft");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Virtualization2.prototype, "direction", {
      get: function() {
        return this.props.direction !== void 0 ? this.props.direction : Virtualization2.defaultProps.direction;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Virtualization2.prototype, "scrollOffsetSize", {
      get: function() {
        return this.props.scrollOffsetSize !== void 0 ? this.props.scrollOffsetSize : Virtualization2.defaultProps.scrollOffsetSize;
      },
      enumerable: false,
      configurable: true
    });
    Virtualization2.prototype.activeIndex = function() {
      return this.itemIndex(Math.ceil(this.containerScrollPosition));
    };
    Virtualization2.prototype.itemIndex = function(offset2) {
      if (!this.rowHeightService) {
        return 0;
      }
      return this.rowHeightService.index(offset2);
    };
    Virtualization2.prototype.itemOffset = function(index) {
      if (!this.rowHeightService) {
        return 0;
      }
      return this.rowHeightService.offset(index);
    };
    Virtualization2.prototype.isIndexVisible = function(index) {
      if (!this.rowHeightService) {
        return false;
      }
      var containerTop = this.containerScrollPosition;
      var containerBottom = containerTop + this.containerOffsetSize;
      var top = this.rowHeightService.offset(index);
      var bottom = top + this.rowHeightService.height(index);
      return top >= containerTop && bottom <= containerBottom;
    };
    Virtualization2.prototype.isListScrolled = function(index) {
      if (!this.rowHeightService) {
        return false;
      }
      return this.containerScrollPosition !== this.rowHeightService.offset(index);
    };
    Virtualization2.prototype.componentDidMount = function() {
      var onMount = this.props.onMount;
      if (onMount) {
        onMount.call(void 0, this);
      }
    };
    Virtualization2.prototype.render = function() {
      var _this = this;
      if (this.lastTotal !== this.props.total || this.lastDirection !== this.direction || this.lastTake !== this.props.take) {
        this.initServices();
        this.lastTotal = this.props.total;
        this.lastDirection = this.direction;
        this.lastTake = this.props.take;
      }
      var vertexLength = "".concat((this.rowHeightService ? this.rowHeightService.totalHeight() : 0) + this.props.bottomOffset);
      var placeholderStyle = this.direction === "vertical" ? { height: "".concat(vertexLength, "px") } : { width: "".concat(vertexLength, "px") };
      var rootClassNames = classNames("k-content k-calendar-content k-scrollable", {
        "k-scrollable-horizontal": this.direction === "horizontal"
      }, this.props.className);
      var scrollableClassNames = classNames("k-scrollable-placeholder", {
        "k-scrollable-horizontal-placeholder": this.direction === "horizontal"
      });
      return React.createElement(
        "div",
        { ref: function(el) {
          _this.scrollContainer = el;
        }, onScroll: this.handleScroll, className: rootClassNames, tabIndex: this.props.tabIndex, role: this.props.role },
        this.props.children,
        React.createElement("div", { style: placeholderStyle, className: scrollableClassNames })
      );
    };
    Virtualization2.propTypes = {
      bottomOffset: PropTypes.number.isRequired,
      className: PropTypes.string,
      direction: PropTypes.oneOf(["horizontal", "vertical"]),
      forceScroll: PropTypes.bool,
      itemHeight: PropTypes.number,
      itemWidth: PropTypes.number,
      maxScrollDifference: PropTypes.number,
      onScroll: PropTypes.func,
      onScrollAction: PropTypes.func,
      scrollDuration: PropTypes.number,
      scrollOffsetSize: PropTypes.number,
      skip: PropTypes.number.isRequired,
      tabIndex: PropTypes.number,
      take: PropTypes.number.isRequired,
      topOffset: PropTypes.number.isRequired,
      total: PropTypes.number.isRequired,
      role: PropTypes.string
    };
    Virtualization2.defaultProps = {
      direction: "vertical",
      forceScroll: false,
      scrollOffsetSize: 0,
      maxScrollDifference: 100,
      scrollDuration: 100
    };
    return Virtualization2;
  }(React.Component)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/View.js
var React4 = __toESM(require_react());
var PropTypes2 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/CalendarCell.js
var React2 = __toESM(require_react());
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var compareProps = function(x, y) {
  var xProps = Object.getOwnPropertyNames(x);
  var yProps = Object.getOwnPropertyNames(y);
  if (xProps.length !== yProps.length) {
    return false;
  }
  for (var i = 0; i < xProps.length; i++) {
    var propName = xProps[i];
    if (x[propName] !== y[propName]) {
      return false;
    }
  }
  return true;
};
var CalendarCell = (
  /** @class */
  function(_super) {
    __extends2(CalendarCell2, _super);
    function CalendarCell2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.handleClick = function(event) {
        var _a9 = _this.props, onClick = _a9.onClick, value = _a9.value;
        if (onClick) {
          onClick.call(void 0, value, event);
        }
      };
      _this.handleMouseEnter = function() {
        var _a9 = _this.props, onMouseEnter = _a9.onMouseEnter, value = _a9.value;
        if (onMouseEnter) {
          onMouseEnter.call(void 0, value);
        }
      };
      _this.handleMouseLeave = function() {
        var _a9 = _this.props, onMouseLeave = _a9.onMouseLeave, value = _a9.value;
        if (onMouseLeave) {
          onMouseLeave.call(void 0, value);
        }
      };
      return _this;
    }
    CalendarCell2.prototype.shouldComponentUpdate = function(nextProps) {
      var _a9 = this.props, value = _a9.value, props = __rest(_a9, ["value"]);
      var newValue = nextProps.value, newProps = __rest(nextProps, ["value"]);
      var valueEqual = !(value && newValue) || value.getTime() === newValue.getTime();
      return !(valueEqual && compareProps(props, newProps));
    };
    CalendarCell2.prototype.render = function() {
      var _a9 = this.props, className = _a9.className, formattedValue = _a9.formattedValue, isWeekend = _a9.isWeekend, isFocused = _a9.isFocused, isInRange4 = _a9.isInRange, isSelected = _a9.isSelected, isRangeStart = _a9.isRangeStart, isRangeMid = _a9.isRangeMid, isRangeEnd = _a9.isRangeEnd, isRangeSplitStart = _a9.isRangeSplitStart, isRangeSplitEnd = _a9.isRangeSplitEnd, isToday = _a9.isToday, isDisabled = _a9.isDisabled, view = _a9.view, value = _a9.value, other = __rest(_a9, ["className", "formattedValue", "isWeekend", "isFocused", "isInRange", "isSelected", "isRangeStart", "isRangeMid", "isRangeEnd", "isRangeSplitStart", "isRangeSplitEnd", "isToday", "isDisabled", "view", "value"]);
      var isEndActive = this.props.activeRangeEnd === "end" && isRangeEnd;
      var isStartActive = this.props.activeRangeEnd === "start" && isRangeStart;
      var rootClassName = classNames("k-calendar-td", {
        "k-range-end": isRangeEnd,
        "k-range-mid": isRangeMid,
        "k-range-split-end": isRangeSplitEnd,
        "k-range-split-start": isRangeSplitStart,
        "k-range-start": isRangeStart,
        "k-active": isStartActive || isEndActive,
        "k-state-pending-focus": isFocused,
        "k-selected": isSelected || isRangeStart || isRangeEnd,
        "k-today": isToday,
        "k-weekend": isWeekend,
        "k-disabled": isDisabled
      }, className);
      return React2.createElement(
        "td",
        __assign({}, other, { className: rootClassName, onClick: this.handleClick, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave }),
        React2.createElement("span", { className: "k-link" }, this.props.children)
      );
    };
    return CalendarCell2;
  }(React2.Component)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/CalendarWeekCell.js
var React3 = __toESM(require_react());
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var CalendarWeekCell = (
  /** @class */
  function(_super) {
    __extends3(CalendarWeekCell2, _super);
    function CalendarWeekCell2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarWeekCell2.prototype.render = function() {
      var _a9 = this.props, className = _a9.className, firstDate = _a9.firstDate, other = __rest2(_a9, ["className", "firstDate"]);
      return React3.createElement("td", __assign2({ className: classNames("k-calendar-td", className) }, other), this.props.children);
    };
    return CalendarWeekCell2;
  }(React3.Component)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/models/NavigationAction.js
var Action;
(function(Action2) {
  Action2[Action2["Left"] = 0] = "Left";
  Action2[Action2["Right"] = 1] = "Right";
  Action2[Action2["Up"] = 2] = "Up";
  Action2[Action2["Down"] = 3] = "Down";
  Action2[Action2["PrevView"] = 4] = "PrevView";
  Action2[Action2["NextView"] = 5] = "NextView";
  Action2[Action2["FirstInView"] = 6] = "FirstInView";
  Action2[Action2["LastInView"] = 7] = "LastInView";
  Action2[Action2["LowerView"] = 8] = "LowerView";
  Action2[Action2["UpperView"] = 9] = "UpperView";
})(Action || (Action = {}));

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/models/CalendarViewEnum.js
var CalendarViewEnum;
(function(CalendarViewEnum2) {
  CalendarViewEnum2[CalendarViewEnum2["month"] = 0] = "month";
  CalendarViewEnum2[CalendarViewEnum2["year"] = 1] = "year";
  CalendarViewEnum2[CalendarViewEnum2["decade"] = 2] = "decade";
  CalendarViewEnum2[CalendarViewEnum2["century"] = 3] = "century";
})(CalendarViewEnum || (CalendarViewEnum = {}));

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/models/SelectionRange.js
var EMPTY_SELECTIONRANGE = { start: null, end: null };

// node_modules/@progress/kendo-react-dateinputs/dist/es/utils.js
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function nullable(subRequirement) {
  var check = function(required, props, key) {
    var rest = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      rest[_i - 3] = arguments[_i];
    }
    if (props[key] === null) {
      return null;
    }
    var sub = required ? subRequirement.isRequired : subRequirement;
    return sub.apply(void 0, __spreadArray2([props, key], rest, false));
  };
  var fn = check.bind(null, false);
  fn.isRequired = check.bind(null, true);
  return fn;
}
var viewInRange = function(candidate, min, max) {
  if (min === void 0 || max === void 0) {
    return candidate;
  }
  return min <= candidate && candidate <= max ? candidate : candidate < min ? min : max;
};
var MIDNIGHT_DATE = new Date(1980, 0, 1);
var MIN_DATE = new Date(1900, 0, 1);
var MAX_DATE = new Date(2099, 11, 31);
var MIN_TIME = new Date(1980, 0, 1);
var MAX_TIME = new Date(1980, 0, 1, 23, 59, 59);
var setTime = function(origin, candidate) {
  var date2 = cloneDate(origin);
  date2.setHours(candidate.getHours(), candidate.getMinutes(), candidate.getSeconds(), candidate.getMilliseconds());
  return date2;
};
var getToday = function() {
  return getDate(new Date());
};
var isInRange = function(candidate, min, max) {
  return !candidate || !(min && min > candidate || max && max < candidate);
};
var isInDateRange = function(candidate, min, max) {
  return candidate === null || !(min && getDate(min) > getDate(candidate) || max && getDate(max) < getDate(candidate));
};
var isInSelectionRange = function(value, selectionRange) {
  var _a9 = selectionRange || EMPTY_SELECTIONRANGE, start2 = _a9.start, end2 = _a9.end;
  if (!start2 || !end2) {
    return false;
  }
  return start2 < value && value < end2;
};
var range = function(start2, end2, step) {
  if (step === void 0) {
    step = 1;
  }
  var result = [];
  for (var i = start2; i < end2; i = i + step) {
    result.push(i);
  }
  return result;
};
var intersects = function(date2, min, max) {
  return min.getTime() <= date2.getTime() && date2.getTime() <= max.getTime();
};
var shiftWeekNames = function(names, offset2) {
  return names.slice(offset2).concat(names.slice(0, offset2));
};
var dateInRange = function(candidate, min, max) {
  if (!candidate) {
    return candidate;
  }
  if (min && candidate < min) {
    return cloneDate(min);
  }
  if (max && candidate > max) {
    return cloneDate(max);
  }
  return candidate;
};
var domContainerFactory = function(type) {
  return function(children, classes, styles) {
    if (classes === void 0) {
      classes = "";
    }
    if (styles === void 0) {
      styles = {};
    }
    var container = document.createElement(type);
    container.className = classes;
    Object.keys(styles).map(function(key) {
      return container.style[key] = styles[key];
    });
    if (typeof children === "string") {
      container.innerHTML = children || "";
    } else {
      (children || []).forEach(function(child) {
        return child && container.appendChild(child);
      });
    }
    return container;
  };
};
function debounce(func10, wait, options) {
  if (options === void 0) {
    options = {};
  }
  var lastArgs;
  var lastThis;
  var maxWait = options.maxWait;
  var result;
  var timerId;
  var lastCallTime;
  var root = window;
  var lastInvokeTime = 0;
  var leading = false;
  var maxing = false;
  var trailing = true;
  var useRAF = !wait && wait !== 0 && typeof root.requestAnimationFrame === "function";
  if (typeof func10 !== "function") {
    throw new TypeError("Expected a function");
  }
  wait = +wait || 0;
  function invokeFunc(time2) {
    var args = lastArgs;
    var thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time2;
    result = func10.apply(thisArg, args);
    return result;
  }
  function startTimer(pendingFunc, tmr) {
    if (useRAF) {
      root.cancelAnimationFrame(timerId);
      return root.requestAnimationFrame(pendingFunc);
    }
    return setTimeout(pendingFunc, tmr);
  }
  function cancelTimer(id) {
    if (useRAF) {
      return root.cancelAnimationFrame(id);
    }
    clearTimeout(id);
  }
  function leadingEdge(time2) {
    lastInvokeTime = time2;
    timerId = startTimer(timerExpired, wait);
    return leading ? invokeFunc(time2) : result;
  }
  function remainingWait(time2) {
    var timeSinceLastCall = time2 - lastCallTime;
    var timeSinceLastInvoke = time2 - lastInvokeTime;
    var timeWaiting = wait - timeSinceLastCall;
    return maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time2) {
    var timeSinceLastCall = time2 - lastCallTime;
    var timeSinceLastInvoke = time2 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time2 = Date.now();
    if (shouldInvoke(time2)) {
      return trailingEdge(time2);
    }
    timerId = startTimer(timerExpired, remainingWait(time2));
  }
  function trailingEdge(time2) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time2);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      cancelTimer(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(Date.now());
  }
  function pending() {
    return timerId !== void 0;
  }
  function debounced() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var time2 = Date.now();
    var isInvoking = shouldInvoke(time2);
    lastArgs = args;
    lastThis = this;
    lastCallTime = time2;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        timerId = startTimer(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = startTimer(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  debounced.pending = pending;
  return debounced;
}

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/CenturyViewService.js
var _a2;
var EMPTY_DATA = [[]];
var CELLS_LENGTH = 4;
var ROWS_LENGTH = 3;
var ACTIONS = (_a2 = {}, _a2[Action.Left] = function(date2) {
  return addDecades(date2, -1);
}, _a2[Action.Up] = function(date2) {
  return addDecades(date2, -5);
}, _a2[Action.Right] = function(date2) {
  return addDecades(date2, 1);
}, _a2[Action.Down] = function(date2) {
  return addDecades(date2, 5);
}, _a2[Action.PrevView] = function(date2) {
  return addCenturies(date2, -1);
}, _a2[Action.NextView] = function(date2) {
  return addCenturies(date2, 1);
}, _a2[Action.FirstInView] = function(date2) {
  return firstDecadeOfCentury(date2);
}, _a2[Action.LastInView] = function(date2) {
  return lastDecadeOfCentury(date2);
}, _a2);
var CenturyViewService = (
  /** @class */
  function() {
    function CenturyViewService2() {
    }
    CenturyViewService2.prototype.addToDate = function(min, skip) {
      return addCenturies(min, skip);
    };
    CenturyViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addCenturies(start2, i);
      });
    };
    CenturyViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA;
      }
      var cells = range(0, CELLS_LENGTH);
      var firstDate = firstDecadeOfCentury(viewDate);
      var lastDate = lastDecadeOfCentury(viewDate);
      var today2 = getToday();
      return range(0, ROWS_LENGTH).map(function(rowOffset) {
        var baseDate = addDecades(firstDate, rowOffset * CELLS_LENGTH);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addDecades(baseDate, cellOffset), min, max);
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return intersects(cellDate, firstDate, lastDate) ? {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate),
            isSelected,
            isWeekend: false,
            isInRange: isInRange(cellDate, min, max),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          } : null;
        });
      });
    };
    CenturyViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    CenturyViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return firstYearOfDecade(candidate).getFullYear() === firstYearOfDecade(expected).getFullYear();
    };
    CenturyViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 99;
    };
    CenturyViewService2.prototype.isInRange = function(candidate, min, max) {
      var year = firstYearOfDecade(candidate).getFullYear();
      var aboveMin = !min || firstYearOfDecade(min).getFullYear() <= year;
      var belowMax = !max || year <= firstYearOfDecade(max).getFullYear();
      return aboveMin && belowMax;
    };
    CenturyViewService2.prototype.isInSameView = function(candidate, value) {
      return durationInCenturies(candidate, value) === 0;
    };
    CenturyViewService2.prototype.isRangeStart = function(value) {
      return value.getFullYear() % 1e3 === 0;
    };
    CenturyViewService2.prototype.move = function(value, action) {
      var modifier = ACTIONS[action];
      if (!modifier) {
        return value;
      }
      return modifier(value);
    };
    CenturyViewService2.prototype.cellTitle = function(value) {
      return firstYearOfDecade(value).getFullYear().toString();
    };
    CenturyViewService2.prototype.navigationTitle = function(value) {
      return value ? firstDecadeOfCentury(value).getFullYear().toString() : "";
    };
    CenturyViewService2.prototype.title = function(value) {
      if (!value) {
        return "";
      }
      return "".concat(firstDecadeOfCentury(value).getFullYear(), " - ").concat(lastDecadeOfCentury(value).getFullYear());
    };
    CenturyViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH;
    };
    CenturyViewService2.prototype.skip = function(value, min) {
      return durationInCenturies(min, value);
    };
    CenturyViewService2.prototype.total = function(min, max) {
      return durationInCenturies(min, max) + 1;
    };
    CenturyViewService2.prototype.value = function(current) {
      return current ? firstYearOfDecade(current).getFullYear().toString() : "";
    };
    CenturyViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInCenturies(date2, max) < border;
      return renderTwoViews ? addCenturies(date2, -1) : date2;
    };
    CenturyViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate(max);
      }
      return cellDate;
    };
    return CenturyViewService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/DecadeViewService.js
var _a3;
var EMPTY_DATA2 = [[]];
var CELLS_LENGTH2 = 4;
var ROWS_LENGTH2 = 3;
var ACTIONS2 = (_a3 = {}, _a3[Action.Left] = function(date2) {
  return addYears(date2, -1);
}, _a3[Action.Up] = function(date2) {
  return addYears(date2, -5);
}, _a3[Action.Right] = function(date2) {
  return addYears(date2, 1);
}, _a3[Action.Down] = function(date2) {
  return addYears(date2, 5);
}, _a3[Action.PrevView] = function(date2) {
  return addDecades(date2, -1);
}, _a3[Action.NextView] = function(date2) {
  return addDecades(date2, 1);
}, _a3[Action.FirstInView] = function(date2) {
  return firstYearOfDecade(date2);
}, _a3[Action.LastInView] = function(date2) {
  return lastYearOfDecade(date2);
}, _a3);
var DecadeViewService = (
  /** @class */
  function() {
    function DecadeViewService2() {
    }
    DecadeViewService2.prototype.addToDate = function(min, skip) {
      return addDecades(min, skip);
    };
    DecadeViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addDecades(start2, i);
      });
    };
    DecadeViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA2;
      }
      var cells = range(0, CELLS_LENGTH2);
      var firstDate = firstYearOfDecade(viewDate);
      var lastDate = lastYearOfDecade(viewDate);
      var today2 = getToday();
      return range(0, ROWS_LENGTH2).map(function(rowOffset) {
        var baseDate = addYears(firstDate, rowOffset * CELLS_LENGTH2);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addYears(baseDate, cellOffset), min, max);
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return intersects(cellDate, firstDate, lastDate) ? {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate),
            isSelected,
            isWeekend: false,
            isInRange: isInRange(cellDate, min, max),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          } : null;
        });
      });
    };
    DecadeViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    DecadeViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return candidate.getFullYear() === expected.getFullYear();
    };
    DecadeViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 9;
    };
    DecadeViewService2.prototype.isInRange = function(candidate, min, max) {
      var year = candidate.getFullYear();
      var aboveMin = !min || min.getFullYear() <= year;
      var belowMax = !max || year <= max.getFullYear();
      return aboveMin && belowMax;
    };
    DecadeViewService2.prototype.isRangeStart = function(value) {
      return value.getFullYear() % 100 === 0;
    };
    DecadeViewService2.prototype.isInSameView = function(candidate, value) {
      return durationInDecades(candidate, value) === 0;
    };
    DecadeViewService2.prototype.move = function(value, action) {
      var modifier = ACTIONS2[action];
      if (!modifier) {
        return value;
      }
      return modifier(value);
    };
    DecadeViewService2.prototype.cellTitle = function(value) {
      return value.getFullYear().toString();
    };
    DecadeViewService2.prototype.navigationTitle = function(value) {
      return value ? firstYearOfDecade(value).getFullYear().toString() : "";
    };
    DecadeViewService2.prototype.title = function(value) {
      if (!value) {
        return "";
      }
      return "".concat(firstYearOfDecade(value).getFullYear(), " - ").concat(lastYearOfDecade(value).getFullYear());
    };
    DecadeViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH2;
    };
    DecadeViewService2.prototype.skip = function(value, min) {
      return durationInDecades(min, value);
    };
    DecadeViewService2.prototype.total = function(min, max) {
      return durationInDecades(min, max) + 1;
    };
    DecadeViewService2.prototype.value = function(current) {
      return current ? current.getFullYear().toString() : "";
    };
    DecadeViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInDecades(date2, max) < border;
      return renderTwoViews ? addDecades(date2, -1) : date2;
    };
    DecadeViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate(max);
      }
      return cellDate;
    };
    return DecadeViewService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/MonthViewService.js
var _a4;
var EMPTY_DATA3 = [[]];
var CELLS_LENGTH3 = 7;
var ROWS_LENGTH3 = 6;
var SATURDAY = 6;
var SUNDAY = 0;
var ACTIONS3 = (_a4 = {}, _a4[Action.Left] = function(date2) {
  return addDays(date2, -1);
}, _a4[Action.Up] = function(date2) {
  return addWeeks(date2, -1);
}, _a4[Action.Right] = function(date2) {
  return addDays(date2, 1);
}, _a4[Action.Down] = function(date2) {
  return addWeeks(date2, 1);
}, _a4[Action.PrevView] = function(date2) {
  return addMonths(date2, -1);
}, _a4[Action.NextView] = function(date2) {
  return addMonths(date2, 1);
}, _a4[Action.FirstInView] = function(date2) {
  return firstDayOfMonth(date2);
}, _a4[Action.LastInView] = function(date2) {
  return lastDayOfMonth(date2);
}, _a4);
var MonthViewService = (
  /** @class */
  function() {
    function MonthViewService2(intl) {
      this.intl = intl;
    }
    MonthViewService2.prototype.addToDate = function(min, skip) {
      return addMonths(min, skip);
    };
    MonthViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addMonths(start2, i);
      });
    };
    MonthViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA3;
      }
      var firstMonthDate = firstDayOfMonth(viewDate);
      var lastMonthDate = lastDayOfMonth(viewDate);
      var backward = -1;
      var date2 = dayOfWeek(firstMonthDate, this.intl.firstDay(), backward);
      var cells = range(0, CELLS_LENGTH3);
      var today2 = getToday();
      return range(0, ROWS_LENGTH3).map(function(rowOffset) {
        var baseDate = addDays(date2, rowOffset * CELLS_LENGTH3);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);
          var otherMonth = cellDate < firstMonthDate || cellDate > lastMonthDate;
          if (otherMonth) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          var cell = {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate),
            isSelected,
            isInRange: isInRange(cellDate, min, max),
            isWeekend: _this.isWeekend(cellDate),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstMonthDate),
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastMonthDate),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
          return cell;
        });
      });
    };
    MonthViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return getDate(candidate).getTime() === getDate(expected).getTime();
    };
    MonthViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    MonthViewService2.prototype.isInArray = function(date2, dates) {
      return !!dates.length && firstDayOfMonth(dates[0]) <= date2 && date2 <= lastDayOfMonth(dates[dates.length - 1]);
    };
    MonthViewService2.prototype.isInRange = function(candidate, min, max) {
      var value = getDate(candidate);
      var aboveMin = !min || getDate(min) <= value;
      var belowMax = !max || value <= getDate(max);
      return aboveMin && belowMax;
    };
    MonthViewService2.prototype.isInSameView = function(candidate, value) {
      return durationInMonths(candidate, value) === 0;
    };
    MonthViewService2.prototype.isRangeStart = function(value) {
      return !value.getMonth();
    };
    MonthViewService2.prototype.move = function(value, action) {
      var modifier = ACTIONS3[action];
      if (!modifier) {
        return value;
      }
      return modifier(value);
    };
    MonthViewService2.prototype.cellTitle = function(value) {
      return this.intl.formatDate(value, "D");
    };
    MonthViewService2.prototype.navigationTitle = function(value) {
      if (!value) {
        return "";
      }
      return this.isRangeStart(value) ? value.getFullYear().toString() : this.abbrMonthNames()[value.getMonth()];
    };
    MonthViewService2.prototype.title = function(current) {
      return "".concat(this.wideMonthNames()[current.getMonth()], " ").concat(current.getFullYear());
    };
    MonthViewService2.prototype.rowLength = function(prependCell) {
      return CELLS_LENGTH3 + (prependCell ? 1 : 0);
    };
    MonthViewService2.prototype.skip = function(value, min) {
      return durationInMonths(min, value);
    };
    MonthViewService2.prototype.total = function(min, max) {
      return durationInMonths(min, max) + 1;
    };
    MonthViewService2.prototype.value = function(current) {
      return current ? current.getDate().toString() : "";
    };
    MonthViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInMonths(date2, max) < border;
      return renderTwoViews ? addMonths(date2, -1) : date2;
    };
    MonthViewService2.prototype.isWeekend = function(date2) {
      var day = date2.getDay();
      return day === SATURDAY || day === SUNDAY;
    };
    MonthViewService2.prototype.abbrMonthNames = function() {
      return this.intl.dateFormatNames({ nameType: "abbreviated", type: "months" });
    };
    MonthViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return getDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return getDate(max);
      }
      return cellDate;
    };
    MonthViewService2.prototype.wideMonthNames = function() {
      return this.intl.dateFormatNames({ nameType: "wide", type: "months", standAlone: true });
    };
    return MonthViewService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/YearViewService.js
var _a5;
var EMPTY_DATA4 = [[]];
var CELLS_LENGTH4 = 4;
var ROWS_LENGTH4 = 3;
var upStep = function(month) {
  if (month > 4) {
    return -5;
  }
  if (month < 2) {
    return -2;
  }
  return -7;
};
var downStep = function(month) {
  if (month < 7) {
    return 5;
  }
  if (month < 10) {
    return 7;
  }
  return 2;
};
var ACTIONS4 = (_a5 = {}, _a5[Action.Left] = function(date2) {
  return addMonths(date2, -1);
}, _a5[Action.Up] = function(date2) {
  return addMonths(date2, upStep(date2.getMonth()));
}, _a5[Action.Right] = function(date2) {
  return addMonths(date2, 1);
}, _a5[Action.Down] = function(date2) {
  return addMonths(date2, downStep(date2.getMonth()));
}, _a5[Action.PrevView] = function(date2) {
  return addYears(date2, -1);
}, _a5[Action.NextView] = function(date2) {
  return addYears(date2, 1);
}, _a5[Action.FirstInView] = function(date2) {
  return firstMonthOfYear(date2);
}, _a5[Action.LastInView] = function(date2) {
  return lastMonthOfYear(date2);
}, _a5);
var YearViewService = (
  /** @class */
  function() {
    function YearViewService2(intl) {
      this._intl = intl;
    }
    YearViewService2.prototype.addToDate = function(min, skip) {
      return addYears(min, skip);
    };
    YearViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addYears(start2, i);
      });
    };
    YearViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a9 = options.selectionRange, selectionRange = _a9 === void 0 ? EMPTY_SELECTIONRANGE : _a9, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA4;
      }
      var months = this.abbrMonthNames();
      var firstDate = firstMonthOfYear(viewDate);
      var lastDate = lastMonthOfYear(viewDate);
      var currentYear = firstDate.getFullYear();
      var cells = range(0, CELLS_LENGTH4);
      var today2 = getToday();
      return range(0, ROWS_LENGTH4).map(function(rowOffset) {
        var baseDate = addMonths(firstDate, rowOffset * CELLS_LENGTH4);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);
          var changedYear = currentYear < cellDate.getFullYear();
          if (changedYear) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: months[cellDate.getMonth()],
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate),
            isSelected,
            isInRange: isInRange(cellDate, min, max),
            isWeekend: false,
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    YearViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    YearViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return candidate.getFullYear() === expected.getFullYear() && candidate.getMonth() === expected.getMonth();
    };
    YearViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();
    };
    YearViewService2.prototype.isInRange = function(candidate, min, max) {
      var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);
      var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;
      var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);
      return aboveMin && belowMax;
    };
    YearViewService2.prototype.isInSameView = function(candidate, value) {
      return durationInYears(candidate, value) === 0;
    };
    YearViewService2.prototype.isRangeStart = function(value) {
      return value.getFullYear() % 10 === 0;
    };
    YearViewService2.prototype.move = function(value, action) {
      var modifier = ACTIONS4[action];
      if (!modifier) {
        return value;
      }
      return modifier(value);
    };
    YearViewService2.prototype.cellTitle = function(value) {
      return "".concat(value.getFullYear(), " ").concat(this.value(value));
    };
    YearViewService2.prototype.navigationTitle = function(value) {
      return this.title(value);
    };
    YearViewService2.prototype.title = function(current) {
      return current ? current.getFullYear().toString() : "";
    };
    YearViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH4;
    };
    YearViewService2.prototype.skip = function(value, min) {
      return durationInYears(min, value);
    };
    YearViewService2.prototype.total = function(min, max) {
      return durationInYears(min, max) + 1;
    };
    YearViewService2.prototype.value = function(current) {
      return current ? this.abbrMonthNames()[current.getMonth()] : "";
    };
    YearViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInYears(date2, max) < border;
      return renderTwoViews ? addYears(date2, -1) : date2;
    };
    YearViewService2.prototype.abbrMonthNames = function() {
      return this._intl.dateFormatNames({ nameType: "abbreviated", type: "months" });
    };
    YearViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate(max);
      }
      return cellDate;
    };
    return YearViewService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/BusViewService.js
var _a6;
var services = (_a6 = {}, _a6[CalendarViewEnum.month] = MonthViewService, _a6[CalendarViewEnum.year] = YearViewService, _a6[CalendarViewEnum.decade] = DecadeViewService, _a6[CalendarViewEnum.century] = CenturyViewService, _a6);
var viewOffset = function(view, offset2) {
  var candidate = CalendarViewEnum[CalendarViewEnum[view + offset2]];
  return candidate !== void 0 ? candidate : view;
};
var BusViewService = (
  /** @class */
  function() {
    function BusViewService2(onViewChanged) {
      this.bottom = CalendarViewEnum.month;
      this.top = CalendarViewEnum.century;
      this.onViewChanged = onViewChanged;
    }
    BusViewService2.prototype.configure = function(bottom, top) {
      this.bottom = bottom;
      this.top = top;
    };
    BusViewService2.prototype.service = function(view, intl) {
      return new services["".concat(view)](intl);
    };
    BusViewService2.prototype.moveDown = function(view, event) {
      this.move(view, -1, event);
    };
    BusViewService2.prototype.moveUp = function(view, event) {
      this.move(view, 1, event);
    };
    BusViewService2.prototype.moveToBottom = function(activeView) {
      if (activeView === this.bottom) {
        return;
      }
      this.onViewChanged({ view: this.bottom });
    };
    BusViewService2.prototype.canMoveDown = function(view) {
      return this.bottom < view;
    };
    BusViewService2.prototype.canMoveUp = function(view) {
      return view < this.top;
    };
    BusViewService2.prototype.clamp = function(view) {
      if (view < this.bottom) {
        return this.bottom;
      }
      if (view > this.top) {
        return this.top;
      }
      return view;
    };
    BusViewService2.prototype.move = function(view, offset2, event) {
      var candidate = this.clamp(viewOffset(view, offset2));
      if (candidate === view) {
        return;
      }
      this.onViewChanged({ view: candidate }, event);
    };
    return BusViewService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/DOMService.js
var DOMService = (
  /** @class */
  function() {
    function DOMService3() {
      this.calendarHeight = 0;
      this.headerHeight = 0;
      this.monthViewHeight = 0;
      this.yearViewHeight = 0;
      this.decadeViewHeight = 0;
      this.centuryViewHeight = 0;
      this.navigationItemHeight = 0;
      this.scrollableContentHeight = 0;
      this.scrollableYearContentHeight = 0;
      this.calendarWidth = 0;
      this.monthViewWidth = 0;
      this.yearViewWidth = 0;
      this.decadeViewWidth = 0;
      this.centuryViewWidth = 0;
      this.scrollableContentWidth = 0;
      this.didCalculate = false;
      this.hostContainer = null;
    }
    DOMService3.prototype.ensureHeights = function() {
      if (this.calendarHeight !== void 0) {
        return;
      }
      this.calculateHeights();
    };
    DOMService3.prototype.calculateHeights = function(container) {
      var _this = this;
      if (!canUseDOM) {
        return;
      }
      var div = domContainerFactory("div");
      var ul = domContainerFactory("ul");
      var li = domContainerFactory("li");
      var td = domContainerFactory("td");
      var th = domContainerFactory("th");
      var tr = domContainerFactory("tr");
      var tbody = domContainerFactory("tbody");
      var thead = domContainerFactory("thead");
      var table = domContainerFactory("table");
      var monthHeader = function() {
        return div('\n            <span class="k-button k-button-md k-button-rectangle k-button-solid k-button-solid-base k-button-flat k-calendar-title">\n                <span className="k-button-text">March 2017</span>\n            </span>\n            <span class="k-spacer"></span>\n            <span class="k-calendar-nav k-hstack"><button class="k-calendar-nav-today">TODAY</button></span>\n        ', "k-calendar-header k-hstack");
      };
      var monthWeekHeader = function() {
        return table([
          thead([
            tr([th("MO", "k-calendar-th")], "k-calendar-tr")
          ], "k-calendar-thead")
        ], "k-calendar-table k-calendar-weekdays");
      };
      var repeat = function(count, mapper) {
        return new Array(count).fill("1").map(mapper);
      };
      var content = function(rows, cells) {
        if (cells === void 0) {
          cells = 1;
        }
        return table([
          tbody([tr([td("1", "k-calendar-td k-alt")])].concat(repeat(rows, function() {
            return tr(repeat(cells, function(c) {
              return td('<span class="k-link">'.concat(c, "</span>"), "k-calendar-td");
            }), "k-calendar-tr");
          })), "k-calendar-tbody")
        ], "k-calendar-table");
      };
      var scrollable = function(children) {
        return div(children, "k-content k-calendar-content k-scrollable");
      };
      var view = function(contentElement, className, renderWeekHeader) {
        return div(renderWeekHeader ? [
          monthHeader(),
          monthWeekHeader(),
          scrollable([contentElement, contentElement])
        ] : [
          monthHeader(),
          scrollable([contentElement, contentElement])
        ], className, { left: "-10000px", position: "absolute" });
      };
      var navigationList = function() {
        var navElement;
        return function() {
          if (!canUseDOM) {
            return null;
          }
          if (!navElement) {
            navElement = div([scrollable([ul([li("<span>FEB</span>")])])], "k-calendar-navigation", { left: "0px", position: "absolute" });
          }
          return navElement;
        };
      }();
      var viewFactory = function(_a9, className, renderWeekHeader) {
        var cells = _a9.cells, rows = _a9.rows;
        var viewElement;
        return function() {
          if (!canUseDOM) {
            return null;
          }
          if (!viewElement) {
            viewElement = view(content(rows, cells), className, renderWeekHeader);
          }
          return viewElement;
        };
      };
      var getScrollable = function(element) {
        return element.querySelector(".k-scrollable");
      };
      var horizontal = function(element) {
        var scrollableElement = getScrollable(element);
        scrollableElement.className = "".concat(scrollableElement.className, " k-scrollable-horizontal");
        return element;
      };
      var monthView = viewFactory({ cells: 7, rows: 6 }, "k-calendar-view k-calendar-monthview k-vstack", true);
      var yearView = viewFactory({ cells: 5, rows: 3 }, "k-calendar-view k-calendar-yearview", false);
      var decadeView = viewFactory({ cells: 5, rows: 2 }, "k-calendar-view k-calendar-decadeview", false);
      var horzMonthView = function() {
        return horizontal(monthView());
      };
      var horzYearView = function() {
        return horizontal(yearView());
      };
      var horzDecadeView = function() {
        return horizontal(decadeView());
      };
      var height = function(element) {
        return parseFloat(window.getComputedStyle(element).height) || element.offsetHeight;
      };
      var width = function(element) {
        var styles = window.getComputedStyle(element);
        var computed = parseFloat(styles.width) + parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);
        return computed || element.offsetWidth;
      };
      var getBody = function(element) {
        return element.querySelector("tbody");
      };
      this.didCalculate = true;
      if (container) {
        this.hostContainer = container;
      }
      this.batch(monthView(), function(contentElement) {
        var viewElement = getBody(contentElement);
        _this.calendarHeight = height(contentElement);
        _this.monthViewHeight = height(viewElement);
        _this.headerHeight = height(viewElement.children[0]);
        _this.scrollableContentHeight = height(getScrollable(contentElement));
      });
      this.batch(horzMonthView(), function(contentElement) {
        var viewElement = getBody(contentElement);
        _this.calendarWidth = width(contentElement);
        _this.monthViewWidth = width(viewElement);
        _this.scrollableContentWidth = width(getScrollable(contentElement));
      });
      this.batch(yearView(), function(contentElement) {
        _this.yearViewHeight = height(getBody(contentElement));
        _this.scrollableYearContentHeight = height(getScrollable(contentElement));
      });
      this.batch(horzYearView(), function(contentElement) {
        _this.yearViewWidth = width(getBody(contentElement));
      });
      this.batch(decadeView(), function(contentElement) {
        _this.decadeViewHeight = height(getBody(contentElement));
        _this.centuryViewHeight = _this.decadeViewHeight;
      });
      this.batch(horzDecadeView(), function(contentElement) {
        _this.decadeViewWidth = width(getBody(contentElement));
        _this.centuryViewWidth = _this.decadeViewWidth;
      });
      this.batch(navigationList(), function(contentElement) {
        _this.navigationItemHeight = height(contentElement.querySelector("li"));
      });
    };
    DOMService3.prototype.viewHeight = function(viewType) {
      return this.viewDimension(viewType, "height");
    };
    DOMService3.prototype.viewWidth = function(viewType) {
      return this.viewDimension(viewType, "width");
    };
    DOMService3.prototype.viewDimension = function(viewType, dimension) {
      var viewProp = dimension === "height" ? "ViewHeight" : "ViewWidth";
      switch (viewType) {
        case CalendarViewEnum.month:
          return this["month".concat(viewProp)];
        case CalendarViewEnum.year:
          return this["year".concat(viewProp)];
        case CalendarViewEnum.decade:
          return this["decade".concat(viewProp)];
        case CalendarViewEnum.century:
          return this["century".concat(viewProp)];
        default:
          return 1;
      }
    };
    DOMService3.prototype.batch = function(contentElement, action) {
      var hostContainer = this.hostContainer || document.body;
      var appendedContent = hostContainer.appendChild(contentElement);
      action(appendedContent);
      hostContainer.removeChild(appendedContent);
    };
    return DOMService3;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/NavigationService.js
var KEY_TO_ACTION = {
  "33": Action.PrevView,
  "34": Action.NextView,
  "35": Action.LastInView,
  "36": Action.FirstInView,
  "37": Action.Left,
  "38": Action.Up,
  "39": Action.Right,
  "40": Action.Down,
  "meta+38": Action.UpperView,
  "meta+40": Action.LowerView
};
var NavigationService = (
  /** @class */
  function() {
    function NavigationService2(bus) {
      this.bus = bus;
    }
    NavigationService2.prototype.action = function(event) {
      var action = "".concat(event.ctrlKey || event.metaKey ? "meta+" : "").concat(event.keyCode);
      return KEY_TO_ACTION[action];
    };
    NavigationService2.prototype.move = function(value, action, activeView, service, event) {
      if (!service) {
        return value;
      }
      if (action === Action.UpperView && this.bus.canMoveUp(activeView)) {
        this.bus.moveUp(activeView, event);
        return value;
      }
      if (action === Action.LowerView && this.bus.canMoveDown(activeView)) {
        this.bus.moveDown(activeView, event);
        return value;
      }
      return service.move(value, action);
    };
    return NavigationService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/ScrollSyncService.js
var divideByMagnitude = function(magnitude) {
  return function(x) {
    return Math.floor(x / magnitude);
  };
};
var powerByMagnitude = function(magnitude) {
  return function(x) {
    return x * magnitude;
  };
};
var ScrollSyncService = (
  /** @class */
  function() {
    function ScrollSyncService2(dom) {
      this.dom = dom;
      this.divideByMagnitude = null;
      this.powerByMagnitude = null;
      this.navigator = null;
      this.view = null;
      this.monthScrolled = false;
      this.navScrolled = false;
    }
    ScrollSyncService2.prototype.configure = function(activeView) {
      var magnitude = Math.max(this.dom.viewHeight(activeView) / this.dom.navigationItemHeight, 1);
      this.divideByMagnitude = divideByMagnitude(magnitude);
      this.powerByMagnitude = powerByMagnitude(magnitude);
    };
    ScrollSyncService2.prototype.sync = function(navigator, view, e) {
      if (!navigator || !view) {
        return;
      }
      this.navigator = navigator;
      this.view = view;
      if (e.target === this.navigator.element) {
        if (this.monthScrolled) {
          this.monthScrolled = false;
          return;
        }
        this.navScrolled = true;
        this.scrollSiblingOf(this.navigator.element);
      }
      if (e.target === this.view.element) {
        if (this.navScrolled) {
          this.navScrolled = false;
          return;
        }
        this.monthScrolled = true;
        this.scrollSiblingOf(this.view.element);
      }
    };
    ScrollSyncService2.prototype.scrollSiblingOf = function(scrolledElement) {
      var component = this.siblingComponent(scrolledElement);
      var scrollTop = this.calculateScroll(component, scrolledElement.scrollTop);
      component.scrollTo(scrollTop);
    };
    ScrollSyncService2.prototype.siblingComponent = function(scrollableElement) {
      return this.navigator.element === scrollableElement ? this.view : this.navigator;
    };
    ScrollSyncService2.prototype.calculateScroll = function(component, scrollTop) {
      var modifier = component === this.navigator ? this.divideByMagnitude : this.powerByMagnitude;
      return modifier ? modifier(scrollTop) : 0;
    };
    return ScrollSyncService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/services/WeekNamesService.js
var WeekNamesService = (
  /** @class */
  function() {
    function WeekNamesService2(intl) {
      this.intl = intl;
    }
    WeekNamesService2.prototype.getWeekNames = function(includeWeekNumber) {
      if (includeWeekNumber === void 0) {
        includeWeekNumber = false;
      }
      var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: "short", type: "days" }), this.intl.firstDay());
      return includeWeekNumber ? [""].concat(weekNames) : weekNames;
    };
    return WeekNamesService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/View.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var emptyCell = function(idx) {
  return React4.createElement("td", { key: idx, className: "k-calendar-td" }, " ");
};
var View = (
  /** @class */
  function(_super) {
    __extends4(View2, _super);
    function View2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.intl = null;
      _this.weekService = null;
      _this.buildWeekNumber = function(row, idx) {
        var firstDayOfWeek = _this.firstDate(row);
        if (!firstDayOfWeek) {
          return emptyCell("week-cell-".concat(idx));
        }
        var firstDate = _this.firstDate(row);
        var weekCellValue = _this.getWeekNumber(firstDate);
        var uniqueID = "kendo-react-calendar-week-cell-".concat(weekCellValue);
        var cellProps = {
          className: "k-alt",
          value: weekCellValue,
          firstDate
        };
        return _this.props.weekCell ? React4.createElement(_this.props.weekCell, __assign3({}, cellProps, { key: uniqueID }), weekCellValue) : React4.createElement(CalendarWeekCell, __assign3({}, cellProps, { key: uniqueID }), weekCellValue);
      };
      _this.buildRow = function(row) {
        return row.map(function(cell, idx) {
          if (!cell) {
            return emptyCell(idx);
          }
          var aria = { "aria-selected": cell.isSelected };
          var uniqueID = "kendo-react-calendar-cell-".concat(cell.value.getTime());
          var cellProps = __assign3(__assign3(__assign3({}, aria), cell), { isDisabled: !cell.isInRange, view: _this.props.activeView, onClick: _this.handleClick, onMouseEnter: _this.handleMouseEnter, onMouseLeave: _this.handleMouseLeave });
          return _this.props.cell ? React4.createElement(_this.props.cell, __assign3({}, cellProps, { key: uniqueID }), cell.formattedValue) : React4.createElement(CalendarCell, __assign3({}, cellProps, { key: uniqueID }), cell.formattedValue);
        });
      };
      _this.firstDate = function(row) {
        var cell = _this.firstWeekDateContext(row);
        return cell ? cell.value : null;
      };
      _this.firstWeekDateContext = function(rowCtx) {
        if (!_this.weekNumber) {
          return null;
        }
        var idx = 0;
        var ctx = rowCtx[idx];
        while (!ctx && idx < rowCtx.length) {
          ctx = rowCtx[++idx];
        }
        return ctx;
      };
      _this.handleClick = function(value, event) {
        var onChange = _this.props.onChange;
        if (onChange && event) {
          var args = {
            value: cloneDate(value),
            target: _this,
            nativeEvent: event && event.nativeEvent,
            syntheticEvent: event
          };
          onChange.call(void 0, args);
        }
      };
      _this.handleMouseEnter = function(value) {
        var onCellEnter = _this.props.onCellEnter;
        if (onCellEnter) {
          onCellEnter.call(void 0, cloneDate(value));
        }
      };
      _this.handleMouseLeave = function(value) {
        var onCellLeave = _this.props.onCellLeave;
        if (onCellLeave) {
          onCellLeave.call(void 0, cloneDate(value));
        }
      };
      return _this;
    }
    Object.defineProperty(View2.prototype, "min", {
      get: function() {
        return this.props.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(View2.prototype, "max", {
      get: function() {
        return this.props.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(View2.prototype, "isHorizontal", {
      get: function() {
        return this.props.direction === "horizontal";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(View2.prototype, "isMonthView", {
      get: function() {
        return this.props.activeView === CalendarViewEnum.month;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(View2.prototype, "weekNumber", {
      get: function() {
        return Boolean(this.props.showWeekNumbers && this.props.activeView === CalendarViewEnum.month);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(View2.prototype, "selectedDate", {
      get: function() {
        return this.props.selectedDate !== void 0 ? this.props.selectedDate : View2.defaultProps.selectedDate;
      },
      enumerable: false,
      configurable: true
    });
    View2.prototype.render = function() {
      var _this = this;
      this.intl = provideIntlService(this);
      this.weekService = new WeekNamesService(this.intl);
      var weekNames = this.weekService.getWeekNames(this.weekNumber);
      var colSpan = this.props.service.rowLength(this.weekNumber);
      var title = this.props.service.title(this.props.viewDate);
      var time2 = getToday();
      var viewDate = setTime(this.props.viewDate, time2);
      var data = this.props.service.data({
        cellUID: this.props.cellUID,
        min: this.min,
        max: this.max,
        focusedDate: this.props.focusedDate,
        isActiveView: !this.props.bus.canMoveDown(this.props.activeView),
        selectedDate: this.selectedDate,
        selectionRange: this.props.selectionRange,
        viewDate
      });
      return React4.createElement(
        React4.Fragment,
        null,
        this.isMonthView && this.isHorizontal && React4.createElement(
          "thead",
          { role: "rowgroup", className: "k-calendar-thead" },
          React4.createElement("tr", { role: "row", className: "k-calendar-tr" }, weekNames.map(function(name, idx) {
            return React4.createElement("th", { key: idx, className: "k-calendar-th" }, name);
          }))
        ),
        React4.createElement(
          "tbody",
          { role: "rowgroup", className: "k-calendar-tbody" },
          !this.isHorizontal && React4.createElement(
            "tr",
            { role: "presentation", className: "k-calendar-tr" },
            React4.createElement("th", { scope: "col", colSpan, className: "k-calendar-caption" }, title)
          ),
          data.map(function(row, idx) {
            return React4.createElement(
              "tr",
              { role: "row", className: "k-calendar-tr", key: idx },
              _this.weekNumber && _this.buildWeekNumber(row, idx),
              _this.buildRow(row)
            );
          })
        )
      );
    };
    View2.prototype.getWeekNumber = function(date2) {
      if (!this.weekNumber || !this.intl) {
        return null;
      }
      return weekInYear(date2, this.intl.firstDay());
    };
    View2.propTypes = {
      activeRangeEnd: PropTypes2.oneOf(["start", "end", null]),
      activeView: PropTypes2.number.isRequired,
      cellUID: PropTypes2.string.isRequired,
      direction: PropTypes2.oneOf(["horizontal", "vertical"]),
      focusedDate: PropTypes2.instanceOf(Date).isRequired,
      max: PropTypes2.instanceOf(Date).isRequired,
      min: PropTypes2.instanceOf(Date).isRequired,
      onChange: PropTypes2.func,
      selectedDate: PropTypes2.oneOfType([PropTypes2.instanceOf(Date), PropTypes2.arrayOf(PropTypes2.instanceOf(Date))]),
      showWeekNumbers: PropTypes2.bool,
      viewDate: PropTypes2.instanceOf(Date).isRequired
    };
    View2.defaultProps = {
      direction: "vertical",
      selectedDate: getToday(),
      showWeekNumbers: false
    };
    return View2;
  }(React4.Component)
);
registerForIntl(View);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/Header.js
var React6 = __toESM(require_react());
var PropTypes3 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/CalendarHeaderTitle.js
var React5 = __toESM(require_react());
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var CalendarHeaderTitle = (
  /** @class */
  function(_super) {
    __extends5(CalendarHeaderTitle2, _super);
    function CalendarHeaderTitle2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarHeaderTitle2.prototype.render = function() {
      var _a9 = this.props, view = _a9.view, props = __rest3(_a9, ["view"]);
      return React5.createElement(Button, __assign4({ type: "button", fillMode: "flat" }, props), this.props.children);
    };
    return CalendarHeaderTitle2;
  }(React5.PureComponent)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/defaults.js
var MIDNIGHT_DATE2 = new Date(1980, 0, 1);
var MIN_DATE2 = new Date(1900, 0, 1);
var MAX_DATE2 = new Date(2099, 11, 31);
var MIN_TIME2 = new Date(1980, 0, 1);
var MAX_TIME2 = new Date(1980, 0, 1, 23, 59, 59);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/Header.js
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var Header = (
  /** @class */
  function(_super) {
    __extends6(Header2, _super);
    function Header2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.getTitle = function() {
        if (!_this.props.currentDate) {
          return "";
        }
        var take = _this.rangeLength - 1;
        var title = _this.props.service.title(_this.props.currentDate);
        var nextDate = _this.props.service.addToDate(_this.props.currentDate, take);
        if (take < 1 || !_this.props.service.isInRange(nextDate, _this.min, _this.max)) {
          return title;
        }
        return "".concat(title, " - ").concat(_this.props.service.title(nextDate));
      };
      _this.handleTitleClick = function(event) {
        if (!_this.canMoveUp) {
          return;
        }
        _this.props.bus.moveUp(_this.props.activeView, event);
      };
      return _this;
    }
    Object.defineProperty(Header2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : Header2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Header2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : Header2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Header2.prototype, "rangeLength", {
      get: function() {
        return this.props.rangeLength !== void 0 ? this.props.rangeLength : Header2.defaultProps.rangeLength;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Header2.prototype, "canMoveUp", {
      get: function() {
        return this.props.bus.canMoveUp(this.props.activeView);
      },
      enumerable: false,
      configurable: true
    });
    Header2.prototype.render = function() {
      var title = this.getTitle();
      var titleClassNames = classNames("k-calendar-title");
      var headerTitleProps = {
        children: title,
        value: title,
        view: this.props.activeView,
        className: titleClassNames,
        onClick: this.handleTitleClick,
        disabled: !this.canMoveUp
      };
      var headerTitle = this.props.headerTitle ? React6.createElement(this.props.headerTitle, __assign5({}, headerTitleProps), title) : React6.createElement(CalendarHeaderTitle, __assign5({}, headerTitleProps), title);
      return React6.createElement(
        "div",
        { className: "k-calendar-header k-hstack" },
        headerTitle,
        React6.createElement("span", { className: "k-spacer" }),
        React6.createElement("span", { className: "k-calendar-nav k-hstack" }, this.props.commands)
      );
    };
    Header2.propTypes = {
      activeView: PropTypes3.number.isRequired,
      currentDate: PropTypes3.instanceOf(Date).isRequired,
      max: PropTypes3.instanceOf(Date).isRequired,
      min: PropTypes3.instanceOf(Date).isRequired,
      rangeLength: PropTypes3.number
    };
    Header2.defaultProps = {
      rangeLength: 1,
      min: MIN_DATE2,
      max: MAX_DATE2
    };
    return Header2;
  }(React6.Component)
);
registerForLocalization(Header);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/TodayCommand.js
var React7 = __toESM(require_react());
var PropTypes4 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/messages/index.js
var _a7;
var prevView = "multiviewcalendar.prevView";
var nextView = "multiviewcalendar.nextView";
var increaseValue = "dateinput.increment";
var decreaseValue = "dateinput.decrement";
var today = "calendar.today";
var toggleCalendar = "datepicker.toggleCalendar";
var swapStartEnd = "daterangepicker.swapStartEnd";
var start = "daterangepicker.start";
var end = "daterangepicker.end";
var separator = "daterangepicker.separator";
var toggleDateTimeSelector = "datetimepicker.toggleDateTimeSelector";
var now = "timepicker.now";
var selectNow = "timepicker.selectNow";
var timePickerCancel = "timepicker.cancel";
var timePickerSet = "timepicker.set";
var toggleTimeSelector = "timepicker.toggleTimeSelector";
var toggleClock = "timepicker.toggleClock";
var date = "datetimepicker.date";
var time = "datetimepicker.time";
var dateTimePickerCancel = "datetimepicker.cancel";
var dateTimePickerSet = "datetimepicker.set";
var messages = (_a7 = {}, _a7[today] = "TODAY", _a7[now] = "NOW", _a7[timePickerSet] = "Set", _a7[timePickerCancel] = "Cancel", _a7[date] = "Date", _a7[time] = "Time", _a7[dateTimePickerCancel] = "Cancel", _a7[dateTimePickerSet] = "Set", _a7[start] = "Start", _a7[end] = "End", _a7[separator] = " ", _a7[selectNow] = "Select Now", _a7[toggleTimeSelector] = "Toggle TimeSelector", _a7[toggleClock] = "Toggle Clock", _a7[increaseValue] = "Increase value", _a7[decreaseValue] = "Decrease value", _a7[toggleCalendar] = "Toggle calendar", _a7[prevView] = "Navigate to previous view", _a7[nextView] = "Navigate to next view", _a7[swapStartEnd] = "Swap start and end values", _a7[toggleDateTimeSelector] = "Toggle date-time selector", _a7);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/TodayCommand.js
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TodayCommand = (
  /** @class */
  function(_super) {
    __extends7(TodayCommand2, _super);
    function TodayCommand2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.localization = null;
      _this.handleClick = function(syntheticEvent) {
        if (!_this.todayIsInRange) {
          return;
        }
        if (_this.props.onClick) {
          var event_1 = {
            syntheticEvent,
            nativeEvent: syntheticEvent.nativeEvent,
            value: dateInRange(getToday(), _this.min, _this.max),
            target: _this,
            isTodayClick: true
          };
          _this.props.onClick.call(void 0, event_1);
        }
      };
      return _this;
    }
    Object.defineProperty(TodayCommand2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : TodayCommand2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TodayCommand2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : TodayCommand2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TodayCommand2.prototype, "todayIsInRange", {
      get: function() {
        return isInRange(getToday(), getDate(this.min), getDate(this.max));
      },
      enumerable: false,
      configurable: true
    });
    TodayCommand2.prototype.render = function() {
      this.localization = provideLocalizationService(this);
      var todayMessage = this.localization.toLanguageString(today, messages[today]);
      var todayClassNames = classNames("k-calendar-nav-today", {
        "k-disabled": this.props.disabled
      });
      return React7.createElement(Button, { className: todayClassNames, onClick: this.handleClick, tabIndex: this.props.tabIndex, fillMode: "flat" }, todayMessage);
    };
    TodayCommand2.propTypes = {
      max: PropTypes4.instanceOf(Date).isRequired,
      min: PropTypes4.instanceOf(Date).isRequired,
      onClick: PropTypes4.func,
      disabled: PropTypes4.bool
    };
    TodayCommand2.defaultProps = {
      min: MIN_DATE2,
      max: MAX_DATE2
    };
    return TodayCommand2;
  }(React7.Component)
);
registerForLocalization(TodayCommand);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/ViewList.js
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VIEWS_COUNT = 5;
var ViewList = (
  /** @class */
  function(_super) {
    __extends8(ViewList2, _super);
    function ViewList2(props) {
      var _this = _super.call(this, props) || this;
      _this.virtualization = null;
      _this.calendarView = null;
      _this.table = null;
      _this.intl = null;
      _this.bottomOffset = 0;
      _this.viewOffset = 0;
      _this.viewHeight = 0;
      _this._element = null;
      _this.isActive = false;
      _this.animateToIndex = true;
      _this.shouldScroll = false;
      _this.focusActiveDate = function() {
        if (!_this._element) {
          return;
        }
        var focusedCell = _this._element.querySelector("td.k-focus");
        var nextActiveCell = _this._element.querySelector(".k-state-pending-focus");
        if (focusedCell && focusedCell[0]) {
          focusedCell[0].classList.remove("k-focus");
        }
        if (nextActiveCell) {
          nextActiveCell.classList.add("k-focus");
        }
        _this.isActive = true;
      };
      _this.blurActiveDate = function() {
        if (!_this._element) {
          return;
        }
        var focusedCell = _this._element.querySelector("td.k-focus");
        if (focusedCell) {
          focusedCell.classList.remove("k-focus");
        }
        _this.isActive = false;
      };
      _this.handleVirtualizationMount = function(virtualization) {
        _this.virtualization = virtualization;
        if (_this.virtualization && _this.table) {
          _this.table.style.transform = "translateY(".concat(_this.viewOffset, "px)");
          var viewDate = dateInRange(_this.props.focusedDate, _this.props.min, _this.props.max);
          var indexToScroll = _this.props.service.skip(viewDate, _this.props.min);
          _this.virtualization.scrollToIndex(indexToScroll);
        }
      };
      _this.buildMonthView = function(cols, weekNames) {
        return React8.createElement(
          "table",
          { key: "calendar-view-list-weekdays", className: "k-calendar-table k-calendar-weekdays", role: "grid", tabIndex: _this.props.tabIndex },
          React8.createElement("colgroup", null, cols.map(function(_, idx) {
            return React8.createElement("col", { key: idx });
          })),
          React8.createElement(
            "thead",
            { className: "k-calendar-thead" },
            React8.createElement("tr", { className: "k-calendar-tr" }, weekNames.map(function(name, idx) {
              return React8.createElement("th", { key: idx, className: "k-calendar-th" }, name);
            }))
          )
        );
      };
      _this.buildDates = function(cols, dates) {
        var cellUID = _this.props.cellUID;
        return React8.createElement(
          "table",
          { className: "k-calendar-table", ref: function(table) {
            return _this.table = table;
          }, role: "grid", tabIndex: _this.props.tabIndex, "aria-activedescendant": cellUID + _this.props.focusedDate.getTime() },
          React8.createElement("colgroup", null, cols.map(function(_, idx) {
            return React8.createElement("col", { key: idx });
          })),
          dates.map(function(date2) {
            return React8.createElement(View, { ref: function(el) {
              if (!_this.calendarView) {
                _this.calendarView = el;
              }
            }, key: date2.getTime(), activeView: _this.props.activeView, viewDate: date2, min: _this.props.min, max: _this.props.max, cellUID, focusedDate: _this.props.focusedDate, cell: _this.props.cell, selectedDate: _this.props.value, showWeekNumbers: _this.weekNumber, onChange: _this.handleDateChange, bus: _this.props.bus, service: _this.props.service, weekCell: _this.props.weekCell });
          })
        );
      };
      _this.calculateHeights = function() {
        if (!_this.props.dom) {
          return;
        }
        var scrollableHeight = _this.props.activeView === CalendarViewEnum.month ? _this.props.dom.scrollableContentHeight : _this.props.dom.scrollableYearContentHeight;
        _this.bottomOffset = scrollableHeight - _this.props.dom.viewHeight(_this.props.activeView);
        _this.viewOffset = -1 * _this.props.dom.headerHeight;
        _this.viewHeight = _this.props.dom.viewHeight(_this.props.activeView) || 1;
      };
      _this.getTake = function(skip, total) {
        return Math.min(total - skip, _this.take);
      };
      _this.handleScrollAction = function(_a9) {
        var index = _a9.index, scrollAction = _a9.scrollAction, pageAction = _a9.pageAction;
        var skip = pageAction ? pageAction.skip : _this.state.skip;
        if (_this.state.index !== index || _this.state.skip !== skip) {
          _this.setState({ index, skip });
        }
        if (_this.table && scrollAction) {
          var translate = "translateY(".concat(scrollAction.offset, "px)");
          _this.table.style.transform = translate;
        }
      };
      _this.handleTodayClick = function(event) {
        _this.shouldScroll = true;
        _this.handleDateChange.call(void 0, event, true);
      };
      _this.handleDateChange = function(event, isTodayClick) {
        if (isTodayClick === void 0) {
          isTodayClick = false;
        }
        var onChange = _this.props.onChange;
        if (onChange) {
          var args = {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: cloneDate(event.value),
            target: _this,
            isTodayClick
          };
          onChange.call(void 0, args);
        }
      };
      _this.lastView = _this.props.activeView;
      _this.lastFocus = _this.props.focusedDate;
      _this.state = {
        skip: _this.props.service.skip(_this.props.focusedDate, _this.props.min),
        index: _this.props.service.skip(_this.props.focusedDate, _this.props.min)
      };
      return _this;
    }
    Object.defineProperty(ViewList2.prototype, "element", {
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ViewList2.prototype, "weekNames", {
      get: function() {
        this.intl = provideIntlService(this);
        var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: "short", type: "days" }), this.intl.firstDay());
        return this.weekNumber ? [""].concat(weekNames) : weekNames;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ViewList2.prototype, "weekNumber", {
      get: function() {
        return Boolean(this.props.showWeekNumbers && this.props.activeView === CalendarViewEnum.month);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ViewList2.prototype, "take", {
      get: function() {
        return this.props.take !== void 0 ? this.props.take : ViewList2.defaultProps.take;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ViewList2.prototype, "animate", {
      get: function() {
        return Boolean(this.props.smoothScroll && this.animateToIndex);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ViewList2.prototype, "todayIsInRange", {
      get: function() {
        return isInRange(getToday(), getDate(this.props.min), getDate(this.props.max));
      },
      enumerable: false,
      configurable: true
    });
    ViewList2.prototype.componentDidUpdate = function(_prevProps, _prevState) {
      this.shouldScroll = false;
      if (this.indexToScroll !== void 0 && this.virtualization) {
        this.virtualization[this.animate ? "animateToIndex" : "scrollToIndex"](this.indexToScroll);
      }
      if (this.isActive) {
        this.focusActiveDate();
      }
      this.lastView = this.props.activeView;
      this.indexToScroll = void 0;
    };
    ViewList2.prototype.render = function() {
      var _this = this;
      this.calculateHeights();
      var didViewChange = this.lastView !== this.props.activeView;
      var focusedDate = dateInRange(this.props.focusedDate, this.props.min, this.props.max);
      var skip = !didViewChange ? this.state.skip : this.props.service.skip(focusedDate, this.props.min);
      var total = this.props.service.total(this.props.min, this.props.max);
      var take = this.getTake(skip, total);
      var viewDate = this.props.service.addToDate(this.props.min, skip);
      var activeDate = this.props.service.addToDate(this.props.min, this.state.index);
      var cols = new Array(this.props.service.rowLength(this.weekNumber)).fill("");
      var didViewChanged = this.props.activeView !== this.lastView;
      this.animateToIndex = !didViewChanged;
      if (didViewChanged || !isEqualDate(this.lastFocus, focusedDate) || this.shouldScroll || (!this.props.shouldScroll || this.props.shouldScroll())) {
        this.indexToScroll = this.props.service.skip(focusedDate, this.props.min);
      }
      this.lastFocus = focusedDate;
      var rootClassNames = classNames("k-calendar-view k-vstack", {
        "k-calendar-monthview": this.props.activeView === CalendarViewEnum.month,
        "k-calendar-yearview": this.props.activeView === CalendarViewEnum.year,
        "k-calendar-decadeview": this.props.activeView === CalendarViewEnum.decade,
        "k-calendar-centuryview": this.props.activeView === CalendarViewEnum.century
      });
      var dates = this.buildDates(cols, this.props.service.datesList(viewDate, take));
      var viewListBody = React8.createElement(
        React8.Fragment,
        null,
        React8.createElement(Header, { key: "calendar-view-list-header", currentDate: activeDate, min: this.props.min, max: this.props.max, activeView: this.props.activeView, bus: this.props.bus, service: this.props.service, headerTitle: this.props.headerTitle, commands: React8.createElement(
          React8.Fragment,
          null,
          React8.createElement(TodayCommand, { min: this.props.min, max: this.props.max, onClick: this.handleTodayClick, disabled: !this.todayIsInRange, tabIndex: this.props.tabIndex })
        ) }),
        this.props.activeView === CalendarViewEnum.month && this.buildMonthView(cols, this.weekNames),
        React8.createElement(Virtualization, { key: "calendar-view-list-content", skip, take: this.take, total, itemHeight: this.viewHeight, topOffset: this.viewOffset, bottomOffset: this.bottomOffset, scrollOffsetSize: this.viewOffset, maxScrollDifference: this.viewHeight, onScroll: this.props.onScroll, onScrollAction: this.handleScrollAction, onMount: this.handleVirtualizationMount, children: dates, tabIndex: this.props.tabIndex })
      );
      return React8.createElement("div", { ref: function(el) {
        _this._element = el;
      }, className: rootClassNames }, this.props.dom.didCalculate ? viewListBody : null);
    };
    ViewList2.propTypes = {
      activeView: PropTypes5.number.isRequired,
      bottomOffset: PropTypes5.number,
      cellUID: PropTypes5.string.isRequired,
      focusedDate: PropTypes5.instanceOf(Date).isRequired,
      max: PropTypes5.instanceOf(Date).isRequired,
      min: PropTypes5.instanceOf(Date).isRequired,
      onChange: PropTypes5.func,
      showWeekNumbers: PropTypes5.bool,
      smoothScroll: PropTypes5.bool,
      take: PropTypes5.number,
      value: PropTypes5.instanceOf(Date),
      viewHeight: PropTypes5.number,
      viewOffset: PropTypes5.number,
      tabIndex: PropTypes5.number
    };
    ViewList2.defaultProps = {
      take: VIEWS_COUNT,
      showWeekNumbers: false,
      smoothScroll: true
    };
    return ViewList2;
  }(React8.Component)
);
registerForIntl(ViewList);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/Navigation.js
var React10 = __toESM(require_react());
var PropTypes6 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/CalendarNavigationItem.js
var React9 = __toESM(require_react());
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __rest4 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var CalendarNavigationItem = (
  /** @class */
  function(_super) {
    __extends9(CalendarNavigationItem2, _super);
    function CalendarNavigationItem2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.handleClick = function(event) {
        var _a9 = _this.props, onClick = _a9.onClick, value = _a9.value;
        if (onClick) {
          onClick.call(void 0, value, event);
        }
      };
      return _this;
    }
    CalendarNavigationItem2.prototype.render = function() {
      var _a9 = this.props, isRangeStart = _a9.isRangeStart, value = _a9.value, text = _a9.text, other = __rest4(_a9, ["isRangeStart", "value", "text"]);
      return React9.createElement(
        "li",
        __assign6({}, other, { onClick: this.handleClick }),
        React9.createElement("span", { className: classNames({ "k-calendar-navigation-marker": isRangeStart }) }, this.props.children)
      );
    };
    return CalendarNavigationItem2;
  }(React9.Component)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/Navigation.js
var __extends10 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var ITEMS_COUNT = 30;
var Navigation = (
  /** @class */
  function(_super) {
    __extends10(Navigation2, _super);
    function Navigation2(props) {
      var _this = _super.call(this, props) || this;
      _this.virtualization = null;
      _this.list = null;
      _this.itemHeight = 0;
      _this.topOffset = 0;
      _this.maxViewHeight = 0;
      _this.bottomOffset = 0;
      _this.handleVirtualizationMount = function(virtualization) {
        _this.virtualization = virtualization;
        if (_this.virtualization && _this.list) {
          _this.list.style.transform = "translateY(".concat(_this.topOffset, "px)");
          var viewDate = dateInRange(_this.props.focusedDate, _this.props.min, _this.props.max);
          var indexToScroll = _this.props.service.skip(viewDate, _this.props.min);
          _this.virtualization.scrollToIndex(indexToScroll);
        }
      };
      _this.buildNavigationItem = function(date2) {
        var text = _this.props.service.navigationTitle(date2);
        var isRangeStart = _this.props.service.isRangeStart(date2);
        var uniqueID = "kendo-react-calendar-nav-item-".concat(date2.getTime());
        var navigationItemProps = {
          text,
          value: date2,
          isRangeStart,
          view: _this.props.activeView,
          onClick: _this.handleDateChange
        };
        return _this.props.navigationItem ? React10.createElement(_this.props.navigationItem, __assign7({}, navigationItemProps, { key: uniqueID }), text) : React10.createElement(CalendarNavigationItem, __assign7({}, navigationItemProps, { key: uniqueID }), text);
      };
      _this.calculateHeights = function() {
        var calendarHeight = _this.props.dom.calendarHeight;
        _this.itemHeight = _this.props.dom.navigationItemHeight || 1;
        _this.maxViewHeight = _this.props.dom.monthViewHeight;
        _this.topOffset = (calendarHeight - _this.itemHeight) / 2;
        _this.bottomOffset = calendarHeight - _this.itemHeight;
      };
      _this.handleDateChange = function(value, event) {
        var onChange = _this.props.onChange;
        if (onChange && event) {
          var args = {
            value: cloneDate(value),
            target: _this,
            nativeEvent: event && event.nativeEvent,
            syntheticEvent: event
          };
          onChange.call(void 0, args);
        }
      };
      _this.handleScrollAction = function(_a9) {
        var scrollAction = _a9.scrollAction, pageAction = _a9.pageAction;
        var skip2 = pageAction ? pageAction.skip : _this.state.skip;
        if (_this.state.skip !== skip2) {
          _this.setState({ skip: skip2 });
        }
        if (_this.list && scrollAction) {
          var translate = "translateY(".concat(scrollAction.offset, "px)");
          _this.list.style.transform = translate;
        }
      };
      _this.lastView = _this.props.activeView;
      _this.lastFocus = _this.props.focusedDate;
      var skip = _this.props.service.skip(_this.props.focusedDate, _this.props.min);
      var total = _this.props.service.total(_this.props.min, _this.props.max);
      _this.state = {
        skip: skip - _this.getTake(skip, total) > 0 ? skip : 0
      };
      return _this;
    }
    Object.defineProperty(Navigation2.prototype, "take", {
      get: function() {
        return this.props.take !== void 0 ? this.props.take : Navigation2.defaultProps.take;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.componentDidUpdate = function(_prevProps, _prevState) {
      if (this.indexToScroll !== void 0 && this.virtualization) {
        this.virtualization.scrollToIndex(this.indexToScroll);
      }
      this.lastView = this.props.activeView;
      this.lastFocus = this.props.focusedDate;
      this.indexToScroll = void 0;
    };
    Navigation2.prototype.render = function() {
      var _this = this;
      this.calculateHeights();
      var didViewChange = this.lastView !== this.props.activeView;
      var focusedDate = dateInRange(this.props.focusedDate, this.props.min, this.props.max);
      var skip = !didViewChange ? this.state.skip : this.props.service.skip(focusedDate, this.props.min);
      var total = this.props.service.total(this.props.min, this.props.max);
      var take = this.getTake(skip, total);
      var viewDate = this.props.service.addToDate(this.props.min, skip);
      var dates = this.props.service.datesList(viewDate, take);
      if (this.props.activeView !== this.lastView || !isEqual(focusedDate, this.lastFocus)) {
        this.indexToScroll = this.props.service.skip(focusedDate, this.props.min);
      }
      var navigationBody = React10.createElement(
        Virtualization,
        { skip, take: this.take, total, itemHeight: this.itemHeight, topOffset: this.topOffset, bottomOffset: this.bottomOffset, onScroll: this.props.onScroll, maxScrollDifference: this.maxViewHeight, onScrollAction: this.handleScrollAction, onMount: this.handleVirtualizationMount, tabIndex: this.props.tabIndex },
        React10.createElement("ul", { ref: function(el) {
          _this.list = el;
        }, className: "k-reset" }, dates.map(function(date2) {
          return _this.buildNavigationItem(date2);
        }))
      );
      return React10.createElement(
        "div",
        { className: "k-calendar-navigation" },
        React10.createElement("span", { className: "k-calendar-navigation-highlight" }),
        this.props.dom.didCalculate ? navigationBody : null
      );
    };
    Navigation2.prototype.getTake = function(skip, total) {
      return Math.min(total - skip, this.take);
    };
    Navigation2.propTypes = {
      activeView: PropTypes6.number.isRequired,
      focusedDate: PropTypes6.instanceOf(Date).isRequired,
      max: PropTypes6.instanceOf(Date).isRequired,
      min: PropTypes6.instanceOf(Date).isRequired,
      onChange: PropTypes6.func,
      take: PropTypes6.number,
      tabIndex: PropTypes6.number
    };
    Navigation2.defaultProps = {
      take: ITEMS_COUNT
    };
    return Navigation2;
  }(React10.Component)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/Calendar.js
var __extends11 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var virtualizationProp = function(x) {
  return x ? x.virtualization : null;
};
var calculateValue = function(min, max, stateValue, propValue) {
  if (min === void 0) {
    min = CalendarWithoutContext.defaultProps.min;
  }
  if (max === void 0) {
    max = CalendarWithoutContext.defaultProps.max;
  }
  return propValue !== void 0 ? propValue !== null && isInRange(getDate(propValue), min, max) ? propValue : null : stateValue !== null && isInRange(getDate(stateValue), min, max) ? stateValue : null;
};
var CalendarWithoutContext = (
  /** @class */
  function(_super) {
    __extends11(CalendarWithoutContext2, _super);
    function CalendarWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.scrollSyncService = null;
      _this.focusedDate = null;
      _this.cellUID = guid();
      _this.id = guid();
      _this.Navigation = null;
      _this.calendarViewList = null;
      _this._element = null;
      _this.intl = null;
      _this.service = null;
      _this.isActive = false;
      _this.didNavigationChange = false;
      _this.focus = function() {
        if (_this._element) {
          _this._element.focus();
        }
      };
      _this.shouldScroll = function() {
        return _this.didNavigationChange;
      };
      _this.handleScroll = function(event) {
        if (!_this.scrollSyncService) {
          return;
        }
        _this.scrollSyncService.sync(virtualizationProp(_this.Navigation), virtualizationProp(_this.calendarViewList), event);
      };
      _this.handleNavigationChange = function(event) {
        if (_this.props.disabled) {
          return;
        }
        _this.didNavigationChange = true;
        var focusedDate = cloneDate(event.value);
        _this.setState({ focusedDate });
      };
      _this.handleViewChange = function(_a9) {
        var view = _a9.view;
        if (_this.scrollSyncService) {
          _this.scrollSyncService.configure(view);
        }
        _this.setState({ activeView: view });
      };
      _this.handleDateChange = function(event) {
        var value2 = cloneDate(event.value);
        var focusedDate = cloneDate(event.value);
        var canNavigateDown = _this.bus.canMoveDown(_this.state.activeView);
        if (_this.props.disabled) {
          return;
        }
        if (canNavigateDown) {
          if (event.isTodayClick) {
            _this.bus.moveToBottom(_this.state.activeView);
          } else {
            _this.bus.moveDown(_this.state.activeView, event.syntheticEvent);
            _this.setState({ focusedDate });
            return;
          }
        }
        _this.setState({ value: value2, focusedDate });
        _this.valueDuringOnChange = value2;
        var onChange = _this.props.onChange;
        if (onChange) {
          var args = {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: value2,
            target: _this
          };
          onChange.call(void 0, args);
        }
        _this.valueDuringOnChange = void 0;
      };
      _this.handleFocus = function(event) {
        _this.isActive = true;
        if (!_this.calendarViewList) {
          return;
        }
        _this.calendarViewList.focusActiveDate();
        var onFocus = _this.props.onFocus;
        if (onFocus) {
          onFocus.call(void 0, event);
        }
      };
      _this.handleBlur = function(event) {
        _this.isActive = false;
        if (!_this.calendarViewList) {
          return;
        }
        _this.calendarViewList.blurActiveDate();
        var onBlur = _this.props.onBlur;
        if (onBlur) {
          onBlur.call(void 0, event);
        }
      };
      _this.handleKeyDown = function(event) {
        var keyCode = event.keyCode;
        if (!_this.focusedDate || !_this.service) {
          return;
        }
        if (keyCode === Keys.enter) {
          if (_this.value !== null && isEqualDate(_this.focusedDate, _this.value)) {
            var viewDate = dateInRange(_this.focusedDate, _this.min, _this.max);
            virtualizationProp(_this.calendarViewList).scrollToIndex(_this.service.skip(viewDate, _this.min));
          }
          var args = {
            syntheticEvent: event,
            nativeEvent: event.nativeEvent,
            value: _this.focusedDate,
            target: _this
          };
          _this.handleDateChange(args);
        } else {
          var candidate = dateInRange(_this.navigation.move(_this.focusedDate, _this.navigation.action(event), _this.state.activeView, _this.service, event), _this.min, _this.max);
          if (isEqualDate(_this.focusedDate, candidate)) {
            return;
          }
          _this.setState({ focusedDate: candidate });
        }
        event.preventDefault();
      };
      _this.handleMouseDown = function(event) {
        event.preventDefault();
      };
      _this.handleClick = function(_) {
        if (_this._element) {
          _this._element.focus({ preventScroll: true });
        }
      };
      validatePackage(packageMetadata);
      var value = calculateValue(_this.min, _this.max, _this.props.defaultValue || CalendarWithoutContext2.defaultProps.defaultValue, _this.props.value);
      _this.state = {
        value,
        activeView: viewInRange(CalendarViewEnum[props.defaultActiveView], _this.bottomView, _this.topView),
        focusedDate: dateInRange(props.focusedDate || value || getToday(), _this.min, _this.max)
      };
      _this.dom = new DOMService();
      _this.bus = new BusViewService(_this.handleViewChange);
      _this.navigation = new NavigationService(_this.bus);
      _this.oldValue = value;
      return _this;
    }
    Object.defineProperty(CalendarWithoutContext2.prototype, "element", {
      /**
       * Gets the wrapping element of the Calendar.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CalendarWithoutContext2.prototype, "value", {
      /**
       * Gets the value of the Calendar.
       */
      get: function() {
        return this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CalendarWithoutContext2.prototype, "min", {
      get: function() {
        return getDate(this.props.min !== void 0 ? this.props.min : CalendarWithoutContext2.defaultProps.min);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CalendarWithoutContext2.prototype, "max", {
      get: function() {
        return getDate(this.props.max !== void 0 ? this.props.max : CalendarWithoutContext2.defaultProps.max);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CalendarWithoutContext2.prototype, "bottomView", {
      get: function() {
        return CalendarViewEnum[this.props.bottomView !== void 0 ? this.props.bottomView : CalendarWithoutContext2.defaultProps.bottomView];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CalendarWithoutContext2.prototype, "topView", {
      get: function() {
        return CalendarViewEnum[this.props.topView !== void 0 ? this.props.topView : CalendarWithoutContext2.defaultProps.topView];
      },
      enumerable: false,
      configurable: true
    });
    CalendarWithoutContext2.prototype.componentDidMount = function() {
      var _this = this;
      setScrollbarWidth();
      Promise.resolve().then(function() {
        if (!_this._element) {
          return;
        }
        _this.dom.calculateHeights(_this._element);
        _this.scrollSyncService = new ScrollSyncService(_this.dom);
        _this.scrollSyncService.configure(_this.state.activeView);
        _this.forceUpdate();
      });
    };
    CalendarWithoutContext2.prototype.componentDidUpdate = function(_, prevState) {
      setScrollbarWidth();
      if (prevState.activeView !== this.state.activeView && this.scrollSyncService) {
        this.scrollSyncService.configure(this.state.activeView);
      }
      if (this.calendarViewList) {
        (this.isActive ? this.calendarViewList.focusActiveDate : this.calendarViewList.blurActiveDate)();
      }
      this.didNavigationChange = false;
      this.oldValue = this.value;
    };
    CalendarWithoutContext2.prototype.render = function() {
      var _this = this;
      if (this.props._ref) {
        this.props._ref(this);
      }
      var didValueChange = this.value !== null && this.oldValue !== null ? !isEqualDate(this.value, this.oldValue) : this.value !== this.oldValue;
      var activeView = viewInRange(this.state.activeView, CalendarViewEnum[this.props.bottomView !== void 0 ? this.props.bottomView : CalendarWithoutContext2.defaultProps.bottomView], CalendarViewEnum[this.props.topView !== void 0 ? this.props.topView : CalendarWithoutContext2.defaultProps.topView]);
      var value = calculateValue(this.min, this.max, this.value, this.value);
      var sanitizedValue = value ? getDate(value) : null;
      this.focusedDate = getDate(dateInRange(didValueChange && value !== null ? value : this.state.focusedDate, this.min, this.max));
      this.intl = provideIntlService(this);
      this.bus.configure(this.bottomView, this.topView);
      this.service = this.bus.service(activeView, this.intl);
      var rootClassNames = classNames("k-widget k-calendar k-calendar-infinite", {
        "k-disabled": this.props.disabled,
        "k-week-number": this.props.weekNumber
      }, this.props.className);
      var calendarBody = [this.props.navigation && React11.createElement(Navigation, { key: 0, ref: function(el) {
        _this.Navigation = el;
      }, activeView: this.state.activeView, focusedDate: this.focusedDate, min: this.min, max: this.max, onScroll: this.handleScroll, onChange: this.handleNavigationChange, service: this.service, dom: this.dom, navigationItem: this.props.navigationItem, tabIndex: this.props.tabIndex }), React11.createElement(ViewList, { key: 1, ref: function(el) {
        _this.calendarViewList = el;
      }, activeView: this.state.activeView, focusedDate: this.focusedDate, min: this.min, max: this.max, bus: this.bus, shouldScroll: this.shouldScroll, onScroll: this.handleScroll, service: this.service, cell: this.props.cell, weekCell: this.props.weekCell, dom: this.dom, smoothScroll: this.props.smoothScroll, showWeekNumbers: this.props.weekNumber, onChange: this.handleDateChange, value: sanitizedValue, cellUID: this.cellUID, headerTitle: this.props.headerTitle, tabIndex: this.props.tabIndex })];
      return React11.createElement("div", { ref: function(el) {
        _this._element = el;
      }, className: rootClassNames, id: this.props.id || this.id, "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy, "aria-disabled": this.props.disabled, tabIndex: !this.props.disabled ? this.props.tabIndex || 0 : void 0, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, onMouseDown: this.handleMouseDown, onClick: this.handleClick }, calendarBody);
    };
    CalendarWithoutContext2.displayName = "Calendar";
    CalendarWithoutContext2.propTypes = {
      className: PropTypes7.string,
      defaultActiveView: PropTypes7.oneOf(["month", "year", "decade", "century"]),
      defaultValue: PropTypes7.instanceOf(Date),
      disabled: PropTypes7.bool,
      focusedDate: PropTypes7.instanceOf(Date),
      id: PropTypes7.string,
      ariaLabelledBy: PropTypes7.string,
      ariaDescribedBy: PropTypes7.string,
      max: PropTypes7.instanceOf(Date),
      min: PropTypes7.instanceOf(Date),
      navigation: PropTypes7.bool,
      smoothScroll: PropTypes7.bool,
      onBlur: PropTypes7.func,
      onChange: PropTypes7.func,
      onFocus: PropTypes7.func,
      tabIndex: PropTypes7.number,
      value: PropTypes7.instanceOf(Date),
      weekNumber: PropTypes7.bool,
      topView: function(props, propName, componentName) {
        var prop = props[propName];
        var bottomView = props.bottomView;
        if (prop && bottomView && CalendarViewEnum[prop] < CalendarViewEnum[bottomView]) {
          return new Error("Invalid prop + ".concat(propName, " suplied to ").concat(componentName, ".\n                    ").concat(propName, " can not be smaller than bottomView.\n                    "));
        }
        return null;
      },
      bottomView: function(props, propName, componentName) {
        var prop = props[propName];
        var topView = props.topView;
        if (prop && topView && CalendarViewEnum[prop] > CalendarViewEnum[topView]) {
          return new Error("Invalid prop + ".concat(propName, " suplied to ").concat(componentName, ".\n                    ").concat(propName, " can not be bigger than topView.\n                    "));
        }
        return null;
      }
    };
    CalendarWithoutContext2.defaultProps = {
      disabled: false,
      min: MIN_DATE2,
      max: MAX_DATE2,
      navigation: true,
      defaultActiveView: "month",
      defaultValue: null,
      smoothScroll: true,
      topView: "century",
      bottomView: "month"
    };
    return CalendarWithoutContext2;
  }(React11.Component)
);
var CalendarPropsContext = createPropsContext();
var Calendar = withPropsContext(CalendarPropsContext, CalendarWithoutContext);
Calendar.displayName = "KendoReactCalendar";
registerForIntl(CalendarWithoutContext);

// node_modules/@progress/kendo-react-dateinputs/dist/es/dateinput/DateInput.js
var React12 = __toESM(require_react());
var PropTypes8 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/dateinput/models/mask.js
var Mask = (
  /** @class */
  function() {
    function Mask2() {
      this.symbols = "";
      this.partMap = [];
    }
    return Mask2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/dateinput/utils.js
var defaultFormat = "d";
var defaultFormatPlaceholder = "wide";
var approximateStringMatching = function(oldTextOrigin, oldFormat, newTextOrigin, selectionStart) {
  var oldTextSeparator = oldTextOrigin[selectionStart + oldTextOrigin.length - newTextOrigin.length];
  var oldText = oldTextOrigin.substring(0, selectionStart + oldTextOrigin.length - newTextOrigin.length);
  var newText = newTextOrigin.substring(0, selectionStart);
  var diff = [];
  if (oldText === newText && selectionStart > 0) {
    diff.push([oldFormat[selectionStart - 1], newText[selectionStart - 1]]);
    return diff;
  }
  if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {
    var deletedSymbol = "";
    if (newText.length === 1) {
      diff.push([oldFormat[0], newText[0]]);
    }
    for (var i = newText.length; i < oldText.length; i++) {
      if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== "_") {
        deletedSymbol = oldFormat[i];
        diff.push([deletedSymbol, ""]);
      }
    }
    return diff;
  }
  if (newText.indexOf(oldText) === 0 || oldFormat[selectionStart - 1] === "_") {
    var symbol = oldFormat[0];
    for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {
      if (oldFormat[i] !== "_") {
        symbol = oldFormat[i];
        break;
      }
    }
    return [[symbol, newText[selectionStart - 1]]];
  }
  if (newText[newText.length - 1] === " " || newText[newText.length - 1] === oldTextSeparator) {
    return [[oldFormat[selectionStart - 1], "_"]];
  }
  return [[oldFormat[selectionStart - 1], newText[selectionStart - 1]]];
};
var dateSymbolMap = function(map, part) {
  map[part.pattern[0]] = part.type;
  return map;
};
var isInRange2 = function(candidate, min, max) {
  return candidate === null || !(min && min > candidate || max && max < candidate);
};
var wrapperClasses = ["k-widget", "k-dateinput"];

// node_modules/@progress/kendo-react-dateinputs/dist/es/dateinput/models/kendo-date.js
var KendoDate = (
  /** @class */
  function() {
    function KendoDate2(intlProvider, formatPlaceholder, format) {
      this.year = true;
      this.month = true;
      this.date = true;
      this.hours = true;
      this.minutes = true;
      this.seconds = true;
      this.milliseconds = true;
      this.leadingZero = null;
      this.typedMonthPart = "";
      this.knownParts = "adHhmMsEy";
      this.symbols = {
        "E": "E",
        "H": "H",
        "M": "M",
        "a": "a",
        "d": "d",
        "h": "h",
        "m": "m",
        "s": "s",
        "y": "y"
      };
      this._value = getDate(new Date());
      this.intlProvider = intlProvider;
      this.formatPlaceholder = formatPlaceholder;
      this.format = format;
      this.monthNames = this.allFormatedMonths();
    }
    Object.defineProperty(KendoDate2.prototype, "intl", {
      get: function() {
        return this.intlProvider();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(KendoDate2.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    KendoDate2.prototype.setValue = function(value) {
      if (!value) {
        this._value = getDate(new Date());
        this.modifyExisting(false);
      } else if (!isEqual(value, this._value)) {
        this._value = cloneDate(value);
        this.modifyExisting(true);
      }
    };
    KendoDate2.prototype.hasValue = function() {
      var _this = this;
      var pred = function(a, p) {
        return a || p.type !== "literal" && p.type !== "dayperiod" && _this.getExisting(p.pattern[0]);
      };
      return this.intl.splitDateFormat(this.format).reduce(pred, false);
    };
    KendoDate2.prototype.getDateObject = function() {
      for (var i = 0; i < this.knownParts.length; i++) {
        if (!this.getExisting(this.knownParts[i])) {
          return null;
        }
      }
      return cloneDate(this.value);
    };
    KendoDate2.prototype.getTextAndFormat = function() {
      return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));
    };
    KendoDate2.prototype.modifyExisting = function(value) {
      var sampleFormat = this.dateFormatString(this.value, this.format).symbols;
      for (var i = 0; i < sampleFormat.length; i++) {
        this.setExisting(sampleFormat[i], value);
      }
    };
    KendoDate2.prototype.getExisting = function(symbol) {
      switch (symbol) {
        case "y":
          return this.year;
        case "M":
        case "L":
          return this.month;
        case "d":
          return this.date;
        case "E":
          return this.date && this.month && this.year;
        case "h":
        case "H":
          return this.hours;
        case "m":
          return this.minutes;
        case "s":
          return this.seconds;
        default:
          return true;
      }
    };
    KendoDate2.prototype.setExisting = function(symbol, value) {
      switch (symbol) {
        case "y":
          this.year = value;
          if (value === false) {
            this._value.setFullYear(2e3);
          }
          break;
        case "M":
          this.month = value;
          if (value === false) {
            this._value.setMonth(0);
          }
          break;
        case "d":
          this.date = value;
          break;
        case "h":
        case "H":
          this.hours = value;
          break;
        case "m":
          this.minutes = value;
          break;
        case "s":
          this.seconds = value;
          break;
        default:
          return;
      }
    };
    KendoDate2.prototype.modifyPart = function(symbol, offset2) {
      var newValue = cloneDate(this.value);
      switch (symbol) {
        case "y":
          newValue.setFullYear(newValue.getFullYear() + offset2);
          break;
        case "M":
          newValue = addMonths(this.value, offset2);
          break;
        case "d":
        case "E":
          newValue.setDate(newValue.getDate() + offset2);
          break;
        case "h":
        case "H":
          newValue.setHours(newValue.getHours() + offset2);
          break;
        case "m":
          newValue.setMinutes(newValue.getMinutes() + offset2);
          break;
        case "s":
          newValue.setSeconds(newValue.getSeconds() + offset2);
          break;
        case "a":
          newValue.setHours(newValue.getHours() + 12 * offset2);
          break;
        default:
          break;
      }
      this.setExisting(symbol, true);
      this._value = newValue;
    };
    KendoDate2.prototype.parsePart = function(symbol, currentChar) {
      var _a9;
      this.resetLeadingZero();
      if (!currentChar) {
        this.setExisting(symbol, false);
        return { value: null };
      }
      var baseDate = this.intl.formatDate(this.value, this.format);
      var dateParts = this.dateFormatString(this.value, this.format);
      var baseFormat = dateParts.symbols;
      var replaced = false;
      var prefix = "";
      var current = "";
      var suffix = "";
      for (var i = 0; i < baseDate.length; i++) {
        if (baseFormat[i] === symbol) {
          current += this.getExisting(symbol) ? baseDate[i] : "0";
          replaced = true;
        } else if (!replaced) {
          prefix += baseDate[i];
        } else {
          suffix += baseDate[i];
        }
      }
      var parsedDate = null;
      var month = this.matchMonth(currentChar);
      while (current.length > 0 && current.charAt(0) === "0") {
        current = current.slice(1);
      }
      if (current.length >= 4) {
        current = "";
      }
      for (var i = 0; i < 2; i++) {
        var middle = current + currentChar;
        var middleNumber = parseInt(middle, 10);
        parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);
        if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {
          if (symbol === "M" && !month) {
            var monthNumber = middleNumber - 1;
            if (monthNumber > -1 && monthNumber < 12) {
              parsedDate = cloneDate(this.value);
              parsedDate.setMonth(monthNumber);
              if (parsedDate.getMonth() !== monthNumber) {
                parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
              }
            }
          }
          if (symbol === "y") {
            parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);
            if (this.date && parsedDate.getDate() !== this.value.getDate()) {
              parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
            }
          }
        }
        if (parsedDate) {
          this._value = parsedDate;
          this.setExisting(symbol, true);
          return { value: this.value };
        }
        current = "";
      }
      if (month) {
        parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);
        if (parsedDate) {
          this._value = parsedDate;
          this.setExisting(symbol, true);
          return { value: this.value };
        }
      }
      if (currentChar === "0") {
        this.leadingZero = !this.isAbbrMonth(dateParts.partMap, symbol) ? (_a9 = {}, _a9[symbol] = true, _a9) : null;
        this.setExisting(symbol, false);
      }
      return { value: null };
    };
    KendoDate2.prototype.symbolMap = function(symbol) {
      return this.intl.splitDateFormat(this.format).reduce(dateSymbolMap, {})[symbol];
    };
    KendoDate2.prototype.resetLeadingZero = function() {
      var hasLeadingZero = this.leadingZero !== null;
      this.leadingZero = null;
      return hasLeadingZero;
    };
    KendoDate2.prototype.isAbbrMonth = function(parts, symbol) {
      var pattern = this.partPattern(parts, symbol);
      return pattern.type === "month" && pattern.names;
    };
    KendoDate2.prototype.partPattern = function(parts, symbol) {
      return parts.filter(function(part) {
        return part.pattern.indexOf(symbol) !== -1;
      })[0];
    };
    KendoDate2.prototype.matchMonth = function(typedChar) {
      this.typedMonthPart += typedChar.toLowerCase();
      if (this.monthNames.length === 0) {
        return "";
      }
      while (this.typedMonthPart.length > 0) {
        for (var i = 0; i < this.monthNames.length; i++) {
          if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {
            return this.monthNames[i];
          }
        }
        var monthAsNum = parseInt(this.typedMonthPart, 10);
        if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart) {
          return this.monthNames[monthAsNum - 1];
        }
        this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);
      }
      return "";
    };
    KendoDate2.prototype.allFormatedMonths = function() {
      var dateFormatParts = this.intl.splitDateFormat(this.format);
      for (var i = 0; i < dateFormatParts.length; i++) {
        if (dateFormatParts[i].type === "month" && dateFormatParts[i].names) {
          return this.intl.dateFormatNames(dateFormatParts[i].names);
        }
      }
      return [];
    };
    KendoDate2.prototype.dateFormatString = function(date2, format) {
      var dateFormatParts = this.intl.splitDateFormat(format);
      var parts = [];
      var partMap = [];
      for (var i = 0; i < dateFormatParts.length; i++) {
        var partLength = this.intl.formatDate(date2, { pattern: dateFormatParts[i].pattern }).length;
        while (partLength > 0) {
          parts.push(this.symbols[dateFormatParts[i].pattern[0]] || "_");
          partMap.push(dateFormatParts[i]);
          partLength--;
        }
      }
      var returnValue = new Mask();
      returnValue.symbols = parts.join("");
      returnValue.partMap = partMap;
      return returnValue;
    };
    KendoDate2.prototype.merge = function(text, mask) {
      var resultText = "";
      var resultFormat = "";
      var format = mask.symbols;
      for (var r = format.length - 1; r >= 0; r--) {
        if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {
          resultText = text[r] + resultText;
          resultFormat = format[r] + resultFormat;
        } else {
          var currentSymbol = format[r];
          while (r >= 0 && currentSymbol === format[r]) {
            r--;
          }
          r++;
          if (this.leadingZero && this.leadingZero[currentSymbol]) {
            resultText = "0" + resultText;
          } else {
            resultText = this.dateFieldName(mask.partMap[r]) + resultText;
          }
          while (resultFormat.length < resultText.length) {
            resultFormat = format[r] + resultFormat;
          }
        }
      }
      return { text: resultText, format: resultFormat };
    };
    KendoDate2.prototype.dateFieldName = function(part) {
      var formatPlaceholder = this.formatPlaceholder || "wide";
      if (formatPlaceholder[part.type]) {
        return formatPlaceholder[part.type];
      }
      if (formatPlaceholder === "formatPattern") {
        return part.pattern;
      }
      return this.intl.dateFieldName(Object.assign(part, { nameType: formatPlaceholder }));
    };
    return KendoDate2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/models/TimePart.js
var TIME_PART = {
  dayperiod: "dayperiod",
  hour: "hour",
  millisecond: "millisecond",
  minute: "minute",
  second: "second"
};

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/utils.js
var setter = function(method) {
  return function(date2, value) {
    var clone = cloneDate(date2);
    clone[method](value);
    return clone;
  };
};
var defaultGetters = [
  { type: TIME_PART.hour, getter: function(value) {
    return value.getHours();
  } },
  { type: TIME_PART.minute, getter: function(value) {
    return value.getMinutes();
  } },
  { type: TIME_PART.second, getter: function(value) {
    return value.getSeconds();
  } },
  { type: TIME_PART.millisecond, getter: function(value) {
    return value.getMilliseconds();
  } }
];
var left = function(getter) {
  return function(origin, _) {
    return getter(origin);
  };
};
var right = function(getter) {
  return function(_, candidate) {
    return getter(candidate);
  };
};
var convertToObject = function(parts) {
  return parts.reduce(function(obj, p) {
    obj[p.type] = p.type;
    return obj;
  }, {});
};
var getterByPart = function(parts) {
  return function(g) {
    return parts[g.type] ? right(g.getter) : left(g.getter);
  };
};
var gettersFactory = function(getters2) {
  return function(parts) {
    return getters2.map(getterByPart(convertToObject(parts)));
  };
};
var snapValue = function(getter, step, min, type) {
  return function(date2) {
    var value = getter(date2);
    var minValue = getter(min);
    if (type === "hour") {
      return value - (value - minValue) % step;
    }
    if (date2.getTime() <= min.getTime() && value !== 0 && value <= minValue) {
      return Math.ceil(value / step) * step;
    }
    return value - value % step;
  };
};
var snappersFactory = function(getters2) {
  return function(steps, min) {
    return getters2.map(function(g) {
      var step = Math.floor(steps[g.type]);
      return step ? snapValue(g.getter, step, min, g.type) : g.getter;
    });
  };
};
var generateGetters = gettersFactory(defaultGetters);
var generateSnappers = snappersFactory(defaultGetters);
var valueMerger = function(getters2) {
  return function(origin, candidate) {
    origin.setHours.apply(origin, getters2.map(function(g) {
      return g(origin, candidate);
    }));
    return origin;
  };
};
var snapTime = function(snappers) {
  return function(candidate) {
    var date2 = cloneDate(candidate);
    date2.setHours.apply(date2, snappers.map(function(s) {
      return s(date2);
    }));
    return date2;
  };
};
var setHours = setter("setHours");
var setMinutes = setter("setMinutes");
var setSeconds = setter("setSeconds");
var getNow = function() {
  return new Date();
};
var range2 = function(start2, end2, step) {
  if (step === void 0) {
    step = 1;
  }
  var result = [];
  for (var i = start2; i < end2; i = i + step) {
    result.push(i);
  }
  return result;
};
var normalizeTimes = function(candidate, min, max) {
  return {
    candidateValue: setTime(MIDNIGHT_DATE, candidate),
    maxValue: addDays(setTime(MIDNIGHT_DATE, max), min.getHours() < max.getHours() ? 0 : 1),
    minValue: setTime(MIDNIGHT_DATE, min)
  };
};
var timeInRange = function(candidate, min, max) {
  if (!candidate || !min || !max) {
    return candidate;
  }
  var _a9 = normalizeTimes(candidate, min, max), candidateValue = _a9.candidateValue, minValue = _a9.minValue, maxValue = _a9.maxValue;
  if (candidateValue < minValue) {
    return setTime(candidate, min);
  }
  if (candidateValue > maxValue) {
    return setTime(candidate, max);
  }
  return candidate;
};
var isInTimeRange = function(candidate, min, max) {
  if (!candidate || !min || !max) {
    return true;
  }
  var _a9 = normalizeTimes(candidate, min, max), candidateValue = _a9.candidateValue, minValue = _a9.minValue, maxValue = _a9.maxValue;
  return minValue <= candidateValue && candidateValue <= maxValue;
};
var isInRange3 = function(candidate, min, max) {
  if (candidate === null) {
    return true;
  }
  var _a9 = normalizeTimes(candidate, min, max), candidateValue = _a9.candidateValue, minValue = _a9.minValue, maxValue = _a9.maxValue;
  return minValue <= candidateValue && candidateValue <= maxValue;
};
var isSmallerThanMin = function(val, min) {
  if (val === null || min === null) {
    return false;
  }
  var normalizedValue = setTime(MIDNIGHT_DATE, val);
  var normalizedMin = setTime(MIDNIGHT_DATE, min);
  return normalizedValue.getTime() < normalizedMin.getHours();
};
var isBiggerThanMax = function(val, max) {
  if (val === null || max === null) {
    return false;
  }
  var normalizedValue = setTime(MIDNIGHT_DATE, val);
  var normalizedMax = setTime(MIDNIGHT_DATE, max);
  return normalizedMax.getTime() < normalizedValue.getHours();
};

// node_modules/@progress/kendo-react-dateinputs/dist/es/dateinput/DateInput.js
var __extends12 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var VALIDATION_MESSAGE = "Please enter a valid value!";
var DateInputWithoutContext = (
  /** @class */
  function(_super) {
    __extends12(DateInputWithoutContext2, _super);
    function DateInputWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.kendoDate = null;
      _this.currentFormat = "";
      _this.paste = false;
      _this._element = null;
      _this._wrapper = null;
      _this._inputId = guid();
      _this._lastSelectedSymbol = "";
      _this.focus = function() {
        if (_this._element) {
          _this._element.focus();
        }
      };
      _this.setValidity = function() {
        if (_this.element && _this.element.setCustomValidity) {
          _this.element.setCustomValidity(_this.validity.valid ? "" : _this.props.validationMessage || DateInputWithoutContext2.defaultProps.validationMessage);
        }
      };
      _this.updateOnPaste = function(event) {
        if (!_this.element || !_this.kendoDate) {
          return;
        }
        var value = provideIntlService(_this).parseDate(_this.element.value, _this.props.format) || _this.value;
        var oldValue = _this.value;
        _this.kendoDate.setValue(value);
        _this.triggerChange(event, oldValue);
      };
      _this.spinnersMouseDown = function(event) {
        event.preventDefault();
        if (_this.element && document.activeElement !== _this.element) {
          _this.element.focus({ preventScroll: true });
        }
      };
      _this.handlePaste = function() {
        _this.paste = true;
      };
      _this.elementChange = function(event) {
        if (!_this.element || !_this.kendoDate) {
          return;
        }
        if (_this.paste) {
          _this.updateOnPaste(event);
          _this.paste = false;
          return;
        }
        var _a9 = _this.kendoDate.getTextAndFormat(), text = _a9.text, currentFormat = _a9.format;
        _this.currentFormat = currentFormat;
        var dateBeforeChange = _this.value;
        var diff = approximateStringMatching(text, _this.currentFormat, _this.element.value, _this.selection.start);
        var navigationOnly = diff.length === 1 && diff[0][1] === "_";
        if (!navigationOnly) {
          for (var i = 0; i < diff.length; i++) {
            _this.kendoDate.parsePart(diff[i][0], diff[i][1]);
          }
        }
        if (diff.length && diff[0][0] !== "_") {
          _this.setSelection(_this.selectionBySymbol(diff[0][0]));
        }
        if (navigationOnly) {
          _this.switchDateSegment(1);
        }
        _this.triggerChange(event, dateBeforeChange);
      };
      _this.elementClick = function(_) {
        _this.setSelection(_this.selectionByIndex(_this.selection.start));
      };
      _this.nativeWheel = function(event) {
        if (document.activeElement === _this.element) {
          event.preventDefault();
        }
      };
      _this.wheel = function(event) {
        if (document.activeElement !== _this.element) {
          return;
        }
        if (event.nativeEvent.deltaY < 0) {
          _this.increasePart(event);
        }
        if (event.nativeEvent.deltaY > 0) {
          _this.decreasePart(event);
        }
      };
      _this.increasePart = function(event) {
        _this.modifyDateSegmentValue(1, event);
      };
      _this.decreasePart = function(event) {
        _this.modifyDateSegmentValue(-1, event);
      };
      _this.elementKeyDown = function(event) {
        if (event.altKey) {
          return;
        }
        switch (event.keyCode) {
          case 37:
            _this.switchDateSegment(-1);
            break;
          case 38:
            _this.modifyDateSegmentValue(1, event);
            break;
          case 39:
            _this.switchDateSegment(1);
            break;
          case 40:
            _this.modifyDateSegmentValue(-1, event);
            break;
          default:
            return;
        }
        event.preventDefault();
      };
      _this.elementOnFocus = function(_) {
        if (_this.wrapper) {
          _this.wrapper.classList.add("k-focus");
        }
        _this.setState({ focused: true });
      };
      _this.elementOnBlur = function(_) {
        if (_this.wrapper) {
          _this.wrapper.classList.remove("k-focus");
        }
        _this.setState({ focused: false });
      };
      validatePackage(packageMetadata);
      _this.state = {
        focused: false
      };
      return _this;
    }
    DateInputWithoutContext2.prototype.componentDidMount = function() {
      this.setValidity();
      if (this.wrapper) {
        this.wrapper.addEventListener("wheel", this.nativeWheel, { passive: false });
      }
    };
    DateInputWithoutContext2.prototype.componentDidUpdate = function(_, prevState) {
      if (this._lastSelectedSymbol && prevState.focused === this.state.focused) {
        this.setSelection(this.selectionBySymbol(this._lastSelectedSymbol));
      } else if (this.props.placeholder !== void 0 && this.selection.start === this.selection.end) {
        this.setSelection({ start: 0, end: this.currentFormat.length });
      }
      this.setValidity();
    };
    DateInputWithoutContext2.prototype.componentWillUnmount = function() {
      if (this.wrapper) {
        this.wrapper.removeEventListener("wheel", this.nativeWheel);
      }
    };
    DateInputWithoutContext2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, _b3 = _a9.size, size = _b3 === void 0 ? DateInputWithoutContext2.defaultProps.size : _b3, _c2 = _a9.fillMode, fillMode = _c2 === void 0 ? DateInputWithoutContext2.defaultProps.fillMode : _c2, _d = _a9.rounded, rounded = _d === void 0 ? DateInputWithoutContext2.defaultProps.rounded : _d;
      if (this.props._ref) {
        this.props._ref.current = this;
      }
      var localizationService = provideLocalizationService(this);
      var props = __assign8(__assign8({}, DateInputWithoutContext2.defaultProps), this.props);
      var name = props.name, label = props.label, id = props.id;
      var currentText = this.text;
      var text = currentText === this.props.placeholder ? "" : currentText;
      var placeholder = currentText === this.props.placeholder ? currentText : void 0;
      var inputId = id || this._inputId;
      var isValid = !this.validityStyles || this.validity.valid;
      var wrapperClassesInstance = __spreadArray3([], wrapperClasses, true);
      if (this.props.className) {
        wrapperClassesInstance.push(this.props.className);
      }
      var dateinput = React12.createElement(AsyncFocusBlur, { onFocus: this.elementOnFocus, onBlur: this.elementOnBlur }, function(_a10) {
        var _b4;
        var onFocus = _a10.onFocus, onBlur = _a10.onBlur;
        return React12.createElement(
          "span",
          { ref: function(span) {
            _this._wrapper = span;
          }, style: !label ? { width: _this.props.width } : void 0, dir: _this.props.dir, className: classNames("k-dateinput", "k-input", (_b4 = {}, _b4["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _b4["k-input-".concat(fillMode)] = fillMode, _b4["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _b4["k-invalid"] = !isValid, _b4["k-required"] = _this.required, _b4["k-disabled"] = _this.props.disabled, _b4), _this.props.className), onFocus, onBlur },
          React12.createElement("input", { role: _this.props.ariaRole || "textbox", tabIndex: _this.props.tabIndex, disabled: _this.props.disabled, title: _this.props.title !== void 0 ? _this.props.title : currentText, type: "text", spellCheck: false, autoComplete: "off", autoCorrect: "off", className: "k-input-inner", id: inputId, "aria-label": _this.props.ariaLabel, "aria-labelledby": _this.props.ariaLabelledBy, "aria-describedby": _this.props.ariaDescribedBy, "aria-haspopup": _this.props.ariaHasPopup, "aria-disabled": _this.props.disabled, "aria-expanded": _this.props.ariaExpanded, "aria-controls": _this.props.ariaControls, onWheel: _this.wheel, onClick: _this.elementClick, onInput: _this.elementChange, onPaste: _this.handlePaste, onKeyDown: _this.elementKeyDown, onChange: noop, value: text, placeholder, name, ref: function(input) {
            return _this._element = input;
          } }),
          _this.props.children,
          _this.props.spinners && React12.createElement(
            "span",
            { className: "k-input-spinner k-spin-button", onMouseDown: _this.spinnersMouseDown },
            React12.createElement(Button, { tabIndex: -1, type: "button", rounded: null, className: "k-spinner-increase", icon: "caret-alt-up", svgIcon: caretAltUpIcon, "aria-label": localizationService.toLanguageString(increaseValue, messages[increaseValue]), title: localizationService.toLanguageString(increaseValue, messages[increaseValue]), onClick: _this.increasePart }),
            React12.createElement(Button, { tabIndex: -1, type: "button", rounded: null, className: "k-spinner-decrease", icon: "caret-alt-down", svgIcon: caretAltDownIcon, "aria-label": localizationService.toLanguageString(decreaseValue, messages[decreaseValue]), title: localizationService.toLanguageString(decreaseValue, messages[decreaseValue]), onClick: _this.decreasePart })
          )
        );
      });
      return label ? React12.createElement(FloatingLabel, { label, editorId: inputId, editorValue: currentText, editorValid: isValid, editorDisabled: this.props.disabled, children: dateinput, style: { width: this.props.width } }) : dateinput;
    };
    Object.defineProperty(DateInputWithoutContext2.prototype, "value", {
      /* Public Getters */
      /**
       * Gets the value of the DateInput.
       */
      get: function() {
        if (this.valueDuringOnChange !== void 0) {
          return this.valueDuringOnChange;
        }
        return this.kendoDate && this.kendoDate.getDateObject();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the DateInput.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : DateInputWithoutContext2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : DateInputWithoutContext2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "text", {
      /**
       * @hidden
       */
      get: function() {
        var props = __assign8(__assign8({}, DateInput.defaultProps), this.props);
        var _a9 = props.formatPlaceholder, formatPlaceholder = _a9 === void 0 ? DateInputWithoutContext2.defaultProps.formatPlaceholder : _a9, _b3 = props.format, format = _b3 === void 0 ? DateInputWithoutContext2.defaultProps.format : _b3, value = props.value, defaultValue = props.defaultValue;
        if (this.kendoDate === null) {
          this.kendoDate = new KendoDate(this.intl.bind(this), formatPlaceholder, format);
          this.kendoDate.setValue(value || defaultValue || null);
        } else {
          this.kendoDate.format = format;
          this.kendoDate.formatPlaceholder = formatPlaceholder;
        }
        if (value !== void 0 && this.value !== value) {
          this.kendoDate.setValue(value);
        }
        var _c2 = this.kendoDate.getTextAndFormat(), currentText = _c2.text, currentFormat = _c2.format;
        this.currentFormat = currentFormat;
        return props.placeholder !== null && props.placeholder !== void 0 && !this.state.focused && !this.kendoDate.hasValue() ? props.placeholder : currentText;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the DateInput is set.
       */
      get: function() {
        var inRange2 = isInRange2(this.value, this.min, this.max) && isInTimeRange(this.value, this.props.minTime, this.props.maxTime);
        var customError = this.props.validationMessage !== void 0;
        var isValid = (!this.required || this.value !== null) && inRange2;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          rangeOverflow: this.value && this.max.getTime() < this.value.getTime() || false,
          rangeUnderflow: this.value && this.value.getTime() < this.min.getTime() || false,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "element", {
      /**
       * Gets the element of the DateInput.
       *
       * @return - An `HTMLInputElement`.
       *
       * @example
       * ```jsx
       * class App extends React.Component {
       *     constructor(props) {
       *         super(props);
       *     }
       *     element = null;
       *     render() {
       *         return (
       *             <div>
       *                 <DateInput
       *                     ref={(dateInput) =>
       *                         this.element = dateInput ? dateInput.element : null}
       *                 />
       *                 <button onClick={() => console.log(this.element)}>console.log the element</button>
       *             </div>
       *         );
       *     }
       * }
       *
       * ReactDOM.render(
       *     <App />,
       *     document.getElementsByTagName('my-app')[0]
       * );
       * ```
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "validityStyles", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : DateInputWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : DateInputWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateInputWithoutContext2.prototype, "wrapper", {
      /**
       * @hidden
       */
      get: function() {
        return this._wrapper;
      },
      enumerable: false,
      configurable: true
    });
    DateInputWithoutContext2.prototype.intl = function() {
      return provideIntlService(this);
    };
    Object.defineProperty(DateInputWithoutContext2.prototype, "selection", {
      /*  end handlers */
      get: function() {
        var returnValue = { start: 0, end: 0 };
        if (this.element !== null && this.element.selectionStart !== void 0) {
          returnValue = { start: this.element.selectionStart, end: this.element.selectionEnd };
        }
        return returnValue;
      },
      enumerable: false,
      configurable: true
    });
    DateInputWithoutContext2.prototype.setSelection = function(selection) {
      var _this = this;
      this._lastSelectedSymbol = this.currentFormat[selection.start];
      window.requestAnimationFrame(function() {
        if (_this.element && document.activeElement === _this.element) {
          _this.element.setSelectionRange(selection.start, selection.end);
        }
      });
    };
    DateInputWithoutContext2.prototype.triggerChange = function(event, oldValue) {
      this.valueDuringOnChange = this.value;
      this.forceUpdate();
      if (this.props.onChange && !isEqual(oldValue, this.value)) {
        this.props.onChange.call(void 0, {
          syntheticEvent: event,
          nativeEvent: event.nativeEvent,
          value: this.value,
          target: this
          // inRange: this.props.min && this.props.max ? isInRange(value, this.props.min, this.props.max) : true
        });
      }
      this.valueDuringOnChange = void 0;
    };
    DateInputWithoutContext2.prototype.selectionBySymbol = function(symbol) {
      var start2 = -1;
      var end2 = 0;
      for (var i = 0; i < this.currentFormat.length; i++) {
        if (this.currentFormat[i] === symbol) {
          end2 = i + 1;
          if (start2 === -1) {
            start2 = i;
          }
        }
      }
      if (start2 < 0) {
        start2 = 0;
      }
      return { start: start2, end: end2 };
    };
    DateInputWithoutContext2.prototype.selectionByIndex = function(index) {
      var selection = { start: index, end: index };
      for (var i = index, j = index - 1; i < this.currentFormat.length || j >= 0; i++, j--) {
        if (i < this.currentFormat.length && this.currentFormat[i] !== "_") {
          selection = this.selectionBySymbol(this.currentFormat[i]);
          break;
        }
        if (j >= 0 && this.currentFormat[j] !== "_") {
          selection = this.selectionBySymbol(this.currentFormat[j]);
          break;
        }
      }
      return selection;
    };
    DateInputWithoutContext2.prototype.switchDateSegment = function(offset2) {
      var _a9 = this.selection, selectionStart = _a9.start, selectionEnd = _a9.end;
      if (selectionStart < selectionEnd && this.currentFormat[selectionStart] !== this.currentFormat[selectionEnd - 1]) {
        this.setSelection(this.selectionByIndex(offset2 > 0 ? selectionStart : selectionEnd - 1));
        return;
      }
      var previousFormatSymbol = this.currentFormat[selectionStart];
      var a = selectionStart + offset2;
      while (a > 0 && a < this.currentFormat.length) {
        if (this.currentFormat[a] !== previousFormatSymbol && this.currentFormat[a] !== "_") {
          break;
        }
        a += offset2;
      }
      if (this.currentFormat[a] === "_") {
        return;
      }
      var b = a;
      while (b >= 0 && b < this.currentFormat.length) {
        if (this.currentFormat[b] !== this.currentFormat[a]) {
          break;
        }
        b += offset2;
      }
      if (a > b && (b + 1 !== selectionStart || a + 1 !== selectionEnd)) {
        this.setSelection({ start: b + 1, end: a + 1 });
      } else if (a < b && (a !== selectionStart || b !== selectionEnd)) {
        this.setSelection({ start: a, end: b });
      }
    };
    DateInputWithoutContext2.prototype.modifyDateSegmentValue = function(offset2, event) {
      if (!this.kendoDate) {
        return;
      }
      var oldValue = this.value;
      var symbol = this.currentFormat[this.selection.start];
      var currentStepSymbol = this.kendoDate.symbolMap(symbol);
      var step = ((this.props.steps || {})[currentStepSymbol] || 1) * offset2;
      this.kendoDate.modifyPart(symbol, step);
      this.triggerChange(event, oldValue);
    };
    DateInputWithoutContext2.displayName = "DateInput";
    DateInputWithoutContext2.propTypes = {
      value: PropTypes8.instanceOf(Date),
      format: PropTypes8.oneOfType([
        PropTypes8.string,
        PropTypes8.shape({
          skeleton: PropTypes8.string,
          pattern: PropTypes8.string,
          date: PropTypes8.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes8.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes8.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes8.oneOf(["narrow", "short", "long"]),
          year: PropTypes8.oneOf(["numeric", "2-digit"]),
          month: PropTypes8.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes8.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes8.oneOf(["narrow", "short", "long"]),
          hour: PropTypes8.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes8.bool,
          minute: PropTypes8.oneOf(["numeric", "2-digit"]),
          second: PropTypes8.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes8.oneOf(["short", "long"])
        })
      ]),
      formatPlaceholder: PropTypes8.oneOfType([
        PropTypes8.oneOf(["wide", "narrow", "short", "formatPattern"]),
        PropTypes8.shape({
          year: PropTypes8.string,
          month: PropTypes8.string,
          day: PropTypes8.string,
          hour: PropTypes8.string,
          minute: PropTypes8.string,
          second: PropTypes8.string
        })
      ]),
      width: PropTypes8.oneOfType([
        PropTypes8.string,
        PropTypes8.number
      ]),
      tabIndex: PropTypes8.number,
      title: PropTypes8.string,
      steps: PropTypes8.shape({
        year: PropTypes8.number,
        month: PropTypes8.number,
        day: PropTypes8.number,
        hour: PropTypes8.number,
        minute: PropTypes8.number,
        second: PropTypes8.number
      }),
      min: PropTypes8.instanceOf(Date),
      max: PropTypes8.instanceOf(Date),
      disabled: PropTypes8.bool,
      spinners: PropTypes8.bool,
      name: PropTypes8.string,
      dir: PropTypes8.string,
      label: PropTypes8.string,
      id: PropTypes8.string,
      ariaLabelledBy: PropTypes8.string,
      ariaDescribedBy: PropTypes8.string,
      ariaLabel: PropTypes8.string,
      ariaRole: PropTypes8.string,
      ariaHasPopup: PropTypes8.oneOfType([
        PropTypes8.bool,
        PropTypes8.string
      ]),
      ariaExpanded: PropTypes8.oneOfType([
        PropTypes8.bool
      ]),
      onChange: PropTypes8.func,
      validationMessage: PropTypes8.string,
      required: PropTypes8.bool,
      validate: PropTypes8.bool,
      valid: PropTypes8.bool,
      size: PropTypes8.oneOf([null, "small", "medium", "large"]),
      rounded: PropTypes8.oneOf([null, "small", "medium", "large", "full"]),
      fillMode: PropTypes8.oneOf([null, "solid", "flat", "outline"])
    };
    DateInputWithoutContext2.defaultProps = {
      format: defaultFormat,
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      formatPlaceholder: defaultFormatPlaceholder,
      // defaultValue: null as Date | null,
      spinners: false,
      disabled: false,
      max: cloneDate(MAX_DATE),
      min: cloneDate(MIN_DATE),
      minTime: cloneDate(MIN_TIME2),
      maxTime: cloneDate(MAX_TIME2),
      required: false,
      validityStyles: true,
      validationMessage: VALIDATION_MESSAGE,
      placeholder: null,
      // the rest of the properties are undefined by default
      ariaHasPopup: "grid"
    };
    return DateInputWithoutContext2;
  }(React12.Component)
);
var DateInputPropsContext = createPropsContext();
var DateInput = withPropsContext(DateInputPropsContext, DateInputWithoutContext);
DateInput.displayName = "KendoReactDateInput";
registerForIntl(DateInputWithoutContext);
registerForLocalization(DateInputWithoutContext);

// node_modules/@progress/kendo-react-dateinputs/dist/es/datepicker/DatePicker.js
var React15 = __toESM(require_react());
var PropTypes9 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/datepicker/ToggleButton.js
var ToggleButton = Button;

// node_modules/@progress/kendo-react-dateinputs/dist/es/common/PickerWrap.js
var React13 = __toESM(require_react());
var PickerWrap = React13.forwardRef(function(props, ref) {
  var _ref = props._ref;
  var element = React13.useRef(null);
  React13.useImperativeHandle(ref, function() {
    return element.current;
  });
  React13.useImperativeHandle(_ref, function() {
    return element.current;
  });
  var className = React13.useMemo(function() {
    return classNames(props.className, "k-picker-wrap");
  }, [props.className]);
  return React13.createElement("span", { ref: element, id: props.id, style: props.style, className, tabIndex: props.tabIndex }, props.children);
});

// node_modules/@progress/kendo-react-dateinputs/dist/es/hooks/usePickerFloatingLabel.js
var React14 = __toESM(require_react());
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var usePickerFloatingLabel = function(dateInput) {
  var _a9 = React14.useState(false), show = _a9[0], setShow = _a9[1];
  var syncText = function() {
    if (dateInput.current) {
      setShow(Boolean(dateInput.current.text));
    }
  };
  React14.useEffect(syncText);
  return {
    editorValue: show
  };
};
var PickerFloatingLabel = function(props) {
  var floatingLabelProps = usePickerFloatingLabel(props.dateInput);
  return React14.createElement(FloatingLabel, __assign9({}, props, floatingLabelProps));
};

// node_modules/@progress/kendo-react-dateinputs/dist/es/datepicker/DatePicker.js
var __extends13 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var __rest5 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var DatePickerWithoutContext = (
  /** @class */
  function(_super) {
    __extends13(DatePickerWithoutContext2, _super);
    function DatePickerWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this._popupId = guid();
      _this._element = null;
      _this._dateInput = React15.createRef();
      _this._calendar = null;
      _this.shouldFocusDateInput = false;
      _this.prevShow = false;
      _this.focus = function() {
        if (_this.dateInput) {
          _this.dateInput.focus();
        }
      };
      _this.setCalendarRef = function(calendar) {
        _this._calendar = calendar;
      };
      _this.nextValue = function(nextProps, nextState) {
        return nextProps.value !== void 0 ? nextProps.value : nextState.value;
      };
      _this.nextShow = function(nextProps, nextState) {
        return nextProps.show !== void 0 ? nextProps.show : nextState.show;
      };
      _this.handleInputValueChange = function(event) {
        _this.handleValueChange(event.value, event);
      };
      _this.handleCalendarValueChange = function(event) {
        var value = _this.mergeTime(event.value);
        _this.handleValueChange(value, event);
      };
      _this.handleValueChange = function(value, event) {
        _this.setState({
          value: cloneDate(value || void 0),
          show: false
        });
        _this.valueDuringOnChange = value;
        _this.showDuringOnChange = false;
        _this.shouldFocusDateInput = true;
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: _this.value,
            show: _this.show,
            target: _this
          });
        }
        _this.valueDuringOnChange = void 0;
        _this.showDuringOnChange = void 0;
      };
      _this.handleFocus = function() {
        _this.setState({ focused: true });
      };
      _this.handleBlur = function() {
        _this.setState({ focused: false });
        _this.setShow(false);
      };
      _this.handleIconClick = function() {
        if (_this.props.disabled) {
          return;
        }
        _this.shouldFocusDateInput = true;
        _this.setShow(!_this.show);
      };
      _this.handleIconMouseDown = function(event) {
        event.preventDefault();
      };
      _this.handleKeyDown = function(event) {
        var altKey = event.altKey, keyCode = event.keyCode;
        if (keyCode === Keys.esc) {
          _this.shouldFocusDateInput = true;
          _this.setShow(false);
          return;
        }
        if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
          event.preventDefault();
          event.stopPropagation();
          _this.shouldFocusDateInput = keyCode === Keys.up;
          _this.setShow(keyCode === Keys.down);
        }
      };
      validatePackage(packageMetadata);
      _this.state = {
        value: _this.props.defaultValue || DatePickerWithoutContext2.defaultProps.defaultValue,
        show: _this.props.defaultShow || DatePickerWithoutContext2.defaultProps.defaultShow,
        focused: false
      };
      return _this;
    }
    Object.defineProperty(DatePickerWithoutContext2.prototype, "element", {
      /**
       * Gets the wrapping element of the DatePickerWithoutContext.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "dateInput", {
      /**
       * Gets the DateInput component inside the DatePicker component.
       */
      get: function() {
        return this._dateInput.current;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "calendar", {
      /**
       * Gets the Calendar component inside the DatePicker component.
       */
      get: function() {
        return this._calendar;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "value", {
      /**
       * Gets the value of the DatePickerWithoutContext.
       */
      get: function() {
        var value = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
        return value !== null ? cloneDate(value) : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "show", {
      /**
       * Gets the popup state of the DatePickerWithoutContext.
       */
      get: function() {
        return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.props.show !== void 0 ? this.props.show : this.state.show;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the DatePickerWithoutContext.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : DatePickerWithoutContext2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : DatePickerWithoutContext2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "dateInputComp", {
      get: function() {
        return this.props.dateInput || DatePickerWithoutContext2.defaultProps.dateInput;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "toggleButtonComp", {
      get: function() {
        return this.props.toggleButton || DatePickerWithoutContext2.defaultProps.toggleButton;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "calendarComp", {
      get: function() {
        return this.props.calendar || DatePickerWithoutContext2.defaultProps.calendar;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "popupComp", {
      get: function() {
        return this.props.popup || DatePickerWithoutContext2.defaultProps.popup;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "pickerWrapComp", {
      get: function() {
        return this.props.pickerWrap || DatePickerWithoutContext2.defaultProps.pickerWrap;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the DatePicker is set.
       */
      get: function() {
        var inRange2 = isInDateRange(this.value, this.min, this.max);
        var customError = this.props.validationMessage !== void 0;
        var isValid = (!this.required || this.value !== null) && inRange2;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          rangeOverflow: this.value && this.max.getTime() < this.value.getTime() || false,
          rangeUnderflow: this.value && this.value.getTime() < this.min.getTime() || false,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "validityStyles", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : DatePickerWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DatePickerWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : DatePickerWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    DatePickerWithoutContext2.prototype.componentDidMount = function() {
      if (this.show) {
        this.forceUpdate();
      }
    };
    DatePickerWithoutContext2.prototype.componentDidUpdate = function() {
      if (this._calendar && this._calendar.element && this.show && !this.prevShow) {
        this._calendar.element.focus({ preventScroll: true });
      }
      if (this.dateInput && this.dateInput.element && !this.show && this.shouldFocusDateInput) {
        this.dateInput.element.focus({ preventScroll: true });
      }
      this.prevShow = this.show;
      this.shouldFocusDateInput = false;
    };
    DatePickerWithoutContext2.prototype.componentWillUnmount = function() {
      clearTimeout(this.nextTickId);
    };
    DatePickerWithoutContext2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, _b3 = _a9.size, size = _b3 === void 0 ? DatePickerWithoutContext2.defaultProps.size : _b3, _c2 = _a9.rounded, rounded = _c2 === void 0 ? DatePickerWithoutContext2.defaultProps.rounded : _c2, _d = _a9.fillMode, fillMode = _d === void 0 ? DatePickerWithoutContext2.defaultProps.fillMode : _d, disabled = _a9.disabled, tabIndex = _a9.tabIndex, title = _a9.title, id = _a9.id, format = _a9.format, formatPlaceholder = _a9.formatPlaceholder, min = _a9.min, max = _a9.max, weekNumber = _a9.weekNumber, focusedDate = _a9.focusedDate, className = _a9.className, width = _a9.width, name = _a9.name, validationMessage = _a9.validationMessage, required = _a9.required, validityStyles = _a9.validityStyles, ariaLabelledBy = _a9.ariaLabelledBy, ariaDescribedBy = _a9.ariaDescribedBy, ariaLabel = _a9.ariaLabel;
      var _e = this.props.popupSettings, popupClass = _e.popupClass, otherPopupSettings = __rest5(_e, ["popupClass"]);
      var show = this.show;
      var value = this.value;
      var sanitizedValue = value && getDate(value);
      var isValid = !this.validityStyles || this.validity.valid;
      var popupClassNames = classNames("k-calendar-container k-group k-reset", popupClass);
      var dateInputProps = {
        disabled,
        format,
        formatPlaceholder,
        id,
        ariaLabelledBy,
        ariaDescribedBy,
        ariaLabel,
        max,
        min,
        name,
        onChange: this.handleInputValueChange,
        required,
        tabIndex: !show ? tabIndex : -1,
        title,
        valid: this.validity.valid,
        validationMessage,
        validityStyles,
        value,
        label: void 0,
        placeholder: !this.state.focused ? this.props.placeholder : null,
        ariaExpanded: this.show,
        size: null,
        fillMode: null,
        rounded: null
      };
      var popupProps = __assign10({ popupClass: "k-datepicker-popup", show, anchor: this._element, className: popupClassNames, id: this._popupId, anchorAlign: {
        horizontal: "left",
        vertical: "bottom"
      }, popupAlign: {
        horizontal: "left",
        vertical: "top"
      } }, otherPopupSettings);
      var calendarProps = {
        disabled,
        value: sanitizedValue,
        min,
        max,
        weekNumber,
        focusedDate,
        onChange: this.handleCalendarValueChange
      };
      var toggleButtonTitle = provideLocalizationService(this).toLanguageString(toggleCalendar, messages[toggleCalendar]);
      var datepicker = React15.createElement(AsyncFocusBlur, { onFocus: this.handleFocus, onBlur: this.handleBlur, onSyncBlur: this.props.onBlur, onSyncFocus: this.props.onFocus }, function(_a10) {
        var _b4;
        var onFocus = _a10.onFocus, onBlur = _a10.onBlur;
        return React15.createElement(
          "span",
          { ref: function(span) {
            _this._element = span;
          }, className: classNames("k-input", "k-datepicker", (_b4 = {}, _b4["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _b4["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _b4["k-input-".concat(fillMode)] = fillMode, _b4["k-invalid"] = !isValid, _b4["k-required"] = _this.required, _b4["k-disabled"] = _this.props.disabled, _b4), className), onKeyDown: _this.handleKeyDown, style: { width }, onFocus, onBlur },
          React15.createElement(_this.dateInputComp, __assign10({ _ref: _this._dateInput, ariaRole: "combobox", ariaExpanded: _this.show, ariaControls: _this._popupId }, dateInputProps)),
          React15.createElement(_this.toggleButtonComp, { type: "button", icon: "calendar", svgIcon: calendarIcon, title: toggleButtonTitle, className: "k-input-button", rounded: null, onClick: _this.handleIconClick, "aria-label": toggleButtonTitle, onMouseDown: _this.handleIconMouseDown }),
          React15.createElement(
            _this.popupComp,
            __assign10({}, popupProps),
            React15.createElement(_this.calendarComp, __assign10({ _ref: _this.setCalendarRef }, calendarProps))
          )
        );
      });
      return this.props.label ? React15.createElement(PickerFloatingLabel, { dateInput: this._dateInput, label: this.props.label, editorId: id, editorValid: isValid, editorDisabled: this.props.disabled, children: datepicker, style: { width: this.props.width } }) : datepicker;
    };
    DatePickerWithoutContext2.prototype.setShow = function(show) {
      if (this.show === show) {
        return;
      }
      this.setState({ show });
    };
    DatePickerWithoutContext2.prototype.mergeTime = function(value) {
      return this.value && value ? setTime(value, this.value) : value;
    };
    DatePickerWithoutContext2.prototype.nextTick = function(f) {
      clearTimeout(this.nextTickId);
      this.nextTickId = window.setTimeout(function() {
        return f();
      });
    };
    DatePickerWithoutContext2.displayName = "DatePicker";
    DatePickerWithoutContext2.propTypes = {
      className: PropTypes9.string,
      defaultShow: PropTypes9.bool,
      defaultValue: PropTypes9.instanceOf(Date),
      disabled: PropTypes9.bool,
      focusedDate: PropTypes9.instanceOf(Date),
      format: PropTypes9.oneOfType([
        PropTypes9.string,
        PropTypes9.shape({
          skeleton: PropTypes9.string,
          pattern: PropTypes9.string,
          date: PropTypes9.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes9.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes9.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes9.oneOf(["narrow", "short", "long"]),
          year: PropTypes9.oneOf(["numeric", "2-digit"]),
          month: PropTypes9.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes9.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes9.oneOf(["narrow", "short", "long"]),
          hour: PropTypes9.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes9.bool,
          minute: PropTypes9.oneOf(["numeric", "2-digit"]),
          second: PropTypes9.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes9.oneOf(["short", "long"])
        })
      ]),
      formatPlaceholder: PropTypes9.oneOfType([
        PropTypes9.oneOf(["wide", "narrow", "short", "formatPattern"]),
        PropTypes9.shape({
          year: PropTypes9.string,
          month: PropTypes9.string,
          day: PropTypes9.string,
          hour: PropTypes9.string,
          minute: PropTypes9.string,
          second: PropTypes9.string
        })
      ]),
      id: PropTypes9.string,
      ariaLabelledBy: PropTypes9.string,
      ariaDescribedBy: PropTypes9.string,
      ariaLabel: PropTypes9.string,
      min: PropTypes9.instanceOf(Date),
      max: PropTypes9.instanceOf(Date),
      name: PropTypes9.string,
      popupSettings: PropTypes9.shape({
        animate: PropTypes9.bool,
        appendTo: PropTypes9.any,
        popupClass: PropTypes9.string
      }),
      show: PropTypes9.bool,
      tabIndex: PropTypes9.number,
      title: PropTypes9.string,
      value: PropTypes9.instanceOf(Date),
      weekNumber: PropTypes9.bool,
      width: PropTypes9.oneOfType([PropTypes9.number, PropTypes9.string]),
      validationMessage: PropTypes9.string,
      required: PropTypes9.bool,
      validate: PropTypes9.bool,
      valid: PropTypes9.bool,
      size: PropTypes9.oneOf([null, "small", "medium", "large"]),
      rounded: PropTypes9.oneOf([null, "small", "medium", "large", "full"]),
      fillMode: PropTypes9.oneOf([null, "solid", "flat", "outline"])
    };
    DatePickerWithoutContext2.defaultProps = {
      defaultShow: false,
      defaultValue: null,
      dateInput: DateInput,
      calendar: Calendar,
      toggleButton: ToggleButton,
      popup: Popup,
      pickerWrap: PickerWrap,
      disabled: false,
      format: "d",
      max: MAX_DATE,
      min: MIN_DATE,
      popupSettings: {},
      tabIndex: 0,
      weekNumber: false,
      required: false,
      validityStyles: true,
      size: "medium",
      rounded: "medium",
      fillMode: "solid"
    };
    return DatePickerWithoutContext2;
  }(React15.Component)
);
var DatePickerPropsContext = createPropsContext();
var DatePicker = withPropsContext(DatePickerPropsContext, DatePickerWithoutContext);
DatePicker.displayName = "KendoReactDatePicker";
registerForLocalization(DatePickerWithoutContext);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimePicker.js
var React19 = __toESM(require_react());
var PropTypes13 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimeSelector.js
var React18 = __toESM(require_react());
var PropTypes12 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimePart.js
var React17 = __toESM(require_react());
var PropTypes11 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimeList.js
var React16 = __toESM(require_react());
var PropTypes10 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/services/DayPeriodService.js
var setHours2 = function(date2, hours) {
  var clone = cloneDate(date2);
  clone.setHours(hours);
  return clone;
};
var isAM = function(value) {
  return value !== null && value < 12;
};
var isPM = function(value) {
  return value !== null && (!value || value > 11);
};
var inRange = function(value, min, max) {
  return !min && !max || value >= min && value <= max;
};
var inReverseRange = function(value, min, max) {
  return !min && !max || value >= min || value <= max;
};
var DayPeriodService = (
  /** @class */
  function() {
    function DayPeriodService2(intl) {
      this.intl = intl;
      this.min = null;
      this.max = null;
      this.part = null;
    }
    DayPeriodService2.prototype.apply = function(value, candidate) {
      var hour = value.getHours();
      var hourAM = isAM(hour);
      var candidateAM = isAM(candidate.getHours());
      if (hourAM && candidateAM || !hourAM && !candidateAM) {
        return value;
      }
      var _a9 = this.normalizedRange(), min = _a9[0], _b3 = _a9[1], max = _b3 === void 0 ? 24 : _b3;
      var result = hour + (candidateAM ? -12 : 12);
      return setHours2(value, Math.min(Math.max(min, result), max || 24));
    };
    DayPeriodService2.prototype.configure = function(settings) {
      var _a9 = settings.min, min = _a9 === void 0 ? this.min : _a9, _b3 = settings.max, max = _b3 === void 0 ? this.max : _b3, _c2 = settings.part, part = _c2 === void 0 ? this.part : _c2;
      this.min = min;
      this.max = max;
      this.part = part;
    };
    DayPeriodService2.prototype.data = function(_) {
      var names = this.part && this.part.names;
      if (!names || !this.min) {
        return [];
      }
      var data = [];
      var _a9 = this.normalizedRange(), min = _a9[0], max = _a9[1];
      var dayPeriod = this.intl.dateFormatNames(names);
      if (isAM(min)) {
        data.push({ text: dayPeriod.am, value: setHours2(this.min, min) });
      }
      if (isPM(max)) {
        data.push({ text: dayPeriod.pm, value: setHours2(this.min, Math.max(12, max)) });
      }
      return this.min.getHours() !== min ? data.reverse() : data;
    };
    DayPeriodService2.prototype.isRangeChanged = function(_, __) {
      return false;
    };
    DayPeriodService2.prototype.limitRange = function(min, max, _) {
      return [min, max];
    };
    DayPeriodService2.prototype.total = function() {
      var _a9 = this.normalizedRange(), min = _a9[0], max = _a9[1];
      if (!min && !max) {
        return 2;
      }
      if (min > 11 || max < 12) {
        return 1;
      }
      return 2;
    };
    DayPeriodService2.prototype.selectedIndex = function(value) {
      if (!this.valueInList(value) || !this.min) {
        return -1;
      }
      var index = Math.floor(value.getHours() / 12);
      return this.min.getHours() === this.normalizedRange()[0] ? index : index === 0 ? 1 : 0;
    };
    DayPeriodService2.prototype.valueInList = function(value) {
      if (!this.min || !this.max) {
        return false;
      }
      var reverse = this.min.getHours() !== this.normalizedRange()[0];
      var isInRange4 = reverse ? inReverseRange : inRange;
      return isInRange4(value.getHours(), this.min.getHours(), this.max.getHours());
    };
    DayPeriodService2.prototype.normalizedRange = function() {
      var minHour = this.min.getHours();
      var maxHour = this.max.getHours();
      return [
        Math.min(minHour, maxHour),
        Math.max(minHour, maxHour)
      ];
    };
    return DayPeriodService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/services/DOMService.js
var DOMService2 = (
  /** @class */
  function() {
    function DOMService3() {
      this.itemHeight = 0;
      this.timeListHeight = 0;
      this.didCalculate = false;
    }
    DOMService3.prototype.ensureHeights = function() {
      if (this.timeListHeight !== void 0) {
        return;
      }
      this.calculateHeights();
    };
    DOMService3.prototype.calculateHeights = function(container) {
      if (!canUseDOM) {
        return;
      }
      var div = domContainerFactory("div");
      var span = domContainerFactory("span");
      var ul = domContainerFactory("ul");
      var li = domContainerFactory("li");
      var listItem = function() {
        return li("<span>02</span>", "k-item");
      };
      var list = function() {
        return ul([listItem()], "k-reset");
      };
      var scrollable = function() {
        return div([list()], "k-content k-calendar-content k-scrollable k-time-container");
      };
      var timeListWrapper = function() {
        return div([
          span("minute", "k-title"),
          div([scrollable()], "k-time-list")
        ], "k-time-list-wrapper", { left: "-10000px", position: "absolute" });
      };
      var timeWrapper = timeListWrapper();
      var listContainer = container && container.querySelector(".k-time-container");
      var hostContainer = listContainer || document.body;
      var wrapper = hostContainer.appendChild(timeWrapper);
      this.timeListHeight = wrapper.querySelector(".k-scrollable").offsetHeight;
      this.itemHeight = wrapper.querySelector("li").offsetHeight;
      hostContainer.removeChild(wrapper);
      this.didCalculate = true;
    };
    return DOMService3;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/services/HoursService.js
var HOURS_IN_DAY = 24;
var clampToRange = function(rangeValue) {
  return function(value) {
    return value % rangeValue;
  };
};
var clamp = clampToRange(HOURS_IN_DAY);
var stepper = function(start2, step) {
  return function(idx) {
    return clamp(start2 + idx * step);
  };
};
var distanceFromMin = function(value, min) {
  return clamp(HOURS_IN_DAY + value - min);
};
var limit = function(borderValue) {
  return function(barrier, value) {
    var useBarrier = !value || getDate(barrier).getTime() === getDate(value).getTime();
    return useBarrier ? barrier : setHours(barrier, borderValue);
  };
};
var limitDown = limit(0);
var limitUp = limit(HOURS_IN_DAY - 1);
var HoursService = (
  /** @class */
  function() {
    function HoursService2(intl) {
      this.intl = intl;
      this.boundRange = false;
      this.insertUndividedMax = false;
      this.min = null;
      this.max = null;
      this.step = 0;
      this.toListItem = null;
    }
    HoursService2.prototype.apply = function(value, candidate) {
      return setHours(value, candidate.getHours());
    };
    HoursService2.prototype.configure = function(settings) {
      var _this = this;
      var _a9 = settings.boundRange, boundRange = _a9 === void 0 ? this.boundRange : _a9, _b3 = settings.insertUndividedMax, insertUndividedMax = _b3 === void 0 ? this.insertUndividedMax : _b3, _c2 = settings.min, min = _c2 === void 0 ? this.min : _c2, _d = settings.max, max = _d === void 0 ? this.max : _d, part = settings.part, _e = settings.step, step = _e === void 0 ? this.step : _e;
      this.boundRange = boundRange;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(hour) {
        var date2 = setHours(MIDNIGHT_DATE, hour);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    HoursService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getHour = stepper(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem && _this.toListItem(getHour(idx));
      };
      var data = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data);
      if (selectedValue) {
        this.addMissing(data, selectedValue);
      }
      return data;
    };
    HoursService2.prototype.isRangeChanged = function(min, max) {
      if (!this.min || !this.max) {
        return false;
      }
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    HoursService2.prototype.limitRange = function(min, max, value) {
      return this.boundRange ? [limitDown(min, value), limitUp(max, value)] : [min, max];
    };
    HoursService2.prototype.total = function(value) {
      var last = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
      var missing = this.isMissing(value) ? 1 : 0;
      return this.countFromMin(value) + missing + last;
    };
    HoursService2.prototype.selectedIndex = function(value) {
      return Math.ceil(this.divideByStep(value));
    };
    HoursService2.prototype.valueInList = function(value) {
      if (!value) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastHour(value) === value.getHours();
      return matchMax || !this.isMissing(value);
    };
    HoursService2.prototype.addLast = function(data, value) {
      if (this.insertUndividedMax && this.isLastMissing(value) && this.toListItem) {
        data.push(this.toListItem(this.lastHour(value)));
      }
      return data;
    };
    HoursService2.prototype.addMissing = function(data, value) {
      if (this.valueInList(value)) {
        return data;
      }
      if (this.toListItem) {
        var missingItem = this.toListItem(value.getHours());
        data.splice(this.selectedIndex(value), 0, missingItem);
      }
      return data;
    };
    HoursService2.prototype.countFromMin = function(value) {
      var _a9 = this.range(value), min = _a9[0], max = _a9[1];
      return Math.floor(distanceFromMin(max, min) / this.step) + 1;
    };
    HoursService2.prototype.isMissing = function(value) {
      if (!value) {
        return false;
      }
      return this.selectedIndex(value) !== this.divideByStep(value);
    };
    HoursService2.prototype.isLastMissing = function(value) {
      return this.max !== null && this.isMissing(setHours(this.max, this.lastHour(value)));
    };
    HoursService2.prototype.divideByStep = function(value) {
      return distanceFromMin(value.getHours(), this.min.getHours()) / this.step;
    };
    HoursService2.prototype.lastHour = function(value) {
      return this.range(value)[1];
    };
    HoursService2.prototype.range = function(value) {
      var _a9 = this.limitRange(this.min, this.max, value), min = _a9[0], max = _a9[1];
      return [min.getHours(), max.getHours()];
    };
    return HoursService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/services/MinutesService.js
var MINUTES_IN_HOUR = 60;
var clampToRange2 = function(rangeValue) {
  return function(value) {
    return value % rangeValue;
  };
};
var clamp2 = clampToRange2(MINUTES_IN_HOUR);
var stepper2 = function(start2, step) {
  return function(idx) {
    return clamp2(start2 + idx * step);
  };
};
var distanceFromMin2 = function(value, min) {
  return clamp2(MINUTES_IN_HOUR + value - min);
};
var limit2 = function(borderValue) {
  return function(barrier, value) {
    var useBarrier = !value || barrier.getHours() === value.getHours();
    return useBarrier ? barrier : setMinutes(barrier, borderValue);
  };
};
var limitDown2 = limit2(0);
var limitUp2 = limit2(MINUTES_IN_HOUR - 1);
var MinutesService = (
  /** @class */
  function() {
    function MinutesService2(intl) {
      this.intl = intl;
      this.toListItem = null;
      this.min = null;
      this.max = null;
      this.step = 0;
      this.insertUndividedMax = false;
    }
    MinutesService2.prototype.apply = function(value, candidate) {
      return setMinutes(value, candidate.getMinutes());
    };
    MinutesService2.prototype.configure = function(settings) {
      var _this = this;
      var _a9 = settings.insertUndividedMax, insertUndividedMax = _a9 === void 0 ? this.insertUndividedMax : _a9, _b3 = settings.min, min = _b3 === void 0 ? this.min : _b3, _c2 = settings.max, max = _c2 === void 0 ? this.max : _c2, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(minute) {
        var date2 = setMinutes(MIDNIGHT_DATE, minute);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    MinutesService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getMinute = stepper2(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem && _this.toListItem(getMinute(idx));
      };
      var data = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data);
      if (selectedValue) {
        this.addMissing(data, selectedValue);
      }
      return data;
    };
    MinutesService2.prototype.isRangeChanged = function(min, max) {
      return this.min !== null && this.max !== null && (!isEqual(this.min, min) || !isEqual(this.max, max));
    };
    MinutesService2.prototype.limitRange = function(min, max, value) {
      return [limitDown2(min, value), limitUp2(max, value)];
    };
    MinutesService2.prototype.total = function(value) {
      var last = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
      var missing = this.isMissing(value) ? 1 : 0;
      return this.countFromMin(value) + missing + last;
    };
    MinutesService2.prototype.selectedIndex = function(value) {
      return Math.ceil(this.divideByStep(value));
    };
    MinutesService2.prototype.valueInList = function(value) {
      if (!value) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastMinute(value) === value.getMinutes();
      return matchMax || !this.isMissing(value);
    };
    MinutesService2.prototype.addLast = function(data, value) {
      if (this.insertUndividedMax && this.isLastMissing(value) && this.toListItem) {
        data.push(this.toListItem(this.lastMinute(value)));
      }
      return data;
    };
    MinutesService2.prototype.addMissing = function(data, value) {
      if (this.valueInList(value)) {
        return data;
      }
      if (this.toListItem) {
        var missingItem = this.toListItem(value.getMinutes());
        data.splice(this.selectedIndex(value), 0, missingItem);
      }
      return data;
    };
    MinutesService2.prototype.countFromMin = function(value) {
      var _a9 = this.range(value), min = _a9[0], max = _a9[1];
      return Math.floor(distanceFromMin2(max, min) / this.step) + 1;
    };
    MinutesService2.prototype.isMissing = function(value) {
      if (!value) {
        return false;
      }
      return this.selectedIndex(value) !== this.divideByStep(value);
    };
    MinutesService2.prototype.isLastMissing = function(value) {
      return this.max !== null && this.isMissing(setMinutes(this.max, this.lastMinute(value)));
    };
    MinutesService2.prototype.divideByStep = function(value) {
      return distanceFromMin2(value.getMinutes(), this.min.getMinutes()) / this.step;
    };
    MinutesService2.prototype.lastMinute = function(value) {
      return this.range(value)[1];
    };
    MinutesService2.prototype.range = function(value) {
      var _a9 = this.limitRange(this.min, this.max, value), min = _a9[0], max = _a9[1];
      return [min.getMinutes(), max.getMinutes()];
    };
    return MinutesService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/services/SecondsService.js
var SECONDS_IN_HOUR = 60;
var clampToRange3 = function(rangeValue) {
  return function(value) {
    return value % rangeValue;
  };
};
var clamp3 = clampToRange3(SECONDS_IN_HOUR);
var stepper3 = function(start2, step) {
  return function(idx) {
    return clamp3(start2 + idx * step);
  };
};
var distanceFromMin3 = function(value, min) {
  return clamp3(SECONDS_IN_HOUR + value - min);
};
var limit3 = function(borderValue) {
  return function(barrier, value) {
    var useBarrier = !value || barrier.getMinutes() === value.getMinutes() && barrier.getHours() === value.getHours();
    return useBarrier ? barrier : setSeconds(barrier, borderValue);
  };
};
var limitDown3 = limit3(0);
var limitUp3 = limit3(SECONDS_IN_HOUR - 1);
var SecondsService = (
  /** @class */
  function() {
    function SecondsService2(intl) {
      this.intl = intl;
      this.toListItem = null;
      this.min = null;
      this.max = null;
      this.step = 0;
      this.insertUndividedMax = false;
    }
    SecondsService2.prototype.apply = function(value, candidate) {
      return setSeconds(value, candidate.getSeconds());
    };
    SecondsService2.prototype.configure = function(settings) {
      var _this = this;
      var _a9 = settings.insertUndividedMax, insertUndividedMax = _a9 === void 0 ? this.insertUndividedMax : _a9, _b3 = settings.min, min = _b3 === void 0 ? this.min : _b3, _c2 = settings.max, max = _c2 === void 0 ? this.max : _c2, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(minute) {
        var date2 = setSeconds(MIDNIGHT_DATE, minute);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    SecondsService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getSecond = stepper3(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem && _this.toListItem(getSecond(idx));
      };
      var data = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data);
      if (selectedValue) {
        this.addMissing(data, selectedValue);
      }
      return data;
    };
    SecondsService2.prototype.isRangeChanged = function(min, max) {
      return this.min !== null && this.max !== null && (!isEqual(this.min, min) || !isEqual(this.max, max));
    };
    SecondsService2.prototype.limitRange = function(min, max, value) {
      return [limitDown3(min, value), limitUp3(max, value)];
    };
    SecondsService2.prototype.total = function(value) {
      var last = this.insertUndividedMax && this.isLastMissing(value) ? 1 : 0;
      var missing = this.isMissing(value) ? 1 : 0;
      return this.countFromMin(value) + missing + last;
    };
    SecondsService2.prototype.selectedIndex = function(value) {
      return Math.ceil(this.divideByStep(value));
    };
    SecondsService2.prototype.valueInList = function(value) {
      if (!value) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastSecond(value) === value.getSeconds();
      return matchMax || !this.isMissing(value);
    };
    SecondsService2.prototype.divideByStep = function(value) {
      return distanceFromMin3(value.getSeconds(), this.min.getSeconds()) / this.step;
    };
    SecondsService2.prototype.addLast = function(data, value) {
      if (this.insertUndividedMax && this.isLastMissing(value) && this.toListItem) {
        data.push(this.toListItem(this.lastSecond(value)));
      }
      return data;
    };
    SecondsService2.prototype.addMissing = function(data, value) {
      if (this.valueInList(value)) {
        return data;
      }
      if (this.toListItem) {
        var missingItem = this.toListItem(value.getSeconds());
        data.splice(this.selectedIndex(value), 0, missingItem);
      }
      return data;
    };
    SecondsService2.prototype.countFromMin = function(value) {
      var _a9 = this.range(value), min = _a9[0], max = _a9[1];
      return Math.floor(distanceFromMin3(max, min) / this.step) + 1;
    };
    SecondsService2.prototype.isMissing = function(value) {
      if (!value) {
        return false;
      }
      return this.selectedIndex(value) !== this.divideByStep(value);
    };
    SecondsService2.prototype.isLastMissing = function(value) {
      return this.max !== null && this.isMissing(setSeconds(this.max, this.lastSecond(value)));
    };
    SecondsService2.prototype.lastSecond = function(value) {
      return this.range(value)[1];
    };
    SecondsService2.prototype.range = function(value) {
      var _a9 = this.limitRange(this.min, this.max, value), min = _a9[0], max = _a9[1];
      return [min.getSeconds(), max.getSeconds()];
    };
    return SecondsService2;
  }()
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimeList.js
var __extends14 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var _a8;
var _b2;
var SCROLL_THRESHOLD = 2;
var SNAP_THRESHOLD = 0.05;
var SCROLL_THROTTLE = 100;
var SKIP = 0;
var getters = (_a8 = {}, _a8[Keys.end] = function(data, _) {
  return data[data.length - 1];
}, _a8[Keys.home] = function(data, _) {
  return data[0];
}, _a8[Keys.up] = function(data, index) {
  return data[index - 1];
}, _a8[Keys.down] = function(data, index) {
  return data[index + 1];
}, _a8);
var services2 = (_b2 = {}, _b2[TIME_PART.dayperiod] = DayPeriodService, _b2[TIME_PART.hour] = HoursService, _b2[TIME_PART.minute] = MinutesService, _b2[TIME_PART.second] = SecondsService, _b2);
var TimeList = (
  /** @class */
  function(_super) {
    __extends14(TimeList2, _super);
    function TimeList2(props) {
      var _this = _super.call(this, props) || this;
      _this.intl = null;
      _this._element = null;
      _this.service = null;
      _this.virtualization = null;
      _this.topOffset = 0;
      _this.bottomOffset = 0;
      _this.itemHeight = 0;
      _this.listHeight = 0;
      _this.topThreshold = 0;
      _this.bottomThreshold = 0;
      _this.animateToIndex = false;
      _this.focus = function(args) {
        Promise.resolve().then(function() {
          if (!_this.element) {
            return;
          }
          _this.element.focus(args);
        });
      };
      _this.itemOffset = function(scrollTop) {
        if (!_this.virtualization || !_this.service) {
          return -1;
        }
        var valueIndex = _this.service.selectedIndex(_this.props.value);
        var activeIndex = _this.virtualization.activeIndex();
        var offset2 = _this.virtualization.itemOffset(activeIndex);
        var distance = Math.abs(Math.ceil(scrollTop) - offset2);
        if (valueIndex === activeIndex && distance < SCROLL_THRESHOLD) {
          return offset2;
        }
        var scrollUp = valueIndex > activeIndex;
        var moveToNext = scrollUp && distance >= _this.bottomThreshold || !scrollUp && distance > _this.topThreshold;
        return moveToNext ? _this.virtualization.itemOffset(activeIndex + 1) : offset2;
      };
      _this.calculateHeights = function() {
        if (!_this.dom.didCalculate) {
          return;
        }
        _this.itemHeight = _this.dom.itemHeight;
        _this.listHeight = _this.dom.timeListHeight;
        _this.topOffset = (_this.listHeight - _this.itemHeight) / 2;
        _this.bottomOffset = _this.listHeight - _this.itemHeight;
        _this.topThreshold = _this.itemHeight * SNAP_THRESHOLD;
        _this.bottomThreshold = _this.itemHeight * (1 - SNAP_THRESHOLD);
      };
      _this.configureServices = function(_a9) {
        var _b3 = _a9 === void 0 ? _this.props : _a9, min = _b3.min, max = _b3.max, value = _b3.value;
        if (_this.service) {
          var _c2 = _this.service.limitRange(min || _this.min, max || _this.max, value || _this.props.value), newMin = _c2[0], newMax = _c2[1];
          _this.service.configure(_this.serviceSettings({ min: newMin, max: newMax }));
        }
      };
      _this.serviceSettings = function(settings) {
        var defaults = {
          boundRange: _this.props.boundRange || TimeList2.defaultProps.boundRange,
          insertUndividedMax: false,
          min: cloneDate(_this.min),
          max: cloneDate(_this.max),
          part: _this.props.part,
          step: _this.step
        };
        var result = Object.assign({}, defaults, settings);
        result.boundRange = result.part.type !== "hour" || _this.props.boundRange || TimeList2.defaultProps.boundRange;
        return result;
      };
      _this.handleScrollAction = function(_a9) {
        var target = _a9.target, animationInProgress = _a9.animationInProgress;
        if (!_this.virtualization || !_this.service) {
          return;
        }
        if (target && !animationInProgress) {
          _this.animateToIndex = false;
          var index = _this.virtualization.itemIndex(_this.itemOffset(target.scrollTop));
          var dataItem = _this.service.data(_this.props.value)[index];
          _this.handleChange(dataItem);
        }
      };
      _this.handleFocus = function(event) {
        var onFocus = _this.props.onFocus;
        if (onFocus) {
          onFocus.call(void 0, event);
        }
      };
      _this.handleBlur = function(event) {
        var onBlur = _this.props.onBlur;
        if (onBlur) {
          onBlur.call(void 0, event);
        }
      };
      _this.handleMouseOver = function() {
        if (!_this._element) {
          return;
        }
        if (document && document.activeElement !== _this._element && _this.props.show) {
          _this._element.focus({ preventScroll: true });
        }
      };
      _this.handleKeyDown = function(event) {
        if (!_this.service) {
          return;
        }
        var keyCode = event.keyCode;
        if (keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.end || keyCode === Keys.home) {
          event.preventDefault();
        }
        var getter = getters[event.keyCode] || noop;
        var dataItem = getter(_this.service.data(_this.props.value), _this.service.selectedIndex(_this.props.value));
        if (dataItem) {
          _this.handleChange(dataItem);
        }
      };
      _this.handleChange = debounce(function(dataItem) {
        if (!_this.service) {
          return;
        }
        var candidate = _this.service.apply(_this.props.value, dataItem.value);
        if (_this.props.value.getTime() === candidate.getTime()) {
          return;
        }
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, candidate);
        }
      }, SCROLL_THROTTLE);
      _this.dom = new DOMService2();
      return _this;
    }
    Object.defineProperty(TimeList2.prototype, "element", {
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeList2.prototype, "animate", {
      get: function() {
        return Boolean(this.props.smoothScroll && this.animateToIndex);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeList2.prototype, "min", {
      get: function() {
        return this.props.min || TimeList2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeList2.prototype, "max", {
      get: function() {
        return this.props.max || TimeList2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeList2.prototype, "step", {
      get: function() {
        return this.props.step !== void 0 && this.props.step !== 0 ? Math.floor(this.props.step) : TimeList2.defaultProps.step;
      },
      enumerable: false,
      configurable: true
    });
    TimeList2.prototype.componentDidMount = function() {
      var _this = this;
      Promise.resolve().then(function() {
        if (!_this._element) {
          return;
        }
        _this.dom.calculateHeights(_this._element);
        _this.forceUpdate();
      });
    };
    TimeList2.prototype.componentDidUpdate = function() {
      if (!this.virtualization || !this.service) {
        return;
      }
      var index = this.service.selectedIndex(this.props.value);
      this.virtualization[this.animate ? "animateToIndex" : "scrollToIndex"](index);
      this.animateToIndex = true;
    };
    TimeList2.prototype.render = function() {
      var _this = this;
      if (!this.props.part.type || !services2[this.props.part.type]) {
        return;
      }
      this.calculateHeights();
      this.intl = provideIntlService(this);
      this.service = new services2[this.props.part.type](this.intl);
      this.configureServices();
      var data = this.service.data(this.props.value);
      var transform = "translateY(" + this.topOffset + "px)";
      var total = this.service.total(this.props.value);
      var list = React16.createElement("ul", { style: { transform, msTransform: transform }, className: "k-reset" }, data.map(function(item, idx) {
        return React16.createElement(
          "li",
          { key: idx, className: "k-item", onClick: function() {
            _this.handleChange(item);
          } },
          React16.createElement("span", null, item.text)
        );
      }));
      return React16.createElement("div", { className: "k-time-list", id: String(this.props.id || ""), tabIndex: this.props.disabled ? -1 : 0, ref: function(el) {
        _this._element = el;
      }, onKeyDown: this.handleKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur, onMouseOver: this.handleMouseOver }, this.dom.didCalculate ? React16.createElement(Virtualization, { bottomOffset: this.bottomOffset, children: list, className: "k-time-container", itemHeight: this.itemHeight, maxScrollDifference: this.listHeight, onScrollAction: this.handleScrollAction, ref: function(el) {
        _this.virtualization = el;
      }, role: "presentation", skip: SKIP, tabIndex: -1, take: total, topOffset: this.topOffset, total }) : React16.createElement("div", { className: "k-time-container" }, list));
    };
    TimeList2.propTypes = {
      id: PropTypes10.number,
      max: PropTypes10.instanceOf(Date),
      min: PropTypes10.instanceOf(Date),
      part: function(props, propName, componentName) {
        var prop = props[propName];
        if (!prop || !services2[prop.type]) {
          throw new Error("\n                    Invalid prop '".concat(propName, "' supplied to ").concat(componentName, ".\n                    Supported part types are hour|minute|second|dayperiod.\n                "));
        }
        return null;
      },
      step: function(props, propName, componentName) {
        var prop = props[propName];
        if (prop !== void 0 && prop <= 0) {
          throw new Error("\n                    Invalid prop '".concat(propName, "' supplied to ").concat(componentName, ".\n                    ").concat(propName, " cannot be less than 1.\n                "));
        }
        return null;
      },
      value: PropTypes10.instanceOf(Date),
      smoothScroll: PropTypes10.bool,
      show: PropTypes10.bool
    };
    TimeList2.defaultProps = {
      boundRange: false,
      max: MAX_TIME,
      min: MIDNIGHT_DATE,
      step: 1,
      smoothScroll: true
    };
    return TimeList2;
  }(React16.Component)
);
registerForIntl(TimeList);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimePart.js
var __extends15 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var formatRegExp2 = new RegExp("".concat(TIME_PART.hour, "|").concat(TIME_PART.minute, "|").concat(TIME_PART.second, "|").concat(TIME_PART.dayperiod, "|literal"));
var Direction2;
(function(Direction4) {
  Direction4[Direction4["Left"] = 0] = "Left";
  Direction4[Direction4["Right"] = 1] = "Right";
})(Direction2 || (Direction2 = {}));
var TimePart = (
  /** @class */
  function(_super) {
    __extends15(TimePart2, _super);
    function TimePart2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this._nowButton = null;
      _this.dateFormatParts = [];
      _this.timeLists = [];
      _this.focus = function(args) {
        Promise.resolve().then(function() {
          var timeList = _this.timeLists[0];
          if (_this.state.activeListIndex === -1 && !_this.hasActiveButton() && timeList && timeList.element) {
            timeList.focus(args);
          }
        });
      };
      _this.timeFormatReducer = function(acc, current) {
        return acc + current.pattern;
      };
      _this.timeFormatFilter = function(part, index, all) {
        var prevItem = index >= 1 && all[index - 1];
        if (!prevItem) {
          return formatRegExp2.test(part.type || "");
        }
        if (prevItem && part.type === "literal") {
          return formatRegExp2.test(prevItem.type || "");
        }
        return formatRegExp2.test(part.type || "");
      };
      _this.focusList = function(dir) {
        if (!_this.timeLists.length) {
          return;
        }
        _this.timeLists.reduce(_this.listReducer, []).map(function(state) {
          return dir === Direction2.Right ? state.next : state.prev;
        }).map(function(list) {
          return list && list.element && list.element.focus({ preventScroll: true });
        });
      };
      _this.listReducer = function(state, list, idx, all) {
        if (state.length || list.props.id !== _this.state.activeListIndex) {
          return state;
        }
        return [{
          next: all[idx + 1] || list,
          prev: all[idx - 1] || list
        }];
      };
      _this.showNowButton = function() {
        return !_this.hasSteps() && _this.props.nowButton && isInTimeRange(getNow(), _this.min, _this.max);
      };
      _this.handleKeyDown = function(event) {
        var keyCode = event.keyCode;
        switch (keyCode) {
          case Keys.left:
            event.preventDefault();
            _this.focusList(Direction2.Left);
            return;
          case Keys.right:
            event.preventDefault();
            _this.focusList(Direction2.Right);
            return;
          default:
            return;
        }
      };
      _this.handleListBlur = function() {
        _this.nextTick(function() {
          _this.setState({ activeListIndex: -1 });
        });
      };
      _this.handleListFocus = function(idx) {
        clearTimeout(_this.nextTickId);
        _this.setState({
          activeListIndex: idx
        });
      };
      _this.handleChange = function(candidate) {
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, candidate);
        }
      };
      _this.snapTime = snapTime(generateSnappers(_this.props.steps, _this.props.min || TimePart2.defaultProps.min));
      _this.state = {
        activeListIndex: -1
      };
      _this.hasActiveButton = _this.hasActiveButton.bind(_this);
      return _this;
    }
    Object.defineProperty(TimePart2.prototype, "element", {
      /**
       * @hidden
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePart2.prototype, "value", {
      get: function() {
        return timeInRange(this.snapTime(cloneDate(this.props.value || MIDNIGHT_DATE)), this.min, this.max);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePart2.prototype, "intl", {
      get: function() {
        return provideIntlService(this);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePart2.prototype, "min", {
      get: function() {
        return this.snapTime(this.props.min || TimePart2.defaultProps.min);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePart2.prototype, "max", {
      get: function() {
        return this.snapTime(this.props.max || TimePart2.defaultProps.max);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePart2.prototype, "steps", {
      get: function() {
        return this.props.steps || TimePart2.defaultProps.steps;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePart2.prototype, "boundRange", {
      get: function() {
        return this.props.boundRange !== void 0 ? this.props.boundRange : TimePart2.defaultProps.boundRange;
      },
      enumerable: false,
      configurable: true
    });
    TimePart2.prototype.componentWillUnmount = function() {
      clearTimeout(this.nextTickId);
    };
    TimePart2.prototype.componentDidMount = function() {
      var onMount = this.props.onMount;
      if (onMount) {
        onMount.call(void 0, this.value);
      }
    };
    TimePart2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, format = _a9.format, smoothScroll = _a9.smoothScroll, onNowClick = _a9.onNowClick, className = _a9.className, disabled = _a9.disabled;
      this.snapTime = snapTime(generateSnappers(this.steps, this.min));
      this.dateFormatParts = this.intl.splitDateFormat(format || TimePart2.defaultProps.format).filter(this.timeFormatFilter);
      var rootClassName = classNames({
        "k-disabled": disabled
      }, className, "k-time-part");
      this.timeLists = [];
      var localizationService = provideLocalizationService(this);
      var selectNowMessage = localizationService.toLanguageString(selectNow, messages[selectNow]);
      return React17.createElement(
        "div",
        { className: rootClassName },
        React17.createElement(
          "div",
          { className: "k-time-header" },
          React17.createElement("span", { className: "k-title" }, this.intl.formatDate(this.value, this.dateFormatParts.reduce(this.timeFormatReducer, ""))),
          this.showNowButton() && React17.createElement(Button, __assign11({ type: "button", ref: function(btn) {
            _this._nowButton = btn;
          }, className: "k-time-now", fillMode: "flat", themeColor: "primary", title: selectNowMessage }, { "aria-label": selectNowMessage }, { onClick: onNowClick, tabIndex: disabled ? -1 : 0 }), localizationService.toLanguageString(now, messages[now]))
        ),
        React17.createElement(
          "div",
          { className: "k-time-list-container", onKeyDown: this.handleKeyDown },
          React17.createElement("span", { className: "k-time-highlight" }),
          this.dateFormatParts.map(function(part, idx) {
            return part.type !== "literal" ? React17.createElement(
              "div",
              { key: idx, className: classNames("k-time-list-wrapper", {
                "k-focus": idx === _this.state.activeListIndex
              }), role: "presentation", tabIndex: -1 },
              React17.createElement("span", { className: "k-title", onMouseDown: function(e) {
                e.preventDefault();
              } }, _this.intl.dateFieldName(part)),
              React17.createElement(TimeList, { min: _this.min, max: _this.max, boundRange: _this.boundRange, part, step: part.type ? _this.steps[part.type] : 1, smoothScroll, ref: function(el) {
                if (!el) {
                  return;
                }
                _this.timeLists.push(el);
              }, id: idx, onFocus: function() {
                _this.handleListFocus(idx);
              }, onBlur: _this.handleListBlur, onChange: _this.handleChange, value: _this.value, disabled, show: _this.props.show })
            ) : React17.createElement("div", { key: idx, className: "k-time-separator" }, part.pattern);
          })
        )
      );
    };
    TimePart2.prototype.nextTick = function(f) {
      clearTimeout(this.nextTickId);
      this.nextTickId = window.setTimeout(function() {
        return f();
      });
    };
    TimePart2.prototype.hasActiveButton = function() {
      return this._nowButton && document.activeElement === this._nowButton.element;
    };
    TimePart2.prototype.hasSteps = function() {
      var _this = this;
      var keys = Object.keys(this.steps);
      return keys.length !== keys.reduce(function(acc, k) {
        return acc + _this.steps[k];
      }, 0);
    };
    TimePart2.propTypes = {
      cancelButton: PropTypes11.bool,
      disabled: PropTypes11.bool,
      format: PropTypes11.oneOfType([
        PropTypes11.string,
        PropTypes11.shape({
          skeleton: PropTypes11.string,
          pattern: PropTypes11.string,
          date: PropTypes11.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes11.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes11.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes11.oneOf(["narrow", "short", "long"]),
          year: PropTypes11.oneOf(["numeric", "2-digit"]),
          month: PropTypes11.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes11.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes11.oneOf(["narrow", "short", "long"]),
          hour: PropTypes11.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes11.bool,
          minute: PropTypes11.oneOf(["numeric", "2-digit"]),
          second: PropTypes11.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes11.oneOf(["short", "long"])
        })
      ]),
      max: PropTypes11.instanceOf(Date),
      min: PropTypes11.instanceOf(Date),
      nowButton: PropTypes11.bool,
      steps: PropTypes11.shape({
        hour: PropTypes11.number,
        minute: PropTypes11.number,
        second: PropTypes11.number
      }),
      smoothScroll: PropTypes11.bool,
      tabIndex: PropTypes11.number,
      value: PropTypes11.instanceOf(Date),
      show: PropTypes11.bool
    };
    TimePart2.defaultProps = {
      value: null,
      disabled: false,
      nowButton: true,
      cancelButton: true,
      format: "hh:mm a",
      min: MIN_TIME,
      max: MAX_TIME,
      steps: {},
      boundRange: false
    };
    return TimePart2;
  }(React17.Component)
);
registerForIntl(TimePart);
registerForLocalization(TimePart);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimeSelector.js
var __extends16 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var Direction3;
(function(Direction4) {
  Direction4[Direction4["Left"] = 0] = "Left";
  Direction4[Direction4["Right"] = 1] = "Right";
})(Direction3 || (Direction3 = {}));
var TimeSelector = (
  /** @class */
  function(_super) {
    __extends16(TimeSelector2, _super);
    function TimeSelector2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this._cancelButton = null;
      _this._acceptButton = null;
      _this.timePart = null;
      _this.focusActiveList = function() {
        if (!_this.timePart) {
          return;
        }
        _this.timePart.focus({ preventScroll: true });
      };
      _this.handleKeyDown = function(event) {
        var keyCode = event.keyCode;
        switch (keyCode) {
          case Keys.enter:
            if (!_this.hasActiveButton()) {
              _this.handleAccept(event);
            }
            return;
          default:
            return;
        }
      };
      _this.handleAccept = function(event) {
        var value = _this.mergeValue(cloneDate(_this.value || getNow()), _this.timePart ? _this.timePart.value : _this.current);
        _this.setState({ value });
        _this.valueDuringOnChange = value;
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, {
            syntheticEvent: event,
            nativeEvent: event.nativeEvent,
            value: _this.value,
            target: _this
          });
        }
        _this.valueDuringOnChange = void 0;
      };
      _this.handleReject = function(event) {
        _this.setState({ current: _this.value });
        var onReject = _this.props.onReject;
        if (onReject) {
          onReject.call(void 0, event);
        }
      };
      _this.handleNowClick = function(event) {
        var now2 = _this.mergeValue(cloneDate(_this.value || getNow()), getNow());
        _this.setState({
          current: now2,
          value: now2
        });
        _this.valueDuringOnChange = now2;
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, {
            syntheticEvent: event,
            nativeEvent: event.nativeEvent,
            value: _this.value,
            target: _this
          });
        }
        _this.valueDuringOnChange = void 0;
      };
      _this.handleChange = function(candidate) {
        _this.setState({ current: candidate });
      };
      _this.dateFormatParts = _this.intl.splitDateFormat(_this.props.format || TimeSelector2.defaultProps.format);
      _this.mergeValue = valueMerger(generateGetters(_this.dateFormatParts));
      _this.hasActiveButton = _this.hasActiveButton.bind(_this);
      _this.state = {
        current: _this.props.value || MIDNIGHT_DATE,
        value: _this.props.value || TimeSelector2.defaultProps.value
      };
      return _this;
    }
    Object.defineProperty(TimeSelector2.prototype, "element", {
      /**
       * @hidden
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeSelector2.prototype, "value", {
      get: function() {
        var value = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
        return value !== null ? cloneDate(value) : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeSelector2.prototype, "intl", {
      get: function() {
        return provideIntlService(this);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimeSelector2.prototype, "current", {
      get: function() {
        return this.state.current !== null ? cloneDate(this.state.current) : null;
      },
      enumerable: false,
      configurable: true
    });
    TimeSelector2.prototype.componentWillUnmount = function() {
      clearTimeout(this.nextTickId);
    };
    TimeSelector2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, format = _a9.format, cancelButton = _a9.cancelButton, disabled = _a9.disabled, tabIndex = _a9.tabIndex, className = _a9.className, smoothScroll = _a9.smoothScroll, min = _a9.min, max = _a9.max, boundRange = _a9.boundRange, nowButton = _a9.nowButton, steps = _a9.steps;
      var localizationService = provideLocalizationService(this);
      var cancelMessage = localizationService.toLanguageString(timePickerCancel, messages[timePickerCancel]);
      var setMessage = localizationService.toLanguageString(timePickerSet, messages[timePickerSet]);
      return React18.createElement(
        "div",
        { ref: function(el) {
          _this._element = el;
        }, tabIndex: !disabled ? tabIndex || 0 : void 0, className: classNames("k-timeselector", className, {
          "k-disabled": disabled
        }), onKeyDown: this.handleKeyDown },
        React18.createElement(TimePart, { ref: function(el) {
          _this.timePart = el;
        }, value: this.current, onChange: this.handleChange, onNowClick: this.handleNowClick, format, smoothScroll, min, max, boundRange, disabled, nowButton, steps, show: this.props.show }),
        React18.createElement(
          "div",
          { className: "k-time-footer k-actions k-actions-stretched" },
          cancelButton && React18.createElement(Button, __assign12({ type: "button", ref: function(btn) {
            _this._cancelButton = btn;
          }, className: "k-time-cancel", onClick: this.handleReject, title: cancelMessage }, { "aria-label": cancelMessage }), cancelMessage),
          React18.createElement(Button, __assign12({ type: "button", ref: function(btn) {
            _this._acceptButton = btn;
          }, className: "k-time-accept", themeColor: "primary", onClick: this.handleAccept, title: setMessage }, { "aria-label": setMessage }), setMessage)
        )
      );
    };
    TimeSelector2.prototype.nextTick = function(f) {
      clearTimeout(this.nextTickId);
      this.nextTickId = window.setTimeout(function() {
        return f();
      });
    };
    TimeSelector2.prototype.hasActiveButton = function() {
      if (!this._acceptButton || !this._acceptButton.element) {
        return false;
      }
      return this._acceptButton && document.activeElement === this._acceptButton.element || this._cancelButton && document.activeElement === this._cancelButton.element;
    };
    TimeSelector2.propTypes = {
      cancelButton: PropTypes12.bool,
      className: PropTypes12.string,
      disabled: PropTypes12.bool,
      format: PropTypes12.oneOfType([
        PropTypes12.string,
        PropTypes12.shape({
          skeleton: PropTypes12.string,
          pattern: PropTypes12.string,
          date: PropTypes12.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes12.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes12.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes12.oneOf(["narrow", "short", "long"]),
          year: PropTypes12.oneOf(["numeric", "2-digit"]),
          month: PropTypes12.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes12.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes12.oneOf(["narrow", "short", "long"]),
          hour: PropTypes12.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes12.bool,
          minute: PropTypes12.oneOf(["numeric", "2-digit"]),
          second: PropTypes12.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes12.oneOf(["short", "long"])
        })
      ]),
      max: PropTypes12.instanceOf(Date),
      min: PropTypes12.instanceOf(Date),
      nowButton: PropTypes12.bool,
      steps: PropTypes12.shape({
        hour: PropTypes12.number,
        minute: PropTypes12.number,
        second: PropTypes12.number
      }),
      smoothScroll: PropTypes12.bool,
      tabIndex: PropTypes12.number,
      value: PropTypes12.instanceOf(Date),
      show: PropTypes12.bool
    };
    TimeSelector2.defaultProps = {
      value: null,
      disabled: false,
      cancelButton: true,
      format: "t",
      min: MIN_TIME,
      max: MAX_TIME,
      boundRange: false
    };
    return TimeSelector2;
  }(React18.Component)
);
registerForIntl(TimeSelector);
registerForLocalization(TimeSelector);

// node_modules/@progress/kendo-react-dateinputs/dist/es/timepicker/TimePicker.js
var __extends17 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign13 = function() {
  __assign13 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
var __rest6 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var TimePickerWithoutContext = (
  /** @class */
  function(_super) {
    __extends17(TimePickerWithoutContext2, _super);
    function TimePickerWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this._popupId = guid();
      _this._element = null;
      _this._dateInput = React19.createRef();
      _this._timeSelector = null;
      _this.shouldFocusDateInput = false;
      _this.prevShow = false;
      _this.focus = function() {
        if (_this.dateInput) {
          _this.dateInput.focus();
        }
      };
      _this.setTimeSelectorRef = function(timeSelector) {
        _this._timeSelector = timeSelector;
      };
      _this.nextValue = function(nextProps, nextState) {
        return nextProps.value !== void 0 ? nextProps.value : nextState.value;
      };
      _this.nextShow = function(nextProps, nextState) {
        return nextProps.show !== void 0 ? nextProps.show : nextState.show;
      };
      _this.handleInputValueChange = function(event) {
        var value = _this.mergeTime(event.value);
        _this.handleValueChange(__assign13(__assign13({}, event), { value }));
      };
      _this.handleValueChange = function(event) {
        _this.setState({
          value: cloneDate(event.value),
          show: false
        });
        _this.valueDuringOnChange = event.value;
        _this.showDuringOnChange = false;
        _this.shouldFocusDateInput = true;
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: _this.value,
            show: _this.show,
            target: _this
          });
        }
        _this.valueDuringOnChange = void 0;
        _this.showDuringOnChange = void 0;
      };
      _this.handleFocus = function() {
        _this.setState({ focused: true });
      };
      _this.handleBlur = function() {
        _this.setState({ focused: false });
        _this.setShow(false);
      };
      _this.handleValueReject = function(_) {
        _this.setShow(false);
      };
      _this.handleIconClick = function(_) {
        if (_this.props.disabled) {
          return;
        }
        _this.shouldFocusDateInput = true;
        _this.setShow(!_this.show);
      };
      _this.handleIconMouseDown = function(event) {
        event.preventDefault();
      };
      _this.handleKeyDown = function(event) {
        var altKey = event.altKey, keyCode = event.keyCode;
        if (keyCode === Keys.esc) {
          _this.shouldFocusDateInput = true;
          _this.setShow(false);
          return;
        }
        if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
          event.preventDefault();
          event.stopPropagation();
          _this.shouldFocusDateInput = keyCode === Keys.up;
          _this.setShow(keyCode === Keys.down);
        }
      };
      validatePackage(packageMetadata);
      _this.state = {
        value: _this.props.defaultValue || TimePickerWithoutContext2.defaultProps.defaultValue,
        show: _this.props.defaultShow || TimePickerWithoutContext2.defaultProps.defaultShow,
        focused: false
      };
      _this.normalizeTime = _this.normalizeTime.bind(_this);
      _this.setShow = _this.setShow.bind(_this);
      _this.mergeTime = _this.mergeTime.bind(_this);
      return _this;
    }
    Object.defineProperty(TimePickerWithoutContext2.prototype, "element", {
      /**
       * Gets the wrapping element of the TimePicker.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "dateInput", {
      /**
       * Gets the DateInput component inside the TimePicker component.
       */
      get: function() {
        return this._dateInput.current;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "timeSelector", {
      /**
       * Gets the TimeSelector component inside the TimePicker component.
       */
      get: function() {
        return this._timeSelector;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "value", {
      /**
       * Gets the value of the TimePicker.
       */
      get: function() {
        var value = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
        return value !== null ? cloneDate(value) : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "show", {
      /**
       * Gets the popup state of the TimeSelector.
       */
      get: function() {
        return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.props.show !== void 0 ? this.props.show : this.state.show;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the TimePicker.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the TimePicker is set.
       */
      get: function() {
        var value = this.value && this.normalizeTime(this.value);
        var min = this.normalizeTime(this.min);
        var max = this.normalizeTime(this.max);
        var inRange2 = isInRange3(value, min, max);
        var customError = this.props.validationMessage !== void 0;
        var isValid = (!this.required || this.value !== null) && inRange2;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          rangeOverflow: isBiggerThanMax(value, max),
          rangeUnderflow: isSmallerThanMin(value, min),
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "validityStyles", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : TimePickerWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : TimePickerWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "popupSettings", {
      get: function() {
        return this.props.popupSettings || TimePickerWithoutContext2.defaultProps.popupSettings;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : TimePickerWithoutContext2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : TimePickerWithoutContext2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TimePickerWithoutContext2.prototype, "dateInputComp", {
      get: function() {
        return this.props.dateInput || TimePickerWithoutContext2.defaultProps.dateInput;
      },
      enumerable: false,
      configurable: true
    });
    TimePickerWithoutContext2.prototype.componentDidMount = function() {
      if (this.show) {
        this.forceUpdate();
      }
    };
    TimePickerWithoutContext2.prototype.componentDidUpdate = function() {
      if (this._timeSelector && this.show && !this.prevShow) {
        this._timeSelector.focusActiveList();
      } else if (this.dateInput && this.dateInput.element && !this.show && this.shouldFocusDateInput) {
        this.dateInput.element.focus({ preventScroll: true });
      }
      this.prevShow = this.show;
      this.shouldFocusDateInput = false;
    };
    TimePickerWithoutContext2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, _b3 = _a9.size, size = _b3 === void 0 ? TimePickerWithoutContext2.defaultProps.size : _b3, _c2 = _a9.rounded, rounded = _c2 === void 0 ? TimePickerWithoutContext2.defaultProps.rounded : _c2, _d = _a9.fillMode, fillMode = _d === void 0 ? TimePickerWithoutContext2.defaultProps.fillMode : _d, disabled = _a9.disabled, tabIndex = _a9.tabIndex, title = _a9.title, id = _a9.id, className = _a9.className, format = _a9.format, formatPlaceholder = _a9.formatPlaceholder, smoothScroll = _a9.smoothScroll, width = _a9.width, name = _a9.name, steps = _a9.steps, cancelButton = _a9.cancelButton, nowButton = _a9.nowButton, validationMessage = _a9.validationMessage, required = _a9.required, validityStyles = _a9.validityStyles, ariaLabelledBy = _a9.ariaLabelledBy, ariaDescribedBy = _a9.ariaDescribedBy;
      var _e = this.popupSettings, popupClass = _e.popupClass, otherPopupSettings = __rest6(_e, ["popupClass"]);
      var isValid = !this.validityStyles || this.validity.valid;
      var popupClassNames = classNames("k-group k-reset", popupClass);
      var dateInputProps = {
        disabled,
        format,
        formatPlaceholder,
        id,
        ariaLabelledBy,
        ariaDescribedBy,
        max: this.normalizeTime(this.max),
        min: this.normalizeTime(this.min),
        name,
        onChange: this.handleInputValueChange,
        required,
        steps,
        tabIndex: !this.show ? tabIndex : -1,
        title,
        valid: this.validity.valid,
        validationMessage,
        validityStyles,
        value: this.value && this.normalizeTime(this.value),
        label: void 0,
        placeholder: !this.state.focused ? this.props.placeholder : null,
        ariaHasPopup: "dialog",
        ariaExpanded: this.show,
        size: null,
        fillMode: null,
        rounded: null
      };
      var popupProps = __assign13({ popupClass: "k-timepicker-popup", show: this.show, animate: this.element !== null, anchor: this.element, className: popupClassNames, id: this._popupId, anchorAlign: {
        horizontal: "left",
        vertical: "bottom"
      }, popupAlign: {
        horizontal: "left",
        vertical: "top"
      } }, otherPopupSettings);
      var timeSelector = React19.createElement(TimeSelector, { ref: this.setTimeSelectorRef, show: this.show, cancelButton, disabled, nowButton, format, min: this.min, max: this.max, steps, smoothScroll, value: this.value, onChange: this.handleValueChange, onReject: this.handleValueReject });
      var localizationService = provideLocalizationService(this);
      var toggleClockMessage = localizationService.toLanguageString(toggleClock, messages[toggleClock]);
      var toggleTimeMessage = localizationService.toLanguageString(toggleTimeSelector, messages[toggleTimeSelector]);
      var timepicker = React19.createElement(AsyncFocusBlur, { onFocus: this.handleFocus, onBlur: this.handleBlur, onSyncBlur: this.props.onBlur, onSyncFocus: this.props.onFocus }, function(_a10) {
        var _b4;
        var onFocus = _a10.onFocus, onBlur = _a10.onBlur;
        return React19.createElement(
          "div",
          { ref: function(span) {
            _this._element = span;
          }, className: classNames("k-input", "k-timepicker", (_b4 = {}, _b4["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _b4["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _b4["k-input-".concat(fillMode)] = fillMode, _b4["k-invalid"] = !isValid, _b4["k-required"] = _this.required, _b4["k-disabled"] = _this.props.disabled, _b4), className), onKeyDown: _this.handleKeyDown, style: { width }, onFocus, onBlur },
          React19.createElement(_this.dateInputComp, __assign13({ _ref: _this._dateInput, ariaRole: "combobox", ariaControls: _this._popupId }, dateInputProps)),
          React19.createElement(Button, __assign13({ tabIndex: -1, type: "button", icon: "clock", svgIcon: clockIcon, onMouseDown: _this.handleIconMouseDown, onClick: _this.handleIconClick, title: toggleTimeMessage, className: "k-input-button", rounded: null }, {
            "aria-label": toggleClockMessage
          })),
          _this.props.popup ? React19.createElement(_this.props.popup, __assign13({}, popupProps), timeSelector) : React19.createElement(Popup, __assign13({}, popupProps), timeSelector)
        );
      });
      return this.props.label ? React19.createElement(PickerFloatingLabel, { dateInput: this._dateInput, label: this.props.label, editorId: id, editorValid: isValid, editorDisabled: this.props.disabled, children: timepicker, style: { width: this.props.width } }) : timepicker;
    };
    TimePickerWithoutContext2.prototype.normalizeTime = function(date2) {
      return setTime(MIDNIGHT_DATE, date2);
    };
    TimePickerWithoutContext2.prototype.setShow = function(show) {
      if (this.show === show) {
        return;
      }
      this.setState({ show });
    };
    TimePickerWithoutContext2.prototype.mergeTime = function(value) {
      return this.value && value ? setTime(this.value, value) : value;
    };
    TimePickerWithoutContext2.displayName = "TimePicker";
    TimePickerWithoutContext2.propTypes = {
      className: PropTypes13.string,
      cancelButton: PropTypes13.bool,
      nowButton: PropTypes13.bool,
      defaultShow: PropTypes13.bool,
      defaultValue: PropTypes13.instanceOf(Date),
      disabled: PropTypes13.bool,
      format: PropTypes13.oneOfType([
        PropTypes13.string,
        PropTypes13.shape({
          skeleton: PropTypes13.string,
          pattern: PropTypes13.string,
          date: PropTypes13.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes13.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes13.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes13.oneOf(["narrow", "short", "long"]),
          year: PropTypes13.oneOf(["numeric", "2-digit"]),
          month: PropTypes13.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes13.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes13.oneOf(["narrow", "short", "long"]),
          hour: PropTypes13.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes13.bool,
          minute: PropTypes13.oneOf(["numeric", "2-digit"]),
          second: PropTypes13.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes13.oneOf(["short", "long"])
        })
      ]),
      formatPlaceholder: PropTypes13.oneOfType([
        PropTypes13.oneOf(["wide", "narrow", "short", "formatPattern"]),
        PropTypes13.shape({
          year: PropTypes13.string,
          month: PropTypes13.string,
          day: PropTypes13.string,
          hour: PropTypes13.string,
          minute: PropTypes13.string,
          second: PropTypes13.string
        })
      ]),
      id: PropTypes13.string,
      ariaLabelledBy: PropTypes13.string,
      ariaDescribedBy: PropTypes13.string,
      min: PropTypes13.instanceOf(Date),
      max: PropTypes13.instanceOf(Date),
      name: PropTypes13.string,
      popupSettings: PropTypes13.shape({
        animate: PropTypes13.bool,
        appendTo: PropTypes13.any,
        popupClass: PropTypes13.string
      }),
      show: PropTypes13.bool,
      steps: PropTypes13.shape({
        hour: PropTypes13.number,
        minute: PropTypes13.number,
        second: PropTypes13.number
      }),
      smoothScroll: PropTypes13.bool,
      tabIndex: PropTypes13.number,
      title: PropTypes13.string,
      value: PropTypes13.instanceOf(Date),
      width: PropTypes13.oneOfType([PropTypes13.number, PropTypes13.string]),
      validationMessage: PropTypes13.string,
      required: PropTypes13.bool,
      validate: PropTypes13.bool,
      valid: PropTypes13.bool,
      size: PropTypes13.oneOf([null, "small", "medium", "large"]),
      rounded: PropTypes13.oneOf([null, "small", "medium", "large", "full"]),
      fillMode: PropTypes13.oneOf([null, "solid", "flat", "outline"])
    };
    TimePickerWithoutContext2.defaultProps = {
      defaultShow: false,
      defaultValue: null,
      disabled: false,
      format: "t",
      max: MAX_TIME,
      min: MIN_TIME,
      popupSettings: {},
      tabIndex: 0,
      steps: {},
      required: false,
      validityStyles: true,
      dateInput: DateInput,
      size: "medium",
      rounded: "medium",
      fillMode: "solid"
    };
    return TimePickerWithoutContext2;
  }(React19.Component)
);
var TimePickerPropsContext = createPropsContext();
var TimePicker = withPropsContext(TimePickerPropsContext, TimePickerWithoutContext);
TimePicker.displayName = "KendoReactTimePicker";
registerForLocalization(TimePickerWithoutContext);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/MultiViewCalendar.js
var React21 = __toESM(require_react());
var PropTypes14 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/HorizontalViewList.js
var React20 = __toESM(require_react());
var __extends18 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DEFAULT_FETCH_MONTHS_COUNT = 2;
var HorizontalViewList = (
  /** @class */
  function(_super) {
    __extends18(HorizontalViewList2, _super);
    function HorizontalViewList2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this.isActive = false;
      _this.focusActiveDate = function() {
        if (!_this._element) {
          return;
        }
        var focusedCell = _this._element.querySelector("td.k-focus");
        var nextActiveCell = _this._element.querySelector(".k-state-pending-focus");
        if (focusedCell && focusedCell[0]) {
          focusedCell[0].classList.remove("k-focus");
        }
        if (nextActiveCell) {
          nextActiveCell.classList.add("k-focus");
        }
        _this.isActive = true;
      };
      _this.blurActiveDate = function() {
        if (!_this._element) {
          return;
        }
        var focusedCell = _this._element.querySelector("td.k-focus");
        if (focusedCell) {
          focusedCell.classList.remove("k-focus");
        }
        _this.isActive = false;
      };
      _this.rotateSelectionRange = function(selectionRange) {
        if (selectionRange.start === null || selectionRange.end === null) {
          return selectionRange;
        }
        var needRotate = selectionRange.end < selectionRange.start;
        return {
          start: needRotate ? selectionRange.end : selectionRange.start,
          end: needRotate ? selectionRange.start : selectionRange.end
        };
      };
      _this.handleDateChange = function(event, isTodayClick) {
        if (isTodayClick === void 0) {
          isTodayClick = false;
        }
        var onChange = _this.props.onChange;
        if (onChange) {
          var args = {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: cloneDate(event.value),
            target: _this,
            isTodayClick
          };
          onChange.call(void 0, args);
        }
      };
      return _this;
    }
    Object.defineProperty(HorizontalViewList2.prototype, "element", {
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(HorizontalViewList2.prototype, "weekNumber", {
      get: function() {
        return Boolean(this.props.showWeekNumbers && this.props.activeView === CalendarViewEnum.month);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(HorizontalViewList2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : HorizontalViewList2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(HorizontalViewList2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : HorizontalViewList2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    HorizontalViewList2.prototype.componentDidUpdate = function() {
      if (this.isActive) {
        this.focusActiveDate();
      }
    };
    HorizontalViewList2.prototype.render = function() {
      var _this = this;
      var selectionRange = this.props.allowReverse ? this.rotateSelectionRange(this.props.selectionRange) : this.props.selectionRange;
      var rootClassNames = classNames("k-calendar-view k-hstack k-align-items-start k-justify-content-center", {
        "k-calendar-monthview": this.props.activeView === CalendarViewEnum.month,
        "k-calendar-yearview": this.props.activeView === CalendarViewEnum.year,
        "k-calendar-decadeview": this.props.activeView === CalendarViewEnum.decade,
        "k-calendar-centuryview": this.props.activeView === CalendarViewEnum.century
      });
      return React20.createElement("div", { ref: function(el) {
        _this._element = el;
      }, className: rootClassNames }, this.props.dates.map(function(date2) {
        return React20.createElement(
          "table",
          { className: "k-calendar-table k-content", key: date2.getTime(), role: "grid" },
          React20.createElement(View, { bus: _this.props.bus, service: _this.props.service, key: date2.getTime(), direction: "horizontal", activeView: _this.props.activeView, cellUID: _this.props.cellUID, viewDate: date2, min: _this.min, max: _this.max, focusedDate: _this.props.focusedDate, selectionRange, selectedDate: _this.props.value, showWeekNumbers: _this.weekNumber, onChange: _this.handleDateChange, onCellEnter: _this.props.onCellEnter, cell: _this.props.cell, weekCell: _this.props.weekCell })
        );
      }));
    };
    HorizontalViewList2.defaultProps = {
      showWeekNumbers: false,
      views: DEFAULT_FETCH_MONTHS_COUNT,
      take: DEFAULT_FETCH_MONTHS_COUNT,
      allowReverse: true,
      min: MIN_DATE2,
      max: MAX_DATE2
    };
    return HorizontalViewList2;
  }(React20.Component)
);

// node_modules/@progress/kendo-react-dateinputs/dist/es/calendar/components/MultiViewCalendar.js
var __extends19 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign14 = function() {
  __assign14 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
var extractDateFromValue = function(min, max, value) {
  if (min === void 0) {
    min = MultiViewCalendarWithoutContext.defaultProps.min;
  }
  if (max === void 0) {
    max = MultiViewCalendarWithoutContext.defaultProps.max;
  }
  return value instanceof Date && !Array.isArray(value) && isInRange(getDate(value), min, max) ? getDate(value) : null;
};
var extractMultipleFromValue = function(min, max, value) {
  if (min === void 0) {
    min = MultiViewCalendarWithoutContext.defaultProps.min;
  }
  if (max === void 0) {
    max = MultiViewCalendarWithoutContext.defaultProps.max;
  }
  return Array.isArray(value) ? value.filter(function(date2) {
    return isInRange(date2, min, max);
  }).map(function(date2) {
    return getDate(date2);
  }) : null;
};
var extractRangeFromValue = function(value) {
  return typeof value === "object" && !(value instanceof Date) && value !== null && !Array.isArray(value) ? value : EMPTY_SELECTIONRANGE;
};
var extractFocusedDate = function(single, multiple, range3) {
  return single || multiple && multiple[0] || range3 && range3.start;
};
var extractActiveRange = function(range3, single) {
  return range3.start === null && single === null ? "start" : range3.end === null ? "end" : "start";
};
var MultiViewCalendarWithoutContext = (
  /** @class */
  function(_super) {
    __extends19(MultiViewCalendarWithoutContext2, _super);
    function MultiViewCalendarWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.dates = [];
      _this.selectedDate = null;
      _this.selectedMultiple = null;
      _this.selectedRange = EMPTY_SELECTIONRANGE;
      _this._focusedDate = new Date();
      _this.cellUID = guid();
      _this.activeRangeEnd = "start";
      _this._element = null;
      _this.intl = null;
      _this.localization = null;
      _this.service = null;
      _this.wrapperID = guid();
      _this.calendarViewList = null;
      _this.isActive = false;
      _this.calculateFocusFromValue = true;
      _this.focus = function() {
        if (_this._element) {
          _this._element.focus();
        }
      };
      _this.clampRange = function(value2) {
        return { start: value2, end: null };
      };
      _this.rangeWithFocused = function(range3, focusedDate2) {
        return {
          start: range3.start,
          end: range3.end === null && range3.start !== null && _this.isActive ? focusedDate2 : range3.end
        };
      };
      _this.generateRange = function(candidate, value2) {
        var end2 = value2.end, start2 = value2.start;
        var shouldSwap = value2.start !== null && candidate.getTime() <= value2.start.getTime();
        if (!_this.props.allowReverse && shouldSwap) {
          return { start: candidate, end: _this.selectedRange.start };
        }
        return _this.activeRange !== "end" ? { start: candidate, end: end2 } : { start: start2 || _this.selectedDate, end: candidate };
      };
      _this.canNavigate = function(action) {
        if (!_this.service) {
          return false;
        }
        var candidate = _this.service.move(_this.focusedDate, action);
        return _this.min <= candidate && candidate <= _this.max || _this.service.isInSameView(candidate, _this.min) || _this.service.isInSameView(candidate, _this.max);
      };
      _this.isListInRange = function(list) {
        return _this.min < list[0] && _this.max > list[Math.max(0, (_this.props.views || MultiViewCalendarWithoutContext2.defaultProps.views) - 1)];
      };
      _this.navigate = function(action) {
        _this.calculateFocusFromValue = false;
        var candidate = _this.move(action);
        _this.setState({ focusedDate: candidate });
      };
      _this.move = function(action) {
        return _this.clampDate(_this.service.move(_this.focusedDate, action));
      };
      _this.clampDate = function(value2) {
        return dateInRange(value2, _this.min, _this.max);
      };
      _this.shouldAutoCorrect = function(candidate, value2) {
        var end2 = value2.end, start2 = value2.start;
        if (_this.activeRange !== "end") {
          return end2 !== null && candidate > end2;
        } else {
          return start2 !== null && candidate < start2;
        }
      };
      _this.handleCellEnter = function(value2) {
        if (_this.props.mode === "range") {
          _this.calculateFocusFromValue = false;
          _this.setState({
            focusedDate: value2
          });
        }
      };
      _this.handleMouseDown = function(event) {
        event.preventDefault();
      };
      _this.handleClick = function(_) {
        if (!_this._element) {
          return;
        }
        _this._element.focus({ preventScroll: true });
      };
      _this.handleFocus = function(event) {
        _this.isActive = true;
        if (!_this.calendarViewList) {
          return;
        }
        _this.calendarViewList.focusActiveDate();
        var onFocus = _this.props.onFocus;
        if (onFocus) {
          onFocus.call(void 0, event);
        }
      };
      _this.handleBlur = function(event) {
        _this.isActive = false;
        if (!_this.calendarViewList) {
          return;
        }
        _this.calendarViewList.blurActiveDate();
        var onBlur = _this.props.onBlur;
        if (onBlur) {
          onBlur.call(void 0, event);
        }
      };
      _this.handleTodayClick = function(event) {
        if (!_this.todayIsInRange) {
          return;
        }
        _this.handleDateChange(event);
      };
      _this.handlePrevButtonClick = function() {
        _this.navigate(Action.PrevView);
      };
      _this.handleNextButtonClick = function() {
        _this.navigate(Action.NextView);
      };
      _this.handleKeyDown = function(event) {
        var keyCode = event.keyCode;
        if (keyCode === Keys.enter) {
          var args = {
            syntheticEvent: event,
            nativeEvent: event.nativeEvent,
            value: _this.focusedDate,
            target: _this
          };
          _this.handleDateChange(args);
        } else {
          var candidate = dateInRange(_this.navigation.move(_this.focusedDate, _this.navigation.action(event), _this.state.activeView, _this.service, event), _this.min, _this.max);
          if (isEqualDate(_this.focusedDate, candidate)) {
            return;
          }
          _this.calculateFocusFromValue = false;
          _this.setState({ focusedDate: candidate });
        }
        event.preventDefault();
      };
      _this.handleViewChange = function(_a9) {
        var view = _a9.view;
        _this.calculateFocusFromValue = false;
        _this.setState({ activeView: view });
      };
      _this.handleDateChange = function(event) {
        var focusedDate2 = cloneDate(event.value);
        var canNavigateDown = _this.bus.canMoveDown(_this.state.activeView);
        if (_this.props.disabled) {
          return;
        }
        if (canNavigateDown) {
          if (event.isTodayClick) {
            _this.bus.moveToBottom(_this.state.activeView);
          } else {
            _this.bus.moveDown(_this.state.activeView, event.syntheticEvent);
            _this.setState({ focusedDate: focusedDate2 });
            return;
          }
        }
        _this.calculateFocusFromValue = true;
        var value2;
        switch (_this.props.mode) {
          case "single":
            value2 = cloneDate(event.value);
            break;
          case "multiple":
            if (Array.isArray(_this.selectedMultiple)) {
              var result = _this.selectedMultiple.slice();
              var index_1 = -1;
              result.forEach(function(date2, idx) {
                if (isEqualDate(date2, event.value)) {
                  index_1 = idx;
                }
              });
              index_1 !== -1 ? result.splice(index_1, 1) : result.push(cloneDate(event.value));
              value2 = result.slice();
            } else {
              if (_this.selectedDate) {
                value2 = [cloneDate(_this.selectedDate), cloneDate(event.value)];
              } else {
                value2 = [cloneDate(event.value)];
              }
            }
            break;
          case "range":
            var hasSelection = _this.selectedRange.start !== null && _this.selectedRange.end !== null && _this.activeRange === "start";
            value2 = hasSelection ? _this.clampRange(event.value) : _this.generateRange(event.value, _this.selectedRange);
            _this.activeRangeEnd = _this.activeRange !== "end" ? "end" : "start";
            break;
          default:
            value2 = cloneDate(event.value);
            break;
        }
        _this.valueDuringOnChange = value2;
        _this.setState({ value: value2, focusedDate: focusedDate2 });
        _this.valueDuringOnChange = value2;
        var onChange = _this.props.onChange;
        if (onChange) {
          var args = {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: value2,
            target: _this
          };
          onChange.call(void 0, args);
        }
        _this.valueDuringOnChange = void 0;
      };
      var value = props.value !== void 0 ? props.value : props.defaultValue || MultiViewCalendarWithoutContext2.defaultProps.defaultValue;
      var selectedDate = extractDateFromValue(_this.min, _this.max, value);
      var selectedMultiple = extractMultipleFromValue(_this.min, _this.max, value);
      var selectedRange = extractRangeFromValue(value);
      var calculatedFocus = extractFocusedDate(selectedDate, selectedMultiple, selectedRange);
      var activeView = viewInRange(CalendarViewEnum[props.defaultActiveView], _this.bottomView, _this.topView);
      var focusedDate = dateInRange(props.focusedDate || calculatedFocus || getToday(), _this.min, _this.max);
      _this.state = {
        value,
        activeView,
        focusedDate
      };
      _this.activeRangeEnd = extractActiveRange(selectedRange, selectedDate);
      _this.bus = new BusViewService(_this.handleViewChange);
      _this.navigation = new NavigationService(_this.bus);
      _this.calculateFocusFromValue = false;
      _this.lastView = activeView;
      _this.lastViewsCount = _this.props.views || HorizontalViewList.defaultProps.views;
      return _this;
    }
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "element", {
      /**
       * Gets the wrapping element of the MultiViewCalendar component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "value", {
      /**
       * Gets the value of the MultiViewCalendar.
       */
      get: function() {
        return this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "focusedDate", {
      /**
       * Gets the current focused date of the MultiViewCalendar.
       */
      get: function() {
        return cloneDate(this._focusedDate);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "min", {
      get: function() {
        return getDate(this.props.min !== void 0 ? this.props.min : MultiViewCalendarWithoutContext2.defaultProps.min);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "max", {
      get: function() {
        return getDate(this.props.max !== void 0 ? this.props.max : MultiViewCalendarWithoutContext2.defaultProps.max);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "bottomView", {
      get: function() {
        return CalendarViewEnum[this.props.bottomView !== void 0 ? this.props.bottomView : MultiViewCalendarWithoutContext2.defaultProps.bottomView];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "topView", {
      get: function() {
        return CalendarViewEnum[this.props.topView !== void 0 ? this.props.topView : MultiViewCalendarWithoutContext2.defaultProps.topView];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "activeRange", {
      get: function() {
        return this.props.activeRangeEnd !== void 0 ? this.props.activeRangeEnd : this.activeRangeEnd;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiViewCalendarWithoutContext2.prototype, "todayIsInRange", {
      get: function() {
        return isInRange(getToday(), getDate(this.min), getDate(this.max));
      },
      enumerable: false,
      configurable: true
    });
    MultiViewCalendarWithoutContext2.prototype.componentDidMount = function() {
      this.calculateFocusFromValue = true;
    };
    MultiViewCalendarWithoutContext2.prototype.componentDidUpdate = function() {
      if (this.calendarViewList) {
        (this.isActive ? this.calendarViewList.focusActiveDate : this.calendarViewList.blurActiveDate)();
      }
      var stateValue = extractDateFromValue(this.min, this.max, this.value);
      this.calculateFocusFromValue = Boolean(this.selectedDate && stateValue && (this.selectedDate.getTime() && stateValue.getTime()));
      this.lastView = this.state.activeView;
      this.lastViewsCount = this.props.views || HorizontalViewList.defaultProps.views;
    };
    MultiViewCalendarWithoutContext2.prototype.render = function() {
      var _this = this;
      if (this.props._ref) {
        this.props._ref(this);
      }
      this.intl = provideIntlService(this);
      this.localization = provideLocalizationService(this);
      this.bus.configure(this.bottomView, this.topView);
      var activeView = viewInRange(this.state.activeView, this.bottomView, this.topView);
      this.service = this.bus.service(activeView, this.intl);
      this.selectedDate = extractDateFromValue(this.min, this.max, this.value);
      this.selectedMultiple = extractMultipleFromValue(this.min, this.max, this.value);
      this.selectedRange = extractRangeFromValue(this.value);
      var calculatedFocus = extractFocusedDate(this.selectedDate, this.selectedMultiple, this.selectedRange);
      this._focusedDate = dateInRange(this.calculateFocusFromValue && calculatedFocus !== null ? calculatedFocus : this.state.focusedDate, this.min, this.max);
      var wrapperClassName = classNames("k-widget k-calendar k-calendar-range", {
        "k-disabled": this.props.disabled
      }, this.props.className);
      var visualizedRange = this.rangeWithFocused(this.selectedRange, this.focusedDate);
      var prevViewTitle = this.localization.toLanguageString(prevView, messages[prevView]);
      var nextViewTittle = this.localization.toLanguageString(nextView, messages[nextView]);
      var isPrevDisabled = !this.canNavigate(Action.PrevView);
      var isNextDisabled = !this.canNavigate(Action.NextView);
      var prevBtnAria = { "aria-disabled": isPrevDisabled };
      var nextBtnAria = { "aria-disabled": isNextDisabled };
      var didViewChange = this.lastView !== activeView;
      var isDateInList = this.dates && this.service.isInArray(this.focusedDate, this.dates);
      var didViewsCountChange = this.lastViewsCount !== this.props.views;
      if (!isDateInList || didViewChange || didViewsCountChange) {
        this.dates = this.service.datesList(this.focusedDate, this.props.views || HorizontalViewList.defaultProps.views);
      }
      var activeDate = cloneDate(this.dates && this.dates[0] ? this.dates[0] : getToday());
      return React21.createElement(
        "div",
        { ref: function(el) {
          _this._element = el;
        }, className: wrapperClassName, id: this.props.id || this.wrapperID, "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy, tabIndex: !this.props.disabled ? this.props.tabIndex : void 0, onFocus: this.handleFocus, onBlur: this.handleBlur, onMouseDown: this.handleMouseDown, onClick: this.handleClick, onKeyDown: this.handleKeyDown, "aria-disabled": this.props.disabled },
        React21.createElement(Header, { key: ".kendo.calendar.header.".concat(activeDate.getTime()), activeView, currentDate: activeDate, min: this.min, max: this.max, rangeLength: this.props.views, bus: this.bus, service: this.service, headerTitle: this.props.headerTitle, commands: React21.createElement(
          React21.Fragment,
          null,
          React21.createElement(Button, __assign14({ type: "button", className: "k-calendar-nav-prev", icon: "chevron-left", svgIcon: chevronLeftIcon, fillMode: "flat", title: prevViewTitle, disabled: isPrevDisabled, onClick: this.handlePrevButtonClick }, prevBtnAria)),
          React21.createElement(TodayCommand, { min: this.min, max: this.max, onClick: this.handleTodayClick, disabled: !this.todayIsInRange }),
          React21.createElement(Button, __assign14({ type: "button", className: "k-calendar-nav-next", icon: "chevron-right", svgIcon: chevronRightIcon, fillMode: "flat", title: nextViewTittle, disabled: isNextDisabled, onClick: this.handleNextButtonClick }, nextBtnAria))
        ) }),
        React21.createElement(HorizontalViewList, { ref: function(el) {
          _this.calendarViewList = el;
        }, dates: this.dates, activeView, focusedDate: this.focusedDate, min: this.min, max: this.max, bus: this.bus, service: this.service, selectionRange: visualizedRange, value: this.selectedMultiple || this.selectedDate, cellUID: this.cellUID, views: this.props.views, onChange: this.handleDateChange, showWeekNumbers: this.props.weekNumber, onCellEnter: this.handleCellEnter, cell: this.props.cell, weekCell: this.props.weekCell, headerTitle: this.props.headerTitle })
      );
    };
    MultiViewCalendarWithoutContext2.displayName = "MultiViewCalendar";
    MultiViewCalendarWithoutContext2.propTypes = {
      activeRangeEnd: PropTypes14.oneOf(["start", "end"]),
      allowReverse: PropTypes14.bool,
      bottomView: PropTypes14.oneOf(["month", "year", "decade", "century"]),
      className: PropTypes14.string,
      defaultActiveView: PropTypes14.oneOf(["month", "year", "decade", "century"]),
      defaultValue: PropTypes14.oneOfType([
        nullable(PropTypes14.instanceOf(Date)),
        PropTypes14.arrayOf(PropTypes14.instanceOf(Date)),
        PropTypes14.shape({
          start: nullable(PropTypes14.instanceOf(Date)),
          end: nullable(PropTypes14.instanceOf(Date))
        })
      ]),
      disabled: PropTypes14.bool,
      focusedDate: PropTypes14.instanceOf(Date),
      id: PropTypes14.string,
      ariaLabelledBy: PropTypes14.string,
      ariaDescribedBy: PropTypes14.string,
      max: PropTypes14.instanceOf(Date),
      min: PropTypes14.instanceOf(Date),
      mode: PropTypes14.oneOf(["single", "multiple", "range"]),
      onBlur: PropTypes14.func,
      onChange: PropTypes14.func,
      onFocus: PropTypes14.func,
      tabIndex: PropTypes14.number,
      topView: PropTypes14.oneOf(["month", "year", "decade", "century"]),
      value: PropTypes14.oneOfType([
        nullable(PropTypes14.instanceOf(Date)),
        PropTypes14.arrayOf(PropTypes14.instanceOf(Date)),
        PropTypes14.shape({
          start: nullable(PropTypes14.instanceOf(Date).isRequired),
          end: nullable(PropTypes14.instanceOf(Date).isRequired)
        })
      ]),
      views: function(props, propName, componentName) {
        var views = props[propName];
        if (views !== void 0 && views < 1) {
          return new Error("Invalid prop '".concat(propName, "' supplied to") + "'".concat(componentName, "'. The '").concat(propName, "' property cannot be less than 1'"));
        }
        return null;
      },
      weekNumber: PropTypes14.bool
    };
    MultiViewCalendarWithoutContext2.defaultProps = {
      disabled: false,
      min: MIN_DATE2,
      max: MAX_DATE2,
      navigation: true,
      defaultActiveView: "month",
      defaultValue: null,
      topView: "century",
      tabIndex: 0,
      bottomView: "month",
      views: 2,
      allowReverse: false
    };
    return MultiViewCalendarWithoutContext2;
  }(React21.Component)
);
var MultiViewCalendarPropsContext = createPropsContext();
var MultiViewCalendar = withPropsContext(MultiViewCalendarPropsContext, MultiViewCalendarWithoutContext);
MultiViewCalendar.displayName = "KendoReactMultiViewCalendar";
registerForIntl(MultiViewCalendarWithoutContext);
registerForLocalization(MultiViewCalendarWithoutContext);

// node_modules/@progress/kendo-react-dateinputs/dist/es/daterangepicker/DateRangePicker.js
var React22 = __toESM(require_react());
var PropTypes15 = __toESM(require_prop_types());
var __extends20 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign15 = function() {
  __assign15 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign15.apply(this, arguments);
};
var DateRangePickerWithoutContext = (
  /** @class */
  function(_super) {
    __extends20(DateRangePickerWithoutContext2, _super);
    function DateRangePickerWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this._calendar = null;
      _this._startDateInput = React22.createRef();
      _this._endDateInput = React22.createRef();
      _this._popupId = guid();
      _this._startInputId = guid();
      _this._endInputId = guid();
      _this.shouldFocusDateInput = false;
      _this.shouldFocusCalendar = false;
      _this.focus = function() {
        if (_this.startDateInput) {
          _this.startDateInput.focus();
        }
      };
      _this.setCalendarRef = function(calendar) {
        _this._calendar = calendar;
      };
      _this.focusCalendarElement = function() {
        if (_this._calendar && _this._calendar.element) {
          _this._calendar.element.focus({ preventScroll: true });
        }
      };
      _this.calculateValue = function(props2, state) {
        var value = props2.value !== void 0 ? props2.value : state.value;
        return value || EMPTY_SELECTIONRANGE;
      };
      _this.calculateShow = function(nextProps, nextState) {
        return nextProps.show !== void 0 ? nextProps.show : nextState.show;
      };
      _this.handleReverseClick = function(event) {
        var value = {
          start: _this.value.end,
          end: _this.value.start
        };
        var args = {
          syntheticEvent: event,
          nativeEvent: event.nativeEvent
        };
        _this.handleChange(value, args);
      };
      _this.handleReverseMouseDown = function(event) {
        event.preventDefault();
      };
      _this.handleFocus = function(event) {
        clearTimeout(_this.nextTickId);
        if (!_this.shouldFocusDateInput) {
          _this.setShow(true);
        }
        var onFocus = _this.props.onFocus;
        if (onFocus) {
          onFocus.call(void 0, event);
        }
      };
      _this.handleBlur = function(event) {
        _this.nextTick(function() {
          _this.setShow(false);
        });
        var onBlur = _this.props.onBlur;
        if (onBlur) {
          onBlur.call(void 0, event);
        }
      };
      _this.handleEndChange = function(event) {
        var value = {
          start: _this.value.start,
          end: cloneDate(event.value || void 0)
        };
        _this.handleChange(value, event);
      };
      _this.handleStartChange = function(event) {
        var value = {
          start: cloneDate(event.value || void 0),
          end: _this.value.end
        };
        _this.handleChange(value, event);
      };
      _this.extractRangeFromValue = function(event) {
        if (!Array.isArray(event.value) && !(event.value instanceof Date)) {
          return event.value || EMPTY_SELECTIONRANGE;
        }
        var candidate = Array.isArray(event.value) ? event.value[0] : event.value;
        return {
          start: _this.value.end !== null ? candidate : _this.value.start,
          end: _this.value.start !== null ? candidate : _this.value.end
        };
      };
      _this.handleCalendarChange = function(event) {
        var value = _this.extractRangeFromValue(event);
        _this.handleChange(value, event);
      };
      _this.handleKeyDown = function(event) {
        var keyCode = event.keyCode, altKey = event.altKey;
        if (keyCode === Keys.esc) {
          event.preventDefault();
          _this.shouldFocusDateInput = true;
          _this.setShow(false);
        } else if (altKey && keyCode === Keys.down) {
          event.preventDefault();
          _this.shouldFocusCalendar = true;
          _this.setShow(true);
        } else if (keyCode === Keys.tab && _this.show && _this._calendar && _this._calendar.element && _this.endDateInput && _this.endDateInput.element && document && document.activeElement === _this.endDateInput.element) {
          event.preventDefault();
          _this.focusCalendarElement();
        }
      };
      _this.handleChange = function(value, event) {
        _this.setState({ value });
        _this.valueDuringOnChange = value;
        var onChange = _this.props.onChange;
        if (onChange) {
          var args = {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: _this.value,
            show: _this.show,
            target: _this
          };
          onChange.call(void 0, args);
        }
        _this.valueDuringOnChange = void 0;
      };
      validatePackage(packageMetadata);
      _this.state = {
        show: _this.props.show || _this.props.defaultShow || DateRangePickerWithoutContext2.defaultProps.defaultShow,
        value: _this.props.value || _this.props.defaultValue || DateRangePickerWithoutContext2.defaultProps.defaultValue
      };
      _this.nextTick = _this.nextTick.bind(_this);
      _this.setShow = _this.setShow.bind(_this);
      _this.focusCalendarElement = _this.focusCalendarElement.bind(_this);
      _this.focusDateInputElement = _this.focusDateInputElement.bind(_this);
      return _this;
    }
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "element", {
      /**
       * Gets the wrapping element of the DateRangePicker.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "startDateInput", {
      /**
       * Gets the start DateInput component inside the DatePicker component.
       */
      get: function() {
        return this._startDateInput.current;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "endDateInput", {
      /**
       * Gets the end DateInput component inside the DatePicker component.
       */
      get: function() {
        return this._endDateInput.current;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "calendar", {
      /**
       * Gets the MultiVieCalendar inside the DateRangePicker.
       */
      get: function() {
        return this._calendar;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "value", {
      /**
       * Gets the value of the DateRangePicker.
       */
      get: function() {
        var value = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
        return value || EMPTY_SELECTIONRANGE;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "show", {
      /**
       * Gets the popup state of the DateRangePicker.
       */
      get: function() {
        return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.props.show !== void 0 ? this.props.show : this.state.show;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : DateRangePickerWithoutContext2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateRangePickerWithoutContext2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : DateRangePickerWithoutContext2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    DateRangePickerWithoutContext2.prototype.componentDidMount = function() {
      if (this.show) {
        this.forceUpdate();
      }
    };
    DateRangePickerWithoutContext2.prototype.componentDidUpdate = function() {
      if (this.shouldFocusCalendar) {
        this.focusCalendarElement();
      }
      if (this.shouldFocusDateInput) {
        this.focusDateInputElement();
      }
      this.shouldFocusCalendar = false;
      this.shouldFocusDateInput = false;
    };
    DateRangePickerWithoutContext2.prototype.componentWillUnmount = function() {
      clearTimeout(this.nextTickId);
    };
    DateRangePickerWithoutContext2.prototype.render = function() {
      var _this = this;
      var value = this.value || EMPTY_SELECTIONRANGE;
      var startDateInputId = (this.props.startDateInputSettings || {}).id || this._startInputId;
      var endDateInputId = (this.props.endDateInputSettings || {}).id || this._endInputId;
      var rootClassName = classNames("k-daterangepicker", {
        "k-disabled": this.props.disabled
      }, this.props.className);
      var localizationService = provideLocalizationService(this);
      var startMessage = localizationService.toLanguageString(start, messages[start]);
      var endMessage = localizationService.toLanguageString(end, messages[end]);
      var separatorMessage = localizationService.toLanguageString(separator, messages[separator]);
      var startDateInputProps = __assign15(__assign15({ label: startMessage, format: this.props.format, min: this.min, max: this.max, id: this._startInputId, disabled: this.props.disabled, valid: this.props.valid, tabIndex: this.props.tabIndex, ariaExpanded: this.show }, this.props.startDateInputSettings), { value: value.start, onChange: this.handleStartChange });
      var endDateInputProps = __assign15(__assign15({ label: endMessage, format: this.props.format, min: this.min, max: this.max, id: this._endInputId, disabled: this.props.disabled, valid: this.props.valid, tabIndex: this.props.tabIndex, ariaExpanded: this.show }, this.props.endDateInputSettings), { value: value.end, onChange: this.handleEndChange });
      var popupProps = __assign15(__assign15({ popupClass: "k-daterangepicker-popup", animate: this._element !== null, anchor: this._element, id: this._popupId, anchorAlign: {
        horizontal: "left",
        vertical: "bottom"
      }, popupAlign: {
        horizontal: "left",
        vertical: "top"
      } }, this.props.popupSettings), { show: this.show });
      var calendarProps = __assign15(__assign15({ min: this.min, max: this.max, allowReverse: this.props.allowReverse, mode: "range", focusedDate: this.props.focusedDate, disabled: this.props.disabled }, this.props.calendarSettings), { value, onChange: this.handleCalendarChange });
      var calendar = this.props.calendar ? React22.createElement(this.props.calendar, __assign15({}, calendarProps)) : React22.createElement(MultiViewCalendar, __assign15({}, calendarProps, { ref: this.setCalendarRef }));
      var reverseButton = React22.createElement(
        Button,
        __assign15({ className: "k-select", fillMode: "flat", title: provideLocalizationService(this).toLanguageString(swapStartEnd, messages[swapStartEnd]), onMouseDown: this.handleReverseMouseDown, onClick: this.handleReverseClick }, {
          "aria-controls": startDateInputId + " " + endDateInputId,
          "aria-label": provideLocalizationService(this).toLanguageString(swapStartEnd, messages[swapStartEnd])
        }),
        React22.createElement(IconWrap, { style: { transform: "rotate(90deg)" }, name: "arrows-swap", icon: arrowsSwapIcon })
      );
      return React22.createElement(
        "span",
        { ref: function(span) {
          _this._element = span;
        }, className: rootClassName, style: this.props.style, id: this.props.id, "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy, tabIndex: this.props.tabIndex, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown },
        this.props.startDateInput ? React22.createElement(this.props.startDateInput, __assign15({}, startDateInputProps)) : React22.createElement(DateInput, __assign15({}, startDateInputProps, { ref: this._startDateInput, ariaRole: "combobox", ariaControls: this._popupId })),
        (this.props.allowReverse || this.props.calendarSettings && this.props.calendarSettings.allowReverse) && this.props.swapButton ? reverseButton : separatorMessage,
        this.props.endDateInput ? React22.createElement(this.props.endDateInput, __assign15({}, endDateInputProps)) : React22.createElement(DateInput, __assign15({}, endDateInputProps, { ref: this._endDateInput, ariaRole: "combobox", ariaControls: this._popupId })),
        this.props.popup ? React22.createElement(this.props.popup, __assign15({}, popupProps), calendar) : React22.createElement(Popup, __assign15({}, popupProps), calendar)
      );
    };
    DateRangePickerWithoutContext2.prototype.focusDateInputElement = function() {
      if (!document || !this.startDateInput || !this.startDateInput.element || !this.endDateInput || !this.endDateInput.element) {
        return;
      }
      if ((this.value.start === null || this.value.end !== null) && document.activeElement !== this.endDateInput.element) {
        this.startDateInput.element.focus({ preventScroll: true });
      } else if (document.activeElement !== this.startDateInput.element) {
        this.endDateInput.element.focus({ preventScroll: true });
      }
    };
    DateRangePickerWithoutContext2.prototype.nextTick = function(f) {
      clearTimeout(this.nextTickId);
      this.nextTickId = window.setTimeout(function() {
        return f();
      });
    };
    DateRangePickerWithoutContext2.prototype.setShow = function(show) {
      if (this.show === show) {
        return;
      }
      this.setState({ show });
    };
    DateRangePickerWithoutContext2.displayName = "DateRangePicker";
    DateRangePickerWithoutContext2.propTypes = {
      allowReverse: PropTypes15.bool,
      calendarSettings: PropTypes15.any,
      className: PropTypes15.string,
      defaultShow: PropTypes15.bool,
      defaultValue: PropTypes15.shape({
        start: nullable(PropTypes15.instanceOf(Date).isRequired),
        end: nullable(PropTypes15.instanceOf(Date).isRequired)
      }),
      disabled: PropTypes15.bool,
      endDateInputSettings: PropTypes15.shape(DateInputWithoutContext.propTypes),
      focusedDate: PropTypes15.instanceOf(Date),
      format: PropTypes15.oneOfType([
        PropTypes15.string,
        PropTypes15.shape({
          skeleton: PropTypes15.string,
          pattern: PropTypes15.string,
          date: PropTypes15.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes15.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes15.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes15.oneOf(["narrow", "short", "long"]),
          year: PropTypes15.oneOf(["numeric", "2-digit"]),
          month: PropTypes15.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes15.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes15.oneOf(["narrow", "short", "long"]),
          hour: PropTypes15.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes15.bool,
          minute: PropTypes15.oneOf(["numeric", "2-digit"]),
          second: PropTypes15.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes15.oneOf(["short", "long"])
        })
      ]),
      id: PropTypes15.string,
      ariaLabelledBy: PropTypes15.string,
      ariaDescribedBy: PropTypes15.string,
      max: PropTypes15.instanceOf(Date),
      min: PropTypes15.instanceOf(Date),
      onBlur: PropTypes15.func,
      onChange: PropTypes15.func,
      onFocus: PropTypes15.func,
      popupSettings: PropTypes15.any,
      show: PropTypes15.bool,
      startDateInputSettings: PropTypes15.any,
      style: PropTypes15.any,
      swapButton: PropTypes15.any,
      tabIndex: PropTypes15.number,
      value: PropTypes15.shape({
        start: nullable(PropTypes15.instanceOf(Date).isRequired),
        end: nullable(PropTypes15.instanceOf(Date).isRequired)
      })
    };
    DateRangePickerWithoutContext2.defaultProps = {
      allowReverse: false,
      defaultShow: false,
      defaultValue: EMPTY_SELECTIONRANGE,
      disabled: false,
      format: "d",
      max: MAX_DATE2,
      min: MIN_DATE2,
      swapButton: false
    };
    return DateRangePickerWithoutContext2;
  }(React22.Component)
);
var DateRangePickerPropsContext = createPropsContext();
var DateRangePicker = withPropsContext(DateRangePickerPropsContext, DateRangePickerWithoutContext);
DateRangePicker.displayName = "KendoReactDateRangePicker";
registerForLocalization(DateRangePickerWithoutContext);

// node_modules/@progress/kendo-react-dateinputs/dist/es/datetimepicker/DateTimePicker.js
var React24 = __toESM(require_react());
var PropTypes16 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dateinputs/dist/es/datetimepicker/DateTimeSelector.js
var React23 = __toESM(require_react());
var __extends21 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign16 = function() {
  __assign16 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign16.apply(this, arguments);
};
var DateTimeSelector = (
  /** @class */
  function(_super) {
    __extends21(DateTimeSelector2, _super);
    function DateTimeSelector2(props) {
      var _this = _super.call(this, props) || this;
      _this._calendar = null;
      _this._timePart = null;
      _this._cancelButton = null;
      _this._acceptButton = null;
      _this._calendarWrap = null;
      _this.shouldFocusPart = false;
      _this.focus = function(args) {
        Promise.resolve().then(function() {
          if (_this.state.tab === "time" && _this._timePart) {
            _this._timePart.focus(args);
          }
          var calendarElement = _this.calendarElement();
          if (_this.state.tab === "date" && calendarElement) {
            calendarElement.focus(args);
          }
        });
      };
      _this.calendarElement = function() {
        return _this._calendar && _this._calendar.element || _this._calendarWrap && _this._calendarWrap.querySelector(".k-widget.k-calendar");
      };
      _this.move = function(direction) {
        if (direction === "right" && _this.state.tab === "time") {
          return;
        }
        if (direction === "left" && _this.state.tab === "date") {
          return;
        }
        var nextPart = direction === "left" ? "date" : "time";
        _this.shouldFocusPart = true;
        _this.setState({ tab: nextPart });
      };
      _this.handleReject = function(event) {
        _this.setState({ dateValue: _this.props.value, timeValue: _this.props.value || MIDNIGHT_DATE2 });
        var value = _this.mergeDate(_this.props.value, _this.props.value || MIDNIGHT_DATE2);
        if (_this.props.onReject) {
          var args = {
            nativeEvent: event.nativeEvent,
            syntheticEvent: event,
            target: _this,
            value
          };
          _this.props.onReject.call(void 0, args);
        }
      };
      _this.handleAccept = function(event, timeOverride) {
        if (!_this.state.dateValue || !_this.state.timeValue || !_this.hasDateValue) {
          return;
        }
        var value = _this.mergeDate(_this.state.dateValue, timeOverride || _this.state.timeValue);
        _this.props.onChange.call(void 0, {
          syntheticEvent: event,
          nativeEvent: event.nativeEvent,
          value,
          target: _this
        });
      };
      _this.handleNowClick = function(event) {
        _this.setState({ timeValue: getNow() });
        _this.handleAccept(event, getNow());
      };
      _this.handleCalendarValueChange = function(event) {
        event.syntheticEvent.stopPropagation();
        _this.setState({ dateValue: event.value, tab: "time" });
        _this.shouldFocusPart = true;
      };
      _this.handleTimeListContainerChange = function(candidate) {
        _this.setState({ timeValue: candidate });
      };
      _this.handleDateClick = function(event) {
        event.stopPropagation();
        _this.move("left");
      };
      _this.handleTimeClick = function(event) {
        event.stopPropagation();
        _this.move("right");
      };
      _this.handleKeyDown = function(event) {
        var keyCode = event.keyCode, altKey = event.altKey;
        switch (keyCode) {
          case Keys.enter:
            if (!_this.hasActiveButton() && _this.hasDateValue) {
              _this.handleAccept(event);
            }
            return;
          case Keys.left:
            if (!altKey) {
              return;
            }
            _this.move("left");
            return;
          case Keys.right:
            if (!altKey) {
              return;
            }
            _this.move("right");
            return;
          default:
            return;
        }
      };
      _this.handleTimePartMount = function(value) {
        _this.setState({ timeValue: value });
      };
      _this.state = {
        tab: "date",
        dateValue: _this.props.value,
        timeValue: _this.props.value || MIDNIGHT_DATE2
      };
      return _this;
    }
    Object.defineProperty(DateTimeSelector2.prototype, "calendar", {
      get: function() {
        return this._calendar;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimeSelector2.prototype, "timePart", {
      get: function() {
        return this._timePart;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimeSelector2.prototype, "hasDateValue", {
      get: function() {
        return this.state.dateValue !== null;
      },
      enumerable: false,
      configurable: true
    });
    DateTimeSelector2.prototype.componentDidUpdate = function() {
      if (this.shouldFocusPart) {
        this.focus({ preventScroll: true });
      }
      this.shouldFocusPart = false;
    };
    DateTimeSelector2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, disabled = _a9.disabled, cancelButton = _a9.cancelButton, min = _a9.min, max = _a9.max, weekNumber = _a9.weekNumber, focusedDate = _a9.focusedDate, format = _a9.format;
      var rootClassName = classNames({
        "k-date-tab": this.state.tab === "date",
        "k-time-tab": this.state.tab === "time",
        "k-disabled": disabled
      }, "k-datetime-wrap");
      var localizationService = provideLocalizationService(this);
      var dateMessage = localizationService.toLanguageString(date, messages[date]);
      var timeMessage = localizationService.toLanguageString(time, messages[time]);
      var cancelMessage = localizationService.toLanguageString(dateTimePickerCancel, messages[dateTimePickerCancel]);
      var setMessage = localizationService.toLanguageString(dateTimePickerSet, messages[dateTimePickerSet]);
      var calendarProps = {
        min,
        max,
        weekNumber,
        focusedDate,
        disabled: disabled || this.state.tab !== "date",
        value: this.state.dateValue,
        onChange: this.handleCalendarValueChange,
        navigation: false
      };
      return React23.createElement(
        "div",
        { onKeyDown: this.handleKeyDown, className: rootClassName, tabIndex: -1 },
        React23.createElement(
          "div",
          { className: "k-datetime-buttongroup" },
          React23.createElement(
            ButtonGroup,
            { width: "100%" },
            React23.createElement(Button, { type: "button", selected: this.state.tab === "date", togglable: true, onClick: this.handleDateClick }, dateMessage),
            React23.createElement(Button, { type: "button", selected: this.state.tab === "time", togglable: true, onClick: this.handleTimeClick }, timeMessage)
          )
        ),
        React23.createElement(
          "div",
          { className: "k-datetime-selector" },
          React23.createElement("div", { className: "k-datetime-calendar-wrap", ref: function(e) {
            return _this._calendarWrap = e;
          } }, this.props.calendar ? React23.createElement(this.props.calendar, __assign16({}, calendarProps)) : React23.createElement(Calendar, __assign16({ ref: function(calendar) {
            _this._calendar = calendar;
          } }, calendarProps))),
          React23.createElement("div", { className: "k-datetime-time-wrap" }, React23.createElement(TimePart, { key: 1, onNowClick: this.handleNowClick, disabled: disabled || this.state.tab !== "time", ref: function(timePart) {
            _this._timePart = timePart;
          }, min: this.minTime || MIN_TIME, max: this.maxTime || MAX_TIME, steps: this.props.steps, value: this.state.timeValue, format, onChange: this.handleTimeListContainerChange, onMount: this.handleTimePartMount }))
        ),
        React23.createElement(
          "div",
          { className: "k-datetime-footer k-actions k-actions-stretched " },
          cancelButton && React23.createElement(Button, __assign16({ type: "button", ref: function(btn) {
            _this._cancelButton = btn;
          }, className: "k-time-cancel", onClick: this.handleReject, title: cancelMessage }, { "aria-label": cancelMessage }), cancelMessage),
          React23.createElement(Button, __assign16({ type: "button", themeColor: "primary", ref: function(btn) {
            _this._acceptButton = btn;
          }, className: "k-time-accept", disabled: !this.hasDateValue, onClick: this.handleAccept, title: setMessage }, { "aria-label": setMessage }), setMessage)
        )
      );
    };
    Object.defineProperty(DateTimeSelector2.prototype, "minTime", {
      get: function() {
        return this.props.minTime !== void 0 ? this.props.minTime : this.normalizeRange(this.props.min, this.state.dateValue);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimeSelector2.prototype, "maxTime", {
      get: function() {
        return this.props.maxTime !== void 0 ? this.props.maxTime : this.normalizeRange(this.props.max, this.state.dateValue);
      },
      enumerable: false,
      configurable: true
    });
    DateTimeSelector2.prototype.normalizeRange = function(candidate, value) {
      return isEqualDate(candidate, value || getToday()) ? candidate : null;
    };
    DateTimeSelector2.prototype.hasActiveButton = function() {
      if (!this._acceptButton) {
        return false;
      }
      return this._acceptButton && document.activeElement === this._acceptButton.element || this._cancelButton && document.activeElement === this._cancelButton.element;
    };
    DateTimeSelector2.prototype.mergeTime = function(current, candidate) {
      return current && candidate ? setTime(candidate, current) : candidate;
    };
    DateTimeSelector2.prototype.mergeDate = function(candidate, value) {
      return candidate ? setTime(candidate || getToday(), value) : value;
    };
    return DateTimeSelector2;
  }(React23.Component)
);
registerForLocalization(DateTimeSelector);

// node_modules/@progress/kendo-react-dateinputs/dist/es/datetimepicker/DateTimePicker.js
var __extends22 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign17 = function() {
  __assign17 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign17.apply(this, arguments);
};
var DateTimePickerWithoutContext = (
  /** @class */
  function(_super) {
    __extends22(DateTimePickerWithoutContext2, _super);
    function DateTimePickerWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this._popupId = guid();
      _this._element = null;
      _this._dateInput = React24.createRef();
      _this._dateTimeSelector = null;
      _this.shouldFocusDateInput = false;
      _this.prevShow = false;
      _this.focus = function() {
        var dateInputElement = _this.dateInputElement();
        if (dateInputElement) {
          dateInputElement.focus();
        }
      };
      _this.handleReject = function() {
        _this.shouldFocusDateInput = true;
        _this.setShow(false);
      };
      _this.handleValueChange = function(event) {
        _this.setState({
          value: cloneDate(event.value || void 0),
          show: false
        });
        _this.valueDuringOnChange = event.value;
        _this.showDuringOnChange = false;
        _this.shouldFocusDateInput = true;
        var onChange = _this.props.onChange;
        if (onChange) {
          onChange.call(void 0, {
            syntheticEvent: event.syntheticEvent,
            nativeEvent: event.nativeEvent,
            value: _this.value,
            show: _this.show,
            target: _this
          });
        }
        _this.valueDuringOnChange = void 0;
        _this.showDuringOnChange = void 0;
      };
      _this.handleFocus = function() {
        _this.setState({ focused: true });
      };
      _this.handleBlur = function() {
        _this.setState({ focused: false });
        _this.setShow(false);
      };
      _this.handleDateIconClick = function() {
        if (_this.props.disabled) {
          return;
        }
        _this.shouldFocusDateInput = true;
        _this.setShow(!_this.show);
      };
      _this.handleIconMouseDown = function(event) {
        event.preventDefault();
      };
      _this.handleKeyDown = function(event) {
        var altKey = event.altKey, keyCode = event.keyCode;
        if (keyCode === Keys.esc) {
          _this.shouldFocusDateInput = true;
          _this.setShow(false);
          return;
        }
        if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
          event.preventDefault();
          event.stopPropagation();
          _this.shouldFocusDateInput = keyCode === Keys.up;
          _this.setShow(keyCode === Keys.down);
        }
      };
      _this.dateInputElement = function() {
        return _this.dateInput && _this.dateInput.element || _this.element && _this.element.querySelector(".k-dateinput > input.k-input-inner");
      };
      validatePackage(packageMetadata);
      _this.state = {
        value: _this.props.defaultValue || DateTimePickerWithoutContext2.defaultProps.defaultValue,
        show: _this.props.defaultShow || DateTimePickerWithoutContext2.defaultProps.defaultShow,
        focused: false
      };
      return _this;
    }
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "element", {
      /**
       * Gets the wrapping element of the DateTimePicker.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "dateInput", {
      /**
       * Gets the DateInput component inside the DateTimePicker component.
       */
      get: function() {
        return this._dateInput.current;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "value", {
      /**
       * Gets the value of the DateTimePicker.
       */
      get: function() {
        var value = this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
        return value !== null ? cloneDate(value) : null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "show", {
      /**
       * Gets the popup state of the DateTimePicker.
       */
      get: function() {
        return this.showDuringOnChange !== void 0 ? this.showDuringOnChange : this.props.show !== void 0 ? this.props.show : this.state.show;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the DateTimePicker.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "min", {
      get: function() {
        return this.props.min !== void 0 ? this.props.min : DateTimePickerWithoutContext2.defaultProps.min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "max", {
      get: function() {
        return this.props.max !== void 0 ? this.props.max : DateTimePickerWithoutContext2.defaultProps.max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the DateTimePicker is set.
       */
      get: function() {
        var inRange2 = isInDateRange(this.value, this.min, this.max) && isInTimeRange(this.value, this.props.minTime || MIN_TIME2, this.props.maxTime || MAX_TIME);
        var customError = this.props.validationMessage !== void 0;
        var isValid = (!this.required || this.value !== null) && inRange2;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          rangeOverflow: this.value && this.max.getTime() < this.value.getTime() || false,
          rangeUnderflow: this.value && this.value.getTime() < this.min.getTime() || false,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "validityStyles", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : DateTimePickerWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : DateTimePickerWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DateTimePickerWithoutContext2.prototype, "dateInputComp", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.dateInput || DateTimePickerWithoutContext2.defaultProps.dateInput;
      },
      enumerable: false,
      configurable: true
    });
    DateTimePickerWithoutContext2.prototype.componentDidMount = function() {
      if (this.show) {
        this.forceUpdate();
      }
    };
    DateTimePickerWithoutContext2.prototype.componentDidUpdate = function() {
      var dateInputElement = this.dateInputElement();
      if (this._dateTimeSelector && this.show && !this.prevShow) {
        this._dateTimeSelector.focus({ preventScroll: true });
      }
      if (dateInputElement && !this.show && this.shouldFocusDateInput) {
        dateInputElement.focus({ preventScroll: true });
      }
      this.prevShow = this.show;
      this.shouldFocusDateInput = false;
    };
    DateTimePickerWithoutContext2.prototype.componentWillUnmount = function() {
      clearTimeout(this.nextTickId);
    };
    DateTimePickerWithoutContext2.prototype.render = function() {
      var _this = this;
      var _a9 = this.props, _b3 = _a9.size, size = _b3 === void 0 ? DateTimePickerWithoutContext2.defaultProps.size : _b3, _c2 = _a9.rounded, rounded = _c2 === void 0 ? DateTimePickerWithoutContext2.defaultProps.rounded : _c2, _d = _a9.fillMode, fillMode = _d === void 0 ? DateTimePickerWithoutContext2.defaultProps.fillMode : _d, disabled = _a9.disabled, tabIndex = _a9.tabIndex, title = _a9.title, id = _a9.id, format = _a9.format, formatPlaceholder = _a9.formatPlaceholder, min = _a9.min, max = _a9.max, weekNumber = _a9.weekNumber, focusedDate = _a9.focusedDate, className = _a9.className, width = _a9.width, name = _a9.name, validationMessage = _a9.validationMessage, required = _a9.required, validityStyles = _a9.validityStyles, cancelButton = _a9.cancelButton, minTime = _a9.minTime, maxTime = _a9.maxTime, ariaLabelledBy = _a9.ariaLabelledBy, ariaDescribedBy = _a9.ariaDescribedBy, _e = _a9.popup, PopupComponent = _e === void 0 ? Popup : _e, calendar = _a9.calendar;
      var isValid = !this.validityStyles || this.validity.valid;
      var dataInputProps = {
        id,
        ariaLabelledBy,
        ariaDescribedBy,
        format,
        formatPlaceholder,
        disabled,
        title,
        validityStyles,
        validationMessage,
        required,
        min,
        max,
        minTime,
        maxTime,
        name,
        tabIndex: !this.show ? tabIndex : -1,
        valid: this.validity.valid,
        value: this.value,
        onChange: this.handleValueChange,
        steps: this.props.steps,
        label: void 0,
        placeholder: !this.state.focused ? this.props.placeholder : null,
        ariaExpanded: this.show,
        size: null,
        fillMode: null,
        rounded: null
      };
      var dateTimePicker = React24.createElement(AsyncFocusBlur, { onFocus: this.handleFocus, onBlur: this.handleBlur, onSyncFocus: this.props.onFocus, onSyncBlur: this.props.onBlur }, function(_a10) {
        var _b4;
        var onFocus = _a10.onFocus, onBlur = _a10.onBlur;
        return React24.createElement(
          "div",
          { ref: function(div) {
            _this._element = div;
          }, className: classNames("k-input", "k-datetimepicker", (_b4 = {}, _b4["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _b4["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _b4["k-input-".concat(fillMode)] = fillMode, _b4["k-invalid"] = !isValid, _b4["k-required"] = _this.required, _b4["k-disabled"] = _this.props.disabled, _b4), className), onKeyDown: _this.handleKeyDown, style: { width }, onFocus, onBlur },
          React24.createElement(_this.dateInputComp, __assign17({ _ref: _this._dateInput, ariaRole: "combobox", ariaControls: _this._popupId }, dataInputProps)),
          React24.createElement(Button, __assign17({ tabIndex: -1, type: "button", icon: "calendar", svgIcon: calendarIcon, onMouseDown: _this.handleIconMouseDown, onClick: _this.handleDateIconClick, title: provideLocalizationService(_this).toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector]), className: "k-input-button", rounded: null }, {
            "aria-label": provideLocalizationService(_this).toLanguageString(toggleDateTimeSelector, messages[toggleDateTimeSelector])
          })),
          React24.createElement(
            PopupComponent,
            { show: _this.show, animate: _this.element !== null, anchor: _this.element, popupClass: "k-datetime-container k-reset", id: _this._popupId, anchorAlign: {
              horizontal: "left",
              vertical: "bottom"
            }, popupAlign: {
              horizontal: "left",
              vertical: "top"
            } },
            React24.createElement(DateTimeSelector, { ref: function(dateTimeSelector) {
              _this._dateTimeSelector = dateTimeSelector;
            }, cancelButton, steps: _this.props.steps, value: _this.value, onChange: _this.handleValueChange, onReject: _this.handleReject, disabled, weekNumber, min: _this.min, max: _this.max, minTime, maxTime, focusedDate, format, calendar })
          )
        );
      });
      return this.props.label ? React24.createElement(PickerFloatingLabel, { dateInput: this._dateInput, label: this.props.label, editorId: id, editorValid: isValid, editorDisabled: this.props.disabled, children: dateTimePicker, style: { width: this.props.width } }) : dateTimePicker;
    };
    DateTimePickerWithoutContext2.prototype.setShow = function(show) {
      if (this.show === show) {
        return;
      }
      this.setState({ show });
    };
    DateTimePickerWithoutContext2.prototype.nextTick = function(f) {
      clearTimeout(this.nextTickId);
      this.nextTickId = window.setTimeout(function() {
        return f();
      });
    };
    DateTimePickerWithoutContext2.displayName = "DateTimePicker";
    DateTimePickerWithoutContext2.propTypes = {
      className: PropTypes16.string,
      defaultShow: PropTypes16.bool,
      defaultValue: PropTypes16.instanceOf(Date),
      disabled: PropTypes16.bool,
      focusedDate: PropTypes16.instanceOf(Date),
      format: PropTypes16.oneOfType([
        PropTypes16.string,
        PropTypes16.shape({
          skeleton: PropTypes16.string,
          pattern: PropTypes16.string,
          date: PropTypes16.oneOf(["short", "medium", "long", "full"]),
          time: PropTypes16.oneOf(["short", "medium", "long", "full"]),
          datetime: PropTypes16.oneOf(["short", "medium", "long", "full"]),
          era: PropTypes16.oneOf(["narrow", "short", "long"]),
          year: PropTypes16.oneOf(["numeric", "2-digit"]),
          month: PropTypes16.oneOf(["numeric", "2-digit", "narrow", "short", "long"]),
          day: PropTypes16.oneOf(["numeric", "2-digit"]),
          weekday: PropTypes16.oneOf(["narrow", "short", "long"]),
          hour: PropTypes16.oneOf(["numeric", "2-digit"]),
          hour12: PropTypes16.bool,
          minute: PropTypes16.oneOf(["numeric", "2-digit"]),
          second: PropTypes16.oneOf(["numeric", "2-digit"]),
          timeZoneName: PropTypes16.oneOf(["short", "long"])
        })
      ]),
      formatPlaceholder: PropTypes16.oneOfType([
        PropTypes16.oneOf(["wide", "narrow", "short", "formatPattern"]),
        PropTypes16.shape({
          year: PropTypes16.string,
          month: PropTypes16.string,
          day: PropTypes16.string,
          hour: PropTypes16.string,
          minute: PropTypes16.string,
          second: PropTypes16.string
        })
      ]),
      id: PropTypes16.string,
      ariaLabelledBy: PropTypes16.string,
      ariaDescribedBy: PropTypes16.string,
      min: PropTypes16.instanceOf(Date),
      max: PropTypes16.instanceOf(Date),
      name: PropTypes16.string,
      popupSettings: PropTypes16.shape({
        animate: PropTypes16.bool,
        appendTo: PropTypes16.any,
        popupClass: PropTypes16.string
      }),
      show: PropTypes16.bool,
      tabIndex: PropTypes16.number,
      title: PropTypes16.string,
      value: PropTypes16.instanceOf(Date),
      weekNumber: PropTypes16.bool,
      width: PropTypes16.oneOfType([PropTypes16.number, PropTypes16.string]),
      validationMessage: PropTypes16.string,
      required: PropTypes16.bool,
      validate: PropTypes16.bool,
      valid: PropTypes16.bool,
      cancelButton: PropTypes16.bool,
      size: PropTypes16.oneOf([null, "small", "medium", "large"]),
      rounded: PropTypes16.oneOf([null, "small", "medium", "large", "full"]),
      fillMode: PropTypes16.oneOf([null, "solid", "flat", "outline"])
    };
    DateTimePickerWithoutContext2.defaultProps = {
      defaultShow: false,
      defaultValue: null,
      disabled: false,
      format: "g",
      max: MAX_DATE,
      min: MIN_DATE,
      popupSettings: {},
      tabIndex: 0,
      weekNumber: false,
      required: false,
      validityStyles: true,
      cancelButton: true,
      dateInput: DateInput,
      size: "medium",
      rounded: "medium",
      fillMode: "solid"
    };
    return DateTimePickerWithoutContext2;
  }(React24.Component)
);
var DateTimePickerPropsContext = createPropsContext();
var DateTimePicker = withPropsContext(DateTimePickerPropsContext, DateTimePickerWithoutContext);
DateTimePicker.displayName = "KendoReactDateTimePicker";
registerForLocalization(DateTimePickerWithoutContext);

export {
  CalendarCell,
  CalendarWeekCell,
  CalendarViewEnum,
  CalendarHeaderTitle,
  CalendarNavigationItem,
  CalendarPropsContext,
  Calendar,
  DateInputPropsContext,
  DateInput,
  ToggleButton,
  PickerWrap,
  DatePickerPropsContext,
  DatePicker,
  TimePickerPropsContext,
  TimePicker,
  MultiViewCalendarPropsContext,
  MultiViewCalendar,
  DateRangePickerPropsContext,
  DateRangePicker,
  DateTimePickerPropsContext,
  DateTimePicker
};
//# sourceMappingURL=chunk-4XZS3TFL.js.map
