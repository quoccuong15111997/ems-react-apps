import {
  classNames,
  clone,
  cloneObject,
  getter,
  guid,
  kendoThemeMaps,
  setter,
  validatePackage2 as validatePackage
} from "./chunk-KTMNFILY.js";
import {
  require_prop_types
} from "./chunk-O6GWARG4.js";
import {
  require_react
} from "./chunk-ABDRZE5M.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/@progress/kendo-react-form/dist/es/Field.js
var React2 = __toESM(require_react());

// node_modules/@progress/kendo-react-form/dist/es/FormContext.js
var React = __toESM(require_react());
var FormContext = React.createContext(null);

// node_modules/@progress/kendo-react-form/dist/es/Field.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var Field = function(props) {
  var name = props.name, component = props.component, validator = props.validator, children = props.children, onChange = props.onChange, others = __rest(props, ["name", "component", "validator", "children", "onChange"]);
  var form = React2.useContext(FormContext);
  var formId = form ? form.id : "";
  React2.useEffect(function() {
    if (!form) {
      return;
    }
    var unregisterField = form.registerField(name, validator);
    return unregisterField;
  }, [name, formId, validator]);
  var handleOnChange = React2.useCallback(function(event) {
    var newValue = event ? event.value !== void 0 ? event.value : event.target ? event.target.value : event.target : event;
    form.onChange(name, { value: newValue });
    if (onChange) {
      onChange.call(void 0, event);
    }
  }, [name, formId, onChange]);
  var onNativeComponentChange = React2.useCallback(function(event) {
    return form.onChange(name, { value: event.target.value });
  }, [name, formId]);
  var handleOnBlur = React2.useCallback(function() {
    return form.onBlur(name);
  }, [name, formId]);
  var handleOnFocus = React2.useCallback(function() {
    return form.onFocus(name);
  }, [name, formId]);
  if (!form) {
    return null;
  }
  var value = form.valueGetter(name);
  if (typeof component === "string") {
    return React2.createElement(component, __assign({ onChange: onNativeComponentChange, onBlur: handleOnBlur, onFocus: handleOnFocus, value, children }, others));
  }
  return React2.createElement(component, __assign(__assign({ children }, others), {
    // input
    onChange: handleOnChange,
    onBlur: handleOnBlur,
    onFocus: handleOnFocus,
    value,
    // meta
    validationMessage: form.errors[name],
    touched: form.touched[name],
    modified: form.modified[name],
    visited: form.visited[name],
    // Our `valid` implementation requires double submit to show html5 validation errors,
    // however it's NOT recommended to show html5 validation errors at all as:
    // - There is no standard way to change validation look and feel with CSS.
    // - Look different in each browser / OS
    // - You can have a page in one language but an error message displayed in another language (not localizable)
    valid: !(Boolean(form.errors[name]) && form.touched[name]),
    name
  }));
};
Field.displayName = "KendoReactField";

// node_modules/@progress/kendo-react-form/dist/es/Form.js
var React3 = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-form/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-form",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1680171973,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-form/dist/es/Form.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var FORCEUPDATE_ACCUMULATOR_TIMEOUT = 0;
var Form = (
  /** @class */
  function(_super) {
    __extends(Form2, _super);
    function Form2(props) {
      var _this = _super.call(this, props) || this;
      _this._id = guid();
      _this._touched = {};
      _this._visited = {};
      _this._modified = {};
      _this._validatorsByField = {};
      _this._values = {};
      _this._fields = {};
      _this._unmounted = false;
      _this._submitted = false;
      _this.isValid = function() {
        return _this.isFormValid(_this.errors);
      };
      _this.accumulatedForceUpdate = function() {
        if (_this._accumulatorTimeout) {
          clearTimeout(_this._accumulatorTimeout);
        }
        _this._accumulatorTimeout = window.setTimeout(function() {
          _this._accumulatorTimeout = void 0;
          _this.forceUpdate();
        }, FORCEUPDATE_ACCUMULATOR_TIMEOUT);
      };
      _this.resetForm = function() {
        _this.values = clone(_this.props.initialValues);
        _this._id = guid();
        _this._touched = {};
        _this._visited = {};
        _this._modified = {};
        _this._validatorsByField = {};
        _this._fields = {};
        _this._submitted = false;
        _this.forceUpdate();
      };
      _this.onReset = function() {
        return _this.resetForm();
      };
      _this.addField = function(field) {
        _this._fields[field] = true;
      };
      _this.onSubmit = function(event) {
        var touchedVisited = {};
        var fields = _this.fields;
        if (event) {
          if (typeof event.preventDefault === "function") {
            event.preventDefault();
          }
          if (typeof event.stopPropagation === "function") {
            event.stopPropagation();
          }
        }
        fields.forEach(function(fieldName) {
          touchedVisited[fieldName] = true;
        });
        _this.visited = __assign2({}, touchedVisited);
        _this.touched = __assign2({}, touchedVisited);
        var values = _this.values;
        var isValid = _this.isFormValid(_this.errors);
        var isModified = _this.isFormModified(_this.modified, fields);
        if (_this.props.onSubmitClick) {
          _this.props.onSubmitClick.call(void 0, {
            values,
            isValid,
            isModified,
            event
          });
        }
        if (isValid && (_this.props.ignoreModified || isModified) && _this.props.onSubmit) {
          _this._submitted = true;
          _this.props.onSubmit.call(void 0, values, event);
        }
        _this.forceUpdate();
      };
      _this.onChange = function(name, options) {
        var _a;
        var value = options.value;
        _this.addField(name);
        if (!_this.modified[name]) {
          _this.modified = __assign2(__assign2({}, _this.modified), (_a = {}, _a[name] = true, _a));
        }
        _this.valueSetter(name, value);
        _this.forceUpdate();
      };
      _this.onFocus = function(name, skipForceUpdate) {
        var _a;
        if (_this.visited[name]) {
          return;
        }
        _this.visited = __assign2(__assign2({}, _this.visited), (_a = {}, _a[name] = true, _a));
        if (!skipForceUpdate) {
          _this.forceUpdate();
        }
      };
      _this.onBlur = function(name, skipForceUpdate) {
        var _a;
        if (_this.touched[name]) {
          return;
        }
        _this.onFocus(name, skipForceUpdate);
        _this.touched = __assign2(__assign2({}, _this.touched), (_a = {}, _a[name] = true, _a));
        if (!skipForceUpdate) {
          _this.forceUpdate();
        }
      };
      _this.onFieldRegister = function(name, validator) {
        var _a;
        _this.addField(name);
        var oldValidators = _this.validatorsByField[name] || [];
        var nextIndex = oldValidators.length;
        _this.validatorsByField = __assign2(__assign2({}, _this.validatorsByField), (_a = {}, _a[name] = __spreadArray(__spreadArray([], oldValidators, true), [validator], false), _a));
        _this.accumulatedForceUpdate();
        return function() {
          var _a2;
          if (_this._unmounted) {
            return;
          }
          var newValidators = __spreadArray([], _this.validatorsByField[name] || [], true);
          var validatorIsUnregistered = Boolean(newValidators[nextIndex]);
          newValidators[nextIndex] = void 0;
          _this.validatorsByField = __assign2(__assign2({}, _this.validatorsByField), (_a2 = {}, _a2[name] = newValidators, _a2));
          if (validatorIsUnregistered) {
            _this.accumulatedForceUpdate();
          }
        };
      };
      _this.isFormValid = function(errors) {
        return !Object.keys(errors).some(function(fieldName) {
          return Boolean(errors[fieldName]);
        });
      };
      _this.isFormModified = function(modified, fields) {
        return fields.some(function(fieldName) {
          return modified[fieldName];
        });
      };
      _this.isFormHasNotTouched = function(touched, fields) {
        return fields.some(function(fieldName) {
          return !touched[fieldName];
        });
      };
      _this.isFormTouched = function(touched, fields) {
        return fields.some(function(fieldName) {
          return touched[fieldName];
        });
      };
      _this.isFormVisited = function(visited, fields) {
        return fields.some(function(fieldName) {
          return visited[fieldName];
        });
      };
      _this.valueGetter = function(fieldName) {
        return getter(fieldName)(_this.values);
      };
      _this.valueSetter = function(fieldName, value) {
        return setter(fieldName)(_this.values, value);
      };
      _this.onArrayAction = function(name) {
        var _a;
        _this.addField(name);
        if (!_this.modified[name]) {
          _this.modified = __assign2(__assign2({}, _this.modified), (_a = {}, _a[name] = true, _a));
        }
        _this.onBlur(name, true);
      };
      _this.onInsert = function(name, options) {
        _this.onArrayAction(name);
        var newArray = __spreadArray([], _this.valueGetter(name) || [], true);
        newArray.splice(options.index, 0, options.value);
        _this.valueSetter(name, newArray);
        _this.forceUpdate();
      };
      _this.onUnshift = function(name, options) {
        _this.onInsert(name, {
          value: options.value,
          index: 0
        });
      };
      _this.onPush = function(name, options) {
        _this.onArrayAction(name);
        var newArray = __spreadArray(__spreadArray([], _this.valueGetter(name) || [], true), [options.value], false);
        _this.valueSetter(name, newArray);
        _this.forceUpdate();
      };
      _this.onPop = function(name) {
        _this.onArrayAction(name);
        var newArray = __spreadArray([], _this.valueGetter(name) || [], true);
        var value = newArray.pop();
        _this.valueSetter(name, newArray);
        _this.forceUpdate();
        return value;
      };
      _this.onRemove = function(name, options) {
        _this.onArrayAction(name);
        var newArray = __spreadArray([], _this.valueGetter(name) || [], true);
        var value = newArray.splice(options.index, 1);
        _this.valueSetter(name, newArray);
        _this.forceUpdate();
        return value;
      };
      _this.onReplace = function(name, options) {
        _this.onArrayAction(name);
        var newArray = __spreadArray([], _this.valueGetter(name) || [], true);
        newArray.splice(options.index, 1, options.value);
        _this.valueSetter(name, newArray);
        _this.forceUpdate();
      };
      _this.onMove = function(name, options) {
        _this.onArrayAction(name);
        var newArray = __spreadArray([], _this.valueGetter(name) || [], true);
        var value = newArray[options.prevIndex];
        newArray.splice(options.prevIndex, 1);
        newArray.splice(options.nextIndex, 0, value);
        _this.valueSetter(name, newArray);
        _this.forceUpdate();
      };
      validatePackage(packageMetadata);
      _this.values = clone(props.initialValues);
      return _this;
    }
    Object.defineProperty(Form2.prototype, "touched", {
      /**
       * @hidden
       */
      get: function() {
        return this._touched;
      },
      /**
       * @hidden
       */
      set: function(value) {
        this._touched = value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "visited", {
      /**
       * @hidden
       */
      get: function() {
        return this._visited;
      },
      /**
       * @hidden
       */
      set: function(value) {
        this._visited = value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "modified", {
      /**
       * @hidden
       */
      get: function() {
        return this._modified;
      },
      /**
       * @hidden
       */
      set: function(value) {
        this._modified = value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "validatorsByField", {
      /**
       * @hidden
       */
      get: function() {
        return this._validatorsByField;
      },
      /**
       * @hidden
       */
      set: function(value) {
        this._validatorsByField = value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "values", {
      /**
       * @hidden
       */
      get: function() {
        return this._values;
      },
      /**
       * @hidden
       */
      set: function(value) {
        this._values = value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "fields", {
      /**
       * @hidden
       */
      get: function() {
        return Object.keys(this._fields);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "formErrors", {
      /**
       * @hidden
       */
      get: function() {
        if (this.props.validator) {
          return this.props.validator(this.values, this.valueGetter);
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "errors", {
      /**
       * @hidden
       */
      get: function() {
        var _this = this;
        var errors = {};
        var fields = this.fields;
        var validatorsByField = this.validatorsByField;
        fields.forEach(function(fieldName) {
          errors[fieldName] = "";
          if (validatorsByField[fieldName]) {
            var validators_1 = [];
            validatorsByField[fieldName].forEach(function(validator) {
              if (Array.isArray(validator)) {
                validators_1.push.apply(validators_1, validator);
              } else {
                validators_1.push(validator);
              }
            });
            validators_1.find(function(validator) {
              if (validator) {
                var result = validator(_this.valueGetter(fieldName), _this.valueGetter, { name: fieldName });
                if (result) {
                  errors[fieldName] = result;
                  return true;
                }
              }
              return false;
            });
          }
        });
        var formErrors = this.formErrors;
        if (formErrors) {
          cloneObject(this.formErrors, errors);
        }
        return errors;
      },
      enumerable: false,
      configurable: true
    });
    Form2.prototype.componentWillUnmount = function() {
      this._unmounted = true;
      if (this._accumulatorTimeout) {
        clearTimeout(this._accumulatorTimeout);
      }
    };
    Form2.prototype.render = function() {
      var render = this.props.render;
      var touched = this.touched;
      var visited = this.visited;
      var modified = this.modified;
      var fields = this.fields;
      var errors = this.errors;
      var formValid = this.isFormValid(errors);
      var formModified = this.isFormModified(modified, fields);
      var formTouched = this.isFormTouched(touched, fields);
      var formVisited = this.isFormVisited(visited, fields);
      var formHasNotTouched = this.isFormHasNotTouched(touched, fields);
      var allowSubmit = formHasNotTouched && !formValid || formValid && (this.props.ignoreModified || formModified);
      return React3.createElement(FormContext.Provider, { key: this._id, value: {
        id: this._id,
        valueGetter: this.valueGetter,
        errors,
        modified,
        touched,
        visited,
        registerField: this.onFieldRegister,
        onSubmit: this.onSubmit,
        onChange: this.onChange,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onUnshift: this.onUnshift,
        onPush: this.onPush,
        onInsert: this.onInsert,
        onPop: this.onPop,
        onRemove: this.onRemove,
        onReplace: this.onReplace,
        onMove: this.onMove
      } }, render({
        valid: formValid,
        modified: formModified,
        touched: formTouched,
        visited: formVisited,
        submitted: this._submitted,
        valueGetter: this.valueGetter,
        errors,
        allowSubmit,
        onChange: this.onChange,
        onSubmit: this.onSubmit,
        onFormReset: this.resetForm
      }));
    };
    Form2.displayName = "KendoReactForm";
    Form2.propTypes = {
      initialValues: PropTypes.any,
      onSubmit: PropTypes.func,
      onSubmitClick: PropTypes.func,
      render: PropTypes.func.isRequired
    };
    return Form2;
  }(React3.Component)
);

// node_modules/@progress/kendo-react-form/dist/es/FieldArray.js
var React4 = __toESM(require_react());
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var FieldArray = function(props) {
  var name = props.name, component = props.component, validator = props.validator, type = props.type, children = props.children, others = __rest2(props, ["name", "component", "validator", "type", "children"]);
  var form = React4.useContext(FormContext);
  var formId = form ? form.id : "";
  React4.useEffect(function() {
    if (!form) {
      return;
    }
    var unregisterField = form.registerField(name, validator);
    return unregisterField;
  }, [name, formId, validator]);
  var onUnshift = React4.useCallback(function(event) {
    return form.onUnshift(name, event);
  }, [name, formId]);
  var onPush = React4.useCallback(function(event) {
    return form.onPush(name, event);
  }, [name, formId]);
  var onInsert = React4.useCallback(function(event) {
    return form.onInsert(name, event);
  }, [name, formId]);
  var onPop = React4.useCallback(function() {
    return form.onPop(name);
  }, [name, formId]);
  var onRemove = React4.useCallback(function(event) {
    return form.onRemove(name, event);
  }, [name, formId]);
  var onReplace = React4.useCallback(function(event) {
    return form.onReplace(name, event);
  }, [name, formId]);
  var onMove = React4.useCallback(function(event) {
    return form.onMove(name, event);
  }, [name, formId]);
  if (!form) {
    return null;
  }
  var value = form.valueGetter(name);
  return React4.createElement(component, __assign3({
    // input
    value,
    // meta
    validationMessage: form.errors[name],
    touched: form.touched[name],
    modified: form.modified[name],
    visited: form.visited[name],
    // Our `valid` implementation requires double submit to show html5 validation errors,
    // however it's NOT recommended to show html5 validation errors at all as:
    // - There is no standard way to change validation look and feel with CSS.
    // - Look different in each browser / OS
    // - You can have a page in one language but an error message displayed in another language (not localizable)
    valid: !(Boolean(form.errors[name]) && form.touched[name]),
    onUnshift,
    onPush,
    onInsert,
    onPop,
    onRemove,
    onReplace,
    onMove,
    children,
    name
  }, others));
};
FieldArray.displayName = "KendoReactFieldArray";

// node_modules/@progress/kendo-react-form/dist/es/FieldWrapper.js
var React5 = __toESM(require_react());
var FieldWrapper = function(props) {
  var fieldClassName = classNames({
    "k-form-field": true,
    "k-rtl": props.dir === "rtl"
  }, props.className);
  return React5.createElement("div", { className: fieldClassName, style: props.style }, props.children);
};
FieldWrapper.displayName = "KendoReactFieldWrapper";

// node_modules/@progress/kendo-react-form/dist/es/FormElement.js
var React6 = __toESM(require_react());
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var __rest3 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var FormElement = React6.forwardRef(function(props, ref) {
  var _a;
  var element = React6.useRef(null);
  var target = React6.useRef(null);
  React6.useImperativeHandle(target, function() {
    return { element: element.current, props };
  });
  React6.useImperativeHandle(ref, function() {
    return target.current;
  });
  var form = React6.useContext(FormContext);
  var className = props.className, onSubmit = props.onSubmit, style = props.style, horizontal = props.horizontal, size = props.size, others = __rest3(props, ["className", "onSubmit", "style", "horizontal", "size"]);
  var formClassName = classNames((_a = {
    "k-form": true
  }, _a["k-form-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-form-horizontal"] = horizontal === true, _a), className);
  return React6.createElement("form", __assign4({ ref: element }, others, { style: props.style, className: formClassName, onSubmit: form ? form.onSubmit : void 0 }), props.children);
});
var defaultProps = {
  size: "medium"
};
FormElement.displayName = "KendoReactFormElement";
FormElement.defaultProps = defaultProps;
export {
  Field,
  FieldArray,
  FieldWrapper,
  Form,
  FormElement
};
//# sourceMappingURL=@progress_kendo-react-form.js.map
