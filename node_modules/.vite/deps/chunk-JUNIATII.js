import {
  Button
} from "./chunk-FUIIQ4Y4.js";
import {
  windowIcon,
  windowMinimizeIcon,
  windowRestoreIcon,
  xIcon
} from "./chunk-RFS2H3W2.js";
import {
  useLocalization
} from "./chunk-NQBGXZOD.js";
import {
  require_react_dom
} from "./chunk-3UUEUCWE.js";
import {
  Draggable,
  Keys,
  ZIndexContext,
  canUseDOM,
  classNames,
  createPropsContext,
  dispatchEvent,
  guid,
  validatePackage2 as validatePackage,
  withPropsContext
} from "./chunk-KTMNFILY.js";
import {
  require_prop_types
} from "./chunk-O6GWARG4.js";
import {
  require_react
} from "./chunk-ABDRZE5M.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/@progress/kendo-react-dialogs/dist/es/Dialog.js
var React3 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var PropTypes2 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dialogs/dist/es/DialogTitleBar.js
var React = __toESM(require_react());
var DialogTitleBar = function(_a2) {
  var children = _a2.children, onCloseButtonClick = _a2.onCloseButtonClick, id = _a2.id, closeIcon = _a2.closeIcon;
  return React.createElement(
    "div",
    { className: "k-window-titlebar k-dialog-titlebar", id },
    React.createElement("div", { className: "k-window-title k-dialog-title" }, children),
    React.createElement("div", { className: "k-window-titlebar-actions k-dialog-titlebar-actions" }, closeIcon && React.createElement(Button, { role: "button", "aria-label": "Close", onClick: onCloseButtonClick, icon: "x", svgIcon: xIcon, fillMode: "flat", className: "k-window-titlebar-action k-dialog-titlebar-action" }))
  );
};

// node_modules/@progress/kendo-react-dialogs/dist/es/DialogActionsBar.js
var React2 = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());
var DialogActionsBar = function(props) {
  var _a2;
  var _b = props.layout, layout = _b === void 0 ? defaultProps.layout : _b, children = props.children;
  var wrapperClasses = classNames("k-actions", "k-actions-horizontal", "k-window-actions k-dialog-actions", (_a2 = {}, _a2["k-actions-".concat(layout)] = layout, _a2));
  return React2.createElement("div", { className: wrapperClasses }, children);
};
DialogActionsBar.propTypes = {
  children: PropTypes.any,
  layout: PropTypes.oneOf(["start", "center", "end", "stretched"])
};
var defaultProps = {
  layout: "stretched"
};

// node_modules/@progress/kendo-react-dialogs/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-dialogs",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1680171933,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-dialogs/dist/es/constants.js
var DATA_DIALOGS_ID = "data-windowid";
var DEFAULT_DIALOGS_ZINDEX = 10002;
var ZINDEX_DIALOGS_STEP = 2;
var DIALOGS_SELECTOR = ".k-window:not(.k-dialog), .k-dialog-wrapper";

// node_modules/@progress/kendo-react-dialogs/dist/es/utils.js
var getMaxZIndex = function(currentZIndex, currentDocument, currentWindowId) {
  var maxZindex = currentZIndex;
  if (currentDocument && currentDocument.defaultView) {
    var allWindows = currentDocument.querySelectorAll(DIALOGS_SELECTOR);
    var zIndexChanged_1 = false;
    allWindows.forEach(function(KRwindow) {
      var computedStyle = currentDocument.defaultView.getComputedStyle(KRwindow, null);
      var dataId = KRwindow.getAttribute(DATA_DIALOGS_ID);
      if (dataId !== currentWindowId && computedStyle.zIndex !== null) {
        var zIndexValue = parseInt(computedStyle.zIndex, 10);
        if (zIndexValue >= maxZindex) {
          maxZindex = zIndexValue;
          zIndexChanged_1 = true;
        }
      }
    });
    return zIndexChanged_1 ? maxZindex + ZINDEX_DIALOGS_STEP : maxZindex;
  }
  return maxZindex;
};

// node_modules/@progress/kendo-react-dialogs/dist/es/Dialog.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var DialogWithoutContext = (
  /** @class */
  function(_super) {
    __extends(DialogWithoutContext2, _super);
    function DialogWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.context = 0;
      _this._id = guid();
      _this.titleId = _this.generateTitleId();
      _this.contentId = _this.generateContentId();
      _this.onCloseDialog = function(event) {
        event.preventDefault();
        dispatchEvent(_this.props.onClose, event, _this, void 0);
      };
      _this.onKeyDown = function(event) {
        if (event.keyCode === Keys.esc && _this.props.onClose) {
          event.preventDefault();
          _this.onCloseDialog(event);
        }
        var kDialog = _this.element;
        if (kDialog && event.keyCode === Keys.tab) {
          var focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
          var focusableContent = kDialog.querySelectorAll(focusableElements);
          var firstFocusableElement = focusableContent[0];
          var lastFocusableElement = focusableContent[focusableContent.length - 1];
          var currentDocument = _this.getDocument();
          if (event.shiftKey) {
            if (currentDocument && currentDocument.activeElement === firstFocusableElement || currentDocument && currentDocument.activeElement === _this.element) {
              lastFocusableElement.focus();
              event.preventDefault();
            }
          } else {
            if (currentDocument && currentDocument.activeElement === lastFocusableElement) {
              firstFocusableElement.focus();
              event.preventDefault();
            }
          }
        }
      };
      _this.getCurrentZIndex = function() {
        if (!_this.state || _this.context === void 0) {
          return _this.context ? _this.context : DEFAULT_DIALOGS_ZINDEX;
        }
        return _this.state.zIndex > (_this.context ? _this.context + ZINDEX_DIALOGS_STEP : 0) ? _this.state.zIndex : _this.context + ZINDEX_DIALOGS_STEP;
      };
      _this.getDocument = function() {
        return _this.props.appendTo ? _this.props.appendTo.ownerDocument : document;
      };
      validatePackage(packageMetadata);
      _this.state = {
        zIndex: getMaxZIndex(_this.getCurrentZIndex(), _this.getDocument(), _this._id)
      };
      return _this;
    }
    DialogWithoutContext2.prototype.componentDidMount = function() {
      if (this.element) {
        if (this.props.autoFocus) {
          this.element.focus();
        }
      }
    };
    DialogWithoutContext2.prototype.render = function() {
      var _a2, _b;
      var _this = this;
      var id = this.props.id !== void 0 ? this.props.id : this.titleId;
      var _c = this.props, title = _c.title, width = _c.width, height = _c.height, children = _c.children, minWidth = _c.minWidth, dir = _c.dir, style = _c.style, contentStyle = _c.contentStyle;
      var elementsArray = React3.Children.toArray(children);
      var content = this.getContent(elementsArray);
      var actions = this.getActionBar(elementsArray);
      var aria = title ? {
        "aria-labelledby": id
      } : null;
      var closeIcon = this.props.closeIcon !== void 0 ? this.props.closeIcon : true;
      var currentZIndex = this.getCurrentZIndex();
      var dialogElement = React3.createElement(
        ZIndexContext.Provider,
        { value: currentZIndex },
        React3.createElement(
          "div",
          __assign({}, (_a2 = {}, _a2[DATA_DIALOGS_ID] = this._id, _a2), { className: "k-dialog-wrapper" + (this.props.className ? " " + this.props.className : ""), onKeyDown: this.onKeyDown, tabIndex: 0, dir, style: __assign({ zIndex: currentZIndex }, style), ref: function(el) {
            return _this.element = el;
          } }),
          React3.createElement("div", { className: "k-overlay" }),
          React3.createElement(
            "div",
            __assign({}, aria, { className: classNames("k-window k-dialog", (_b = {}, _b["k-window-".concat(this.props.themeColor)] = this.props.themeColor, _b)), role: "dialog", "aria-labelledby": id, "aria-modal": true, "aria-describedby": this.contentId, style: { width, height, minWidth } }),
            this.props.title && React3.createElement(DialogTitleBar, { closeIcon, onCloseButtonClick: this.onCloseDialog, id }, title),
            React3.createElement("div", { className: "k-window-content k-dialog-content", style: contentStyle, id: this.contentId }, content),
            actions
          )
        )
      );
      if (canUseDOM) {
        return this.props.appendTo !== null ? ReactDOM.createPortal(dialogElement, this.props.appendTo || document.body) : dialogElement;
      }
      return null;
    };
    DialogWithoutContext2.prototype.getActionBar = function(children) {
      return children.filter(function(child) {
        return child && child.type === DialogActionsBar;
      });
    };
    DialogWithoutContext2.prototype.getContent = function(children) {
      return children.filter(function(child) {
        return child && child.type !== DialogActionsBar;
      });
    };
    DialogWithoutContext2.prototype.generateTitleId = function() {
      return "dialog-title" + this._id;
    };
    DialogWithoutContext2.prototype.generateContentId = function() {
      return "dialog-content" + this._id;
    };
    DialogWithoutContext2.displayName = "Dialog";
    DialogWithoutContext2.propTypes = {
      title: PropTypes2.any,
      id: PropTypes2.string,
      dir: PropTypes2.string,
      style: PropTypes2.object,
      closeIcon: PropTypes2.bool,
      width: PropTypes2.oneOfType([PropTypes2.number, PropTypes2.string]),
      height: PropTypes2.oneOfType([PropTypes2.number, PropTypes2.string]),
      minWidth: PropTypes2.oneOfType([PropTypes2.number, PropTypes2.string]),
      autoFocus: PropTypes2.bool
    };
    DialogWithoutContext2.defaultProps = {
      autoFocus: false
    };
    DialogWithoutContext2.contextType = ZIndexContext;
    return DialogWithoutContext2;
  }(React3.Component)
);
var DialogPropsContext = createPropsContext();
var Dialog = withPropsContext(DialogPropsContext, DialogWithoutContext);
Dialog.displayName = "KendoReactDialog";

// node_modules/@progress/kendo-react-dialogs/dist/es/Window.js
var React8 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());
var PropTypes4 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dialogs/dist/es/WindowTitlebar.js
var React4 = __toESM(require_react());

// node_modules/@progress/kendo-react-dialogs/dist/es/StageEnum.js
var windowStage;
(function(windowStage2) {
  windowStage2["DEFAULT"] = "DEFAULT";
  windowStage2["FULLSCREEN"] = "FULLSCREEN";
  windowStage2["MINIMIZED"] = "MINIMIZED";
})(windowStage || (windowStage = {}));

// node_modules/@progress/kendo-react-dialogs/dist/es/messages/index.js
var _a;
var dialogsWindowMaximizeButton = "dialogs.windowMaximizeButton";
var dialogsWindowMinimizeButton = "dialogs.windowMinimizeButton";
var dialogsWindowRestoreButton = "dialogs.windowRestoreButton";
var dialogsWindowCloseButton = "dialogs.windowCloseButton";
var messages = (_a = {}, _a[dialogsWindowMaximizeButton] = "maximize", _a[dialogsWindowMinimizeButton] = "minimize", _a[dialogsWindowRestoreButton] = "restore", _a[dialogsWindowCloseButton] = "close", _a);

// node_modules/@progress/kendo-react-dialogs/dist/es/WindowTitlebar.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var WindowTitleBarComponent = function(props) {
  var children = props.children, onCloseButtonClick = props.onCloseButtonClick, onMinimizeButtonClick = props.onMinimizeButtonClick, onFullScreenButtonClick = props.onFullScreenButtonClick, onRestoreButtonClick = props.onRestoreButtonClick, onDoubleClick = props.onDoubleClick, stage = props.stage, forwardedRef = props.forwardedRef, id = props.id;
  var localization = useLocalization();
  var minimizeButtonRender = props.minimizeButton ? React4.createElement(props.minimizeButton, { onClick: onMinimizeButtonClick, stage }) : React4.createElement(Button, { fillMode: "flat", icon: "window-minimize", svgIcon: windowMinimizeIcon, className: "k-window-titlebar-action", onClick: onMinimizeButtonClick, "aria-label": localization.toLanguageString(dialogsWindowMinimizeButton, messages[dialogsWindowMinimizeButton]) });
  var maximizeButtonRender = props.maximizeButton ? React4.createElement(props.maximizeButton, { onClick: onFullScreenButtonClick, stage }) : React4.createElement(Button, { fillMode: "flat", icon: "window-maximize", svgIcon: windowIcon, className: "k-window-titlebar-action", onClick: onFullScreenButtonClick, "aria-label": localization.toLanguageString(dialogsWindowMaximizeButton, messages[dialogsWindowMaximizeButton]) });
  var restoreButtonRender = props.restoreButton ? React4.createElement(props.restoreButton, { onClick: onRestoreButtonClick, stage }) : React4.createElement(Button, { fillMode: "flat", icon: "window-restore", svgIcon: windowRestoreIcon, className: "k-window-titlebar-action", onClick: onRestoreButtonClick, "aria-label": localization.toLanguageString(dialogsWindowRestoreButton, messages[dialogsWindowRestoreButton]) });
  var closeButtonRender = props.closeButton ? React4.createElement(props.closeButton, { onClick: onCloseButtonClick, stage }) : React4.createElement(Button, { fillMode: "flat", icon: "x", svgIcon: xIcon, className: "k-window-titlebar-action", onClick: onCloseButtonClick, "aria-label": localization.toLanguageString(dialogsWindowCloseButton, messages[dialogsWindowCloseButton]) });
  return React4.createElement(
    "div",
    { className: "k-window-titlebar", style: { touchAction: "none" }, ref: forwardedRef, onDoubleClick },
    React4.createElement("div", { className: "k-window-title", id }, children ? children : ""),
    React4.createElement(
      "div",
      { className: "k-window-titlebar-actions" },
      stage === windowStage.DEFAULT && minimizeButtonRender,
      stage === windowStage.DEFAULT && maximizeButtonRender,
      stage !== windowStage.DEFAULT && restoreButtonRender,
      closeButtonRender
    )
  );
};
var WindowTitleBar = React4.forwardRef(function(props, ref) {
  return React4.createElement(WindowTitleBarComponent, __assign2({}, props, { forwardedRef: ref }));
});

// node_modules/@progress/kendo-react-dialogs/dist/es/WindowResizeHandlers.js
var React5 = __toESM(require_react());
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var keys = ["n", "e", "s", "w", "se", "sw", "ne", "nw"];
var ResizeHandlers = (
  /** @class */
  function(_super) {
    __extends2(ResizeHandlers2, _super);
    function ResizeHandlers2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ResizeHandlers2.prototype.render = function() {
      var _this = this;
      return React5.createElement(
        "div",
        { className: "k-resize-handles-wrapper" },
        " ",
        keys.map(function(key, index) {
          return React5.createElement(
            Draggable,
            { key: index, onDrag: function(data) {
              var event = data.event;
              event.originalEvent.preventDefault();
              _this.props.onResize(event, { end: false, direction: key });
            }, onRelease: function(data) {
              var event = data.event;
              event.originalEvent.preventDefault();
              _this.props.onResize(event, { end: true, direction: key });
            } },
            React5.createElement("div", { className: "k-resize-handle k-resize-" + key, style: { display: "block", touchAction: "none" } })
          );
        })
      );
    };
    return ResizeHandlers2;
  }(React5.Component)
);

// node_modules/@progress/kendo-react-dialogs/dist/es/MiddleLayerOptimization.js
var React6 = __toESM(require_react());
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MiddleLayerOptimization = (
  /** @class */
  function(_super) {
    __extends3(MiddleLayerOptimization2, _super);
    function MiddleLayerOptimization2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MiddleLayerOptimization2.prototype.shouldComponentUpdate = function(nextProps) {
      return nextProps.shouldUpdateOnDrag || !nextProps.isDragging;
    };
    MiddleLayerOptimization2.prototype.render = function() {
      return this.props.children;
    };
    return MiddleLayerOptimization2;
  }(React6.Component)
);

// node_modules/@progress/kendo-react-dialogs/dist/es/WindowActionsBar.js
var React7 = __toESM(require_react());
var PropTypes3 = __toESM(require_prop_types());
var WindowActionsBar = function(props) {
  var _a2 = props.layout, layout = _a2 === void 0 ? defaultProps2.layout : _a2, children = props.children;
  var wrapperClasses = classNames("k-actions", "k-window-actions", "k-actions-horizontal", "k-hstack", {
    "k-justify-content-start": layout === "start",
    "k-justify-content-center": layout === "center",
    "k-justify-content-end": layout === "end",
    "k-justify-content-stretch": layout === "stretched"
  });
  return React7.createElement("div", { className: wrapperClasses }, children);
};
WindowActionsBar.propTypes = {
  children: PropTypes3.any,
  layout: PropTypes3.oneOf(["start", "center", "end", "stretched"])
};
var defaultProps2 = {
  layout: "end"
};

// node_modules/@progress/kendo-react-dialogs/dist/es/Window.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var DEFAULT_WIDTH = 300;
var DEFAULT_HEIGHT = 300;
var DEFAULT_MIN_WIDTH = 120;
var DEFAULT_MIN_HEIGHT = 100;
var DEFAULT_STEP = 5;
var WindowWithoutContext = (
  /** @class */
  function(_super) {
    __extends4(WindowWithoutContext2, _super);
    function WindowWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.context = 0;
      _this.draggable = null;
      _this.offSetCoordinates = { x: 0, y: 0 };
      _this._id = guid();
      _this.titleId = _this.generateTitleId();
      _this.mounted = false;
      _this.onKeyDown = function(event) {
        if (event.target !== event.currentTarget) {
          return;
        }
        var minWidth = _this.props.minWidth || DEFAULT_MIN_WIDTH;
        var minHeight = _this.props.minHeight || DEFAULT_MIN_HEIGHT;
        if (event.ctrlKey && _this.props.resizable) {
          switch (event.keyCode) {
            case Keys.up:
              event.preventDefault();
              if (minHeight <= _this.height - DEFAULT_STEP) {
                _this.setState({ height: _this.height - DEFAULT_STEP });
              }
              break;
            case Keys.down:
              event.preventDefault();
              _this.setState({ height: _this.height + DEFAULT_STEP });
              break;
            case Keys.left:
              if (minWidth <= _this.width - DEFAULT_STEP) {
                _this.setState({ width: _this.width - DEFAULT_STEP });
              }
              break;
            case Keys.right:
              _this.setState({ width: _this.width + DEFAULT_STEP });
              break;
            default:
              return;
          }
          _this.dispatchMoveEvent(_this.props.onResize, event, false, void 0);
          return;
        }
        if (event.altKey) {
          switch (event.keyCode) {
            case Keys.up:
              if (_this.windowStage === windowStage.MINIMIZED) {
                _this.handleRestore(event);
                dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.DEFAULT });
              } else if (_this.windowStage === windowStage.DEFAULT) {
                _this.handleFullscreen(event);
                dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.FULLSCREEN });
              }
              break;
            case Keys.down:
              if (_this.windowStage === windowStage.FULLSCREEN) {
                _this.handleRestore(event);
                dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.DEFAULT });
              } else if (_this.windowStage === windowStage.DEFAULT) {
                _this.handleMinimize(event);
                dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.MINIMIZED });
              }
              break;
            default:
          }
          return;
        }
        if (!event.ctrlKey) {
          switch (event.keyCode) {
            case Keys.esc:
              if (_this.props.onClose) {
                _this.handleCloseWindow(event);
              }
              return;
            case Keys.up:
              _this.setState({ top: _this.state.top - DEFAULT_STEP });
              break;
            case Keys.down:
              _this.setState({ top: _this.state.top + DEFAULT_STEP });
              break;
            case Keys.left:
              _this.setState({ left: _this.state.left - DEFAULT_STEP });
              break;
            case Keys.right:
              _this.setState({ left: _this.state.left + DEFAULT_STEP });
              break;
            default:
              return;
          }
        }
        _this.dispatchMoveEvent(_this.props.onMove, event, false, void 0);
      };
      _this.onPress = function(data) {
        var e = data.event;
        _this.windowCoordinatesState.differenceLeft = e.pageX - _this.left;
        _this.windowCoordinatesState.differenceTop = e.pageY - _this.top;
      };
      _this.onDrag = function(data) {
        var e = data.event;
        e.originalEvent.preventDefault();
        if (_this.windowStage !== windowStage.FULLSCREEN && _this.props.draggable) {
          _this.setState({
            top: Math.max(e.pageY - _this.windowCoordinatesState.differenceTop, 0),
            left: e.pageX - _this.windowCoordinatesState.differenceLeft,
            isDragging: true
          });
          if (_this.props.onMove) {
            _this.dispatchMoveEvent(_this.props.onMove, e, true, false);
          }
        }
      };
      _this.onRelease = function(data) {
        var e = data.event;
        if (_this.windowStage !== windowStage.FULLSCREEN && _this.props.draggable) {
          if (_this.props.onMove) {
            _this.dispatchMoveEvent(_this.props.onMove, e, true, true);
          }
        }
        _this.setState({
          isDragging: false
        });
      };
      _this.onFocus = function() {
        if (_this._blurTimeout) {
          clearTimeout(_this._blurTimeout);
          _this._blurTimeout = void 0;
        } else {
          _this.setState({
            focused: true,
            zIndex: getMaxZIndex(_this.getCurrentZIndex(), _this.getDocument(), _this._id)
          });
        }
      };
      _this.onBlur = function() {
        clearTimeout(_this._blurTimeout);
        var currentWindow = _this.getWindow();
        if (currentWindow) {
          _this._blurTimeout = currentWindow.setTimeout(function() {
            if (_this.mounted) {
              _this.setState({ focused: false });
            }
            _this._blurTimeout = void 0;
          });
        }
      };
      _this.getInitialTop = function() {
        if (_this.props.top !== void 0) {
          return _this.props.top;
        }
        if (_this.props.initialTop !== void 0) {
          return _this.props.initialTop;
        }
        var height = DEFAULT_HEIGHT;
        if (_this.props.height !== void 0) {
          height = _this.props.height;
        } else if (_this.props.initialHeight !== void 0) {
          height = _this.props.initialHeight;
        }
        if (_this.props.appendTo) {
          return _this.props.appendTo.offsetHeight / 2 - height / 2;
        }
        var currentWindow = _this.getWindow();
        return currentWindow ? currentWindow.innerHeight / 2 - height / 2 : 0;
      };
      _this.getInitialLeft = function() {
        if (_this.props.left !== void 0) {
          return _this.props.left;
        }
        if (_this.props.initialLeft !== void 0) {
          return _this.props.initialLeft;
        }
        var width = DEFAULT_WIDTH;
        if (_this.props.width !== void 0) {
          width = _this.props.width;
        } else if (_this.props.initialWidth !== void 0) {
          width = _this.props.initialWidth;
        }
        if (_this.props.appendTo) {
          return _this.props.appendTo.offsetWidth / 2 - width / 2;
        }
        var currentWindow = _this.getWindow();
        return currentWindow ? currentWindow.innerWidth / 2 - width / 2 : 0;
      };
      _this.getInitialWidth = function() {
        var width = DEFAULT_WIDTH;
        if (_this.props.width !== void 0) {
          width = _this.props.width;
        } else if (_this.props.initialWidth !== void 0) {
          width = _this.props.initialWidth;
        }
        return width;
      };
      _this.getInitialHeight = function() {
        var height = DEFAULT_HEIGHT;
        if (_this.props.height !== void 0) {
          height = _this.props.height;
        } else if (_this.props.initialHeight !== void 0) {
          height = _this.props.initialHeight;
        }
        return height;
      };
      _this.handleMinimize = function(event) {
        event.preventDefault();
        _this.windowCoordinatesState.leftBeforeAction = _this.left;
        _this.windowCoordinatesState.topBeforeAction = _this.top;
        _this.windowCoordinatesState.widthBeforeAction = _this.width;
        _this.windowCoordinatesState.heightBeforeAction = _this.height;
        _this.setState({
          stage: windowStage.MINIMIZED,
          height: 0
        });
        dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.MINIMIZED });
      };
      _this.handleFullscreen = function(event) {
        event.preventDefault();
        _this.windowCoordinatesState.leftBeforeAction = _this.left;
        _this.windowCoordinatesState.topBeforeAction = _this.top;
        _this.windowCoordinatesState.widthBeforeAction = _this.width;
        _this.windowCoordinatesState.heightBeforeAction = _this.height;
        var currentWindow = _this.getWindow();
        var innerWidth = currentWindow ? currentWindow.innerWidth : 0;
        var innerHeight = currentWindow ? currentWindow.innerHeight : 0;
        _this.setState({
          left: 0,
          top: 0,
          width: _this.props.appendTo ? _this.props.appendTo.offsetWidth : innerWidth,
          height: _this.props.appendTo ? _this.props.appendTo.offsetHeight : innerHeight,
          stage: windowStage.FULLSCREEN
        });
        dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.FULLSCREEN });
      };
      _this.handleRestore = function(event) {
        event.preventDefault();
        if (_this.windowStage === windowStage.FULLSCREEN) {
          _this.setState({
            stage: windowStage.DEFAULT,
            left: _this.windowCoordinatesState.leftBeforeAction,
            top: _this.windowCoordinatesState.topBeforeAction,
            width: _this.windowCoordinatesState.widthBeforeAction,
            height: _this.windowCoordinatesState.heightBeforeAction
          });
        } else if (_this.windowStage === windowStage.MINIMIZED) {
          _this.setState({
            stage: windowStage.DEFAULT,
            height: _this.windowCoordinatesState.heightBeforeAction
          });
        }
        dispatchEvent(_this.props.onStageChange, event, _this, { state: windowStage.DEFAULT });
      };
      _this.handleCloseWindow = function(event) {
        event.preventDefault();
        dispatchEvent(_this.props.onClose, event, _this, { state: void 0 });
      };
      _this.handleDoubleClick = function(e) {
        if (_this.windowStage === windowStage.FULLSCREEN || _this.windowStage === windowStage.MINIMIZED) {
          _this.handleRestore(e);
        } else {
          _this.handleFullscreen(e);
        }
      };
      _this.handleResize = function(event, props2) {
        var x = _this.props.appendTo ? event.pageX - _this.offSetCoordinates.x : event.pageX;
        var y = _this.props.appendTo ? event.pageY - _this.offSetCoordinates.y : event.pageY;
        var currentWidth = _this.width;
        var currentHeight = _this.height;
        var minWidth = _this.props.minWidth || DEFAULT_MIN_WIDTH;
        var minHeight = _this.props.minHeight || DEFAULT_MIN_HEIGHT;
        var heightDifference = _this.top - y;
        var widthDifference = _this.left - x;
        var newWidth = x - _this.left;
        var newHeight = y - _this.top;
        var newState = Object.assign({}, _this.state, { isDragging: !props2.end });
        if (props2.direction.indexOf("n") >= 0 && minHeight - (currentHeight + heightDifference) < 0) {
          if (_this.top > 0) {
            newState.height = currentHeight + heightDifference;
          }
          newState.top = y;
        }
        if (props2.direction.indexOf("s") >= 0 && minHeight - newHeight < 0) {
          newState.height = newHeight;
        }
        if (props2.direction.indexOf("w") >= 0 && minWidth - (currentWidth + widthDifference) < 0) {
          if (_this.left > 0) {
            newState.width = currentWidth + widthDifference;
          }
          newState.left = x;
        }
        if (props2.direction.indexOf("e") >= 0 && minWidth - newWidth < 0) {
          newState.width = newWidth;
        }
        _this.setState(newState);
        _this.dispatchMoveEvent(_this.props.onResize, event, true, props2.end);
      };
      _this.dispatchMoveEvent = function(callback, event, drag, end) {
        if (!callback) {
          return;
        }
        callback.call(void 0, {
          nativeEvent: event.nativeEvent ? event.nativeEvent : event.originalEvent,
          drag,
          end,
          target: _this,
          left: _this.state.left,
          top: _this.state.top,
          width: _this.state.width,
          hight: _this.state.height,
          height: _this.state.height
        });
      };
      _this.handleBrowserWindowResize = function() {
        if (_this.windowStage === windowStage.FULLSCREEN) {
          var currentWindow = _this.getWindow();
          var innerWidth_1 = currentWindow ? currentWindow.innerWidth : 0;
          var innerHeight_1 = currentWindow ? currentWindow.innerHeight : 0;
          _this.setState({
            width: _this.props.appendTo ? _this.props.appendTo.offsetWidth : innerWidth_1,
            height: _this.props.appendTo ? _this.props.appendTo.offsetHeight : innerHeight_1
          });
        }
      };
      _this.getCurrentZIndex = function() {
        if (!_this.state || _this.context === void 0) {
          return _this.context ? _this.context : DEFAULT_DIALOGS_ZINDEX;
        }
        return _this.state.zIndex > (_this.context ? _this.context + ZINDEX_DIALOGS_STEP : 0) ? _this.state.zIndex : _this.context + ZINDEX_DIALOGS_STEP;
      };
      _this.getDocument = function() {
        return _this.props.appendTo ? _this.props.appendTo.ownerDocument : document;
      };
      _this.getWindow = function() {
        var currentDocument = _this.getDocument();
        return currentDocument && currentDocument.defaultView;
      };
      validatePackage(packageMetadata);
      _this.state = {
        stage: _this.props.stage || windowStage.DEFAULT,
        isDragging: false,
        top: _this.getInitialTop(),
        left: _this.getInitialLeft(),
        width: _this.getInitialWidth(),
        height: _this.getInitialHeight(),
        focused: true,
        zIndex: getMaxZIndex(_this.getCurrentZIndex(), _this.getDocument(), _this._id)
      };
      _this.windowCoordinatesState = {
        leftBeforeAction: _this.getInitialLeft(),
        topBeforeAction: _this.getInitialTop(),
        widthBeforeAction: _this.getInitialWidth(),
        heightBeforeAction: _this.getInitialHeight()
      };
      return _this;
    }
    WindowWithoutContext2.prototype.componentDidMount = function() {
      var currentWindow = this.getWindow();
      if (currentWindow) {
        currentWindow.addEventListener("resize", this.handleBrowserWindowResize);
      }
      var currentDocument = this.getDocument();
      if (this.props.appendTo && currentDocument) {
        var containerCoordinates = this.props.appendTo.getBoundingClientRect();
        var bodyRect = currentDocument.body.getBoundingClientRect();
        this.offSetCoordinates.x = containerCoordinates.left - bodyRect.left;
        this.offSetCoordinates.y = containerCoordinates.top - bodyRect.top;
      }
      this.mounted = true;
    };
    WindowWithoutContext2.prototype.componentWillUnmount = function() {
      var currentWindow = this.getWindow();
      if (currentWindow) {
        currentWindow.removeEventListener("resize", this.handleBrowserWindowResize);
      }
      this.mounted = false;
    };
    WindowWithoutContext2.prototype.componentDidUpdate = function() {
      var currentDocument = this.getDocument();
      if (this.props.appendTo && currentDocument) {
        var containerCoordinates = this.props.appendTo.getBoundingClientRect();
        var bodyRect = currentDocument.body.getBoundingClientRect();
        this.offSetCoordinates.x = containerCoordinates.left - bodyRect.left;
        this.offSetCoordinates.y = containerCoordinates.top - bodyRect.top;
      }
      this.mounted = true;
    };
    WindowWithoutContext2.prototype.render = function() {
      var _a2, _b;
      var _this = this;
      var elementsArray = React8.Children.toArray(this.props.children);
      var content = this.getContent(elementsArray);
      var actions = this.getActionBar(elementsArray);
      var currentZIndex = this.getCurrentZIndex();
      var classNamesWindow = classNames("k-window", this.props.className, (_a2 = {}, _a2["k-window-".concat(this.props.themeColor)] = this.props.themeColor, _a2["k-window-minimized"] = this.state.stage === "MINIMIZED", _a2["k-window-focused"] = this.state.focused, _a2));
      var windowElement = React8.createElement(
        ZIndexContext.Provider,
        { value: currentZIndex },
        React8.createElement(
          React8.Fragment,
          null,
          this.props.modal && React8.createElement("div", { className: "k-overlay", style: __assign3({ zIndex: currentZIndex }, this.props.overlayStyle) }),
          React8.createElement(
            "div",
            __assign3({}, (_b = {}, _b[DATA_DIALOGS_ID] = this._id, _b), { tabIndex: 0, role: "dialog", "aria-labelledby": this.titleId, onFocus: this.onFocus, onBlur: this.onBlur, onKeyDown: this.onKeyDown, ref: function(el) {
              _this.windowElement = el;
              _this.element = el;
            }, className: classNamesWindow, style: __assign3({ top: this.top, left: this.left, width: this.width, height: this.height || "", zIndex: currentZIndex }, this.props.style) }),
            React8.createElement(
              MiddleLayerOptimization,
              { shouldUpdateOnDrag: this.props.shouldUpdateOnDrag || false, isDragging: this.state.isDragging },
              React8.createElement(
                Draggable,
                { onPress: this.onPress, onDrag: this.onDrag, onRelease: this.onRelease, ref: function(component) {
                  return _this.draggable = component;
                } },
                React8.createElement(WindowTitleBar, { stage: this.windowStage, onDoubleClick: this.props.doubleClickStageChange ? this.handleDoubleClick : void 0, onMinimizeButtonClick: this.handleMinimize, onFullScreenButtonClick: this.handleFullscreen, onRestoreButtonClick: this.handleRestore, onCloseButtonClick: this.handleCloseWindow, closeButton: this.props.closeButton, minimizeButton: this.props.minimizeButton, maximizeButton: this.props.maximizeButton, restoreButton: this.props.restoreButton, id: this.titleId }, this.props.title)
              ),
              this.windowStage !== windowStage.MINIMIZED ? React8.createElement(
                React8.Fragment,
                null,
                React8.createElement("div", { className: "k-window-content" }, content),
                actions
              ) : null,
              this.windowStage === windowStage.DEFAULT && this.props.resizable ? React8.createElement(ResizeHandlers, { onResize: this.handleResize }) : null
            )
          )
        )
      );
      if (canUseDOM) {
        return this.props.appendTo !== null ? ReactDOM2.createPortal(windowElement, this.props.appendTo || document.body) : windowElement;
      }
      return null;
    };
    Object.defineProperty(WindowWithoutContext2.prototype, "top", {
      // Getters
      get: function() {
        if (this.windowStage !== windowStage.FULLSCREEN) {
          return Math.max(this.props.top || this.state.top, 0);
        }
        return 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WindowWithoutContext2.prototype, "left", {
      get: function() {
        if (this.windowStage !== windowStage.FULLSCREEN) {
          return Math.max(this.props.left || this.state.left, 0);
        }
        return 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WindowWithoutContext2.prototype, "width", {
      get: function() {
        var width = this.props.width || this.state.width;
        if (this.windowStage === windowStage.FULLSCREEN) {
          if (this.props.appendTo) {
            width = this.props.appendTo.offsetWidth;
            return width;
          }
          var currentWindow = this.getWindow();
          width = currentWindow ? currentWindow.innerWidth : 0;
        }
        return width;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WindowWithoutContext2.prototype, "height", {
      get: function() {
        var height = this.props.height || this.state.height;
        if (this.windowStage === windowStage.FULLSCREEN) {
          if (this.props.appendTo) {
            height = this.props.appendTo.offsetHeight;
            return height;
          }
          var currentWindow = this.getWindow();
          height = currentWindow ? currentWindow.innerHeight : 0;
        } else if (this.windowStage === windowStage.MINIMIZED) {
          height = 0;
        }
        return height;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(WindowWithoutContext2.prototype, "windowStage", {
      get: function() {
        return this.props.stage || this.state.stage;
      },
      enumerable: false,
      configurable: true
    });
    WindowWithoutContext2.prototype.getActionBar = function(children) {
      return children.filter(function(child) {
        return child && child.type === WindowActionsBar;
      });
    };
    WindowWithoutContext2.prototype.getContent = function(children) {
      return children.filter(function(child) {
        return child && child.type !== WindowActionsBar;
      });
    };
    WindowWithoutContext2.prototype.generateTitleId = function() {
      return "window-title-" + this._id;
    };
    WindowWithoutContext2.displayName = "Window";
    WindowWithoutContext2.propTypes = {
      width: PropTypes4.number,
      height: PropTypes4.number,
      left: PropTypes4.number,
      top: PropTypes4.number,
      initialWidth: PropTypes4.number,
      initialHeight: PropTypes4.number,
      initialLeft: PropTypes4.number,
      initialTop: PropTypes4.number,
      minWidth: PropTypes4.number,
      minHeight: PropTypes4.number,
      resizable: PropTypes4.bool,
      draggable: PropTypes4.bool,
      title: PropTypes4.any,
      shouldUpdateOnDrag: PropTypes4.bool,
      stage: PropTypes4.oneOf(["DEFAULT", "MINIMIZED", "FULLSCREEN"]),
      className: PropTypes4.string,
      style: PropTypes4.object,
      overlayStyle: PropTypes4.object
    };
    WindowWithoutContext2.defaultProps = {
      minWidth: DEFAULT_MIN_WIDTH,
      minHeight: DEFAULT_MIN_HEIGHT,
      resizable: true,
      draggable: true,
      modal: false,
      doubleClickStageChange: true
    };
    WindowWithoutContext2.contextType = ZIndexContext;
    return WindowWithoutContext2;
  }(React8.Component)
);
var WindowPropsContext = createPropsContext();
var Window = withPropsContext(WindowPropsContext, WindowWithoutContext);
Window.displayName = "KendoReactWindow";

export {
  DialogActionsBar,
  DialogPropsContext,
  Dialog,
  WindowActionsBar,
  WindowPropsContext,
  Window
};
//# sourceMappingURL=chunk-JUNIATII.js.map
