import {
  TreeView
} from "./chunk-JEFUAUFC.js";
import {
  ActionSheet,
  ActionSheetContent,
  ActionSheetHeader
} from "./chunk-X4OET5D2.js";
import {
  FloatingLabel
} from "./chunk-4R6ABWJA.js";
import {
  Button,
  Chip
} from "./chunk-FUIIQ4Y4.js";
import {
  caretAltDownIcon,
  plusIcon,
  searchIcon,
  xIcon
} from "./chunk-RFS2H3W2.js";
import {
  provideLocalizationService,
  registerForLocalization,
  useLocalization
} from "./chunk-NQBGXZOD.js";
import {
  Popup
} from "./chunk-XVBPUVJV.js";
import {
  IconWrap,
  Keys,
  canUseDOM,
  classNames,
  createPropsContext,
  extendDataItem,
  getScrollbarWidth,
  getTabIndex,
  getter,
  guid,
  kendoThemeMaps,
  mapTree,
  noop,
  setScrollbarWidth,
  svgIconPropType,
  usePropsContext,
  useRtl,
  validatePackage2 as validatePackage,
  withPropsContext
} from "./chunk-KTMNFILY.js";
import {
  require_prop_types
} from "./chunk-O6GWARG4.js";
import {
  require_react
} from "./chunk-ABDRZE5M.js";
import {
  __toESM
} from "./chunk-LFBQMW2U.js";

// node_modules/@progress/kendo-react-dropdowns/dist/es/DropDownList/DropDownList.js
var React7 = __toESM(require_react());
var PropTypes2 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/ListContainer.js
var React = __toESM(require_react());
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var ListContainer = (
  /** @class */
  function(_super) {
    __extends(ListContainer2, _super);
    function ListContainer2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ListContainer2.prototype.render = function() {
      var _a2 = this.props, children = _a2.children, width = _a2.width, dir = _a2.dir, itemsCount = _a2.itemsCount, popupSettings = _a2.popupSettings;
      return React.createElement(Popup, __assign({ style: { width, direction: dir }, contentKey: itemsCount && itemsCount.join() }, popupSettings), children);
    };
    return ListContainer2;
  }(React.Component)
);
var ListContainer_default = ListContainer;

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/ListFilter.js
var React2 = __toESM(require_react());
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var sizeMap = kendoThemeMaps.sizeMap;
var roundedMap = kendoThemeMaps.roundedMap;
var ListFilter = (
  /** @class */
  function(_super) {
    __extends2(ListFilter2, _super);
    function ListFilter2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.input = null;
      return _this;
    }
    ListFilter2.prototype.render = function() {
      var _a2;
      var _this = this;
      var _b = this.props, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode, inputRef = _b.inputRef;
      return React2.createElement(
        "div",
        { className: "k-list-filter" },
        React2.createElement(
          "span",
          { className: classNames("k-searchbox k-input", (_a2 = {}, _a2["k-input-".concat(sizeMap[size] || size)] = size, _a2["k-rounded-".concat(roundedMap[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2)) },
          React2.createElement(IconWrap, { className: "k-input-icon", name: "search", icon: searchIcon }),
          React2.createElement("input", { ref: inputRef ? inputRef : function(input) {
            return _this.input = input;
          }, value: this.props.value || "", className: "k-input-inner", onChange: this.props.onChange, onKeyDown: this.props.onKeyDown, tabIndex: this.props.tabIndex, onClick: function(e) {
            return e.stopPropagation();
          } })
        )
      );
    };
    return ListFilter2;
  }(React2.Component)
);
var ListFilter_default = ListFilter;

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/ListDefaultItem.js
var React3 = __toESM(require_react());

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/utils.js
var isPresent = function(value) {
  return value !== null && value !== void 0;
};
var sameCharsOnly = function(word, character) {
  for (var idx = 0; idx < word.length; idx++) {
    if (word.charAt(idx) !== character) {
      return false;
    }
  }
  return true;
};
var shuffleData = function(data, splitIndex, defaultItem) {
  var result = data;
  if (defaultItem) {
    result = [defaultItem].concat(result);
  }
  return result.slice(splitIndex).concat(result.slice(0, splitIndex));
};
var matchText = function(text, word, ignoreCase) {
  if (!isPresent(text)) {
    return false;
  }
  var temp = String(text);
  if (ignoreCase) {
    temp = temp.toLowerCase();
  }
  return temp.indexOf(word) === 0;
};
var scrollToItem = function(scrollElem, list, itemIndex, translate, virtualScroll) {
  var viewportHeight = scrollElem.offsetHeight;
  var li = list.children.item(itemIndex);
  var itemOffsetTop = li.offsetTop + (virtualScroll ? translate - scrollElem.scrollTop : 0);
  var itemHeight = li.offsetHeight;
  if (virtualScroll) {
    var diff = 0;
    if (itemOffsetTop + itemHeight > viewportHeight) {
      diff = itemOffsetTop + itemHeight - viewportHeight;
    } else if (itemOffsetTop < 0) {
      diff = itemOffsetTop;
    }
    if (diff !== 0) {
      scrollElem.scrollTop += diff;
    } else if (scrollElem.scrollTop === 0 && translate !== 0) {
      scrollElem.scrollTop = translate;
    }
  } else {
    if (itemOffsetTop + itemHeight > viewportHeight + scrollElem.scrollTop) {
      scrollElem.scrollTop = itemOffsetTop + itemHeight - viewportHeight;
    } else if (itemOffsetTop < scrollElem.scrollTop) {
      scrollElem.scrollTop -= scrollElem.scrollTop - itemOffsetTop;
    }
  }
};
var itemIndexStartsWith = function(items, text, field) {
  var result = -1;
  if (text) {
    text = text.toLowerCase();
    for (var i = 0; i < items.length; i++) {
      var itemText = (getItemValue(items[i], field) || "") + "";
      if (itemText && itemText.toLowerCase().startsWith(text)) {
        result = i;
        break;
      }
    }
  }
  return result;
};
var getItemIndexByText = function(data, text, textField, matchCase) {
  if (matchCase === void 0) {
    matchCase = false;
  }
  var casing = function(value) {
    return matchCase ? value : value.toLowerCase();
  };
  return data.findIndex(function(item) {
    return textField ? casing(getItemValue(item, textField)) === casing(text) : casing(text) === casing(item.toString());
  });
};
var getItemValue = function(item, field) {
  if (field && isPresent(item)) {
    var path = field.split(".");
    var data_1 = item;
    path.forEach(function(p) {
      data_1 = data_1 ? data_1[p] : void 0;
    });
    return data_1;
  }
  return item;
};
var matchDataCollections = function(data1, data2, key) {
  if (data1 === void 0) {
    data1 = [];
  }
  if (data2 === void 0) {
    data2 = [];
  }
  if (data1 === data2) {
    return true;
  }
  if (data1.length !== data2.length) {
    return false;
  }
  for (var i = 0; i < data1.length; i++) {
    if (!areSame(data1[i], data2[i], key)) {
      return false;
    }
  }
  return true;
};
var removeDataItems = function(items, toRemove, key) {
  toRemove.forEach(function(item) {
    var itemIndex = items.findIndex(function(i) {
      return areSame(i, item, key);
    });
    if (itemIndex !== -1) {
      items.splice(itemIndex, 1);
    }
  });
};
var areSame = function(item1, item2, key) {
  return item1 === item2 || isPresent(item1) === isPresent(item2) && getItemValue(item1, key) === getItemValue(item2, key);
};
var getFocusedItem = function(data, value, textField) {
  if (value) {
    var selectedIndex = getItemIndexByText(data, value, textField, true);
    return selectedIndex !== -1 ? data[selectedIndex] : data[itemIndexStartsWith(data, value, textField)];
  }
  return data[0];
};
var suggestValue = function(value, data, textField) {
  if (data === void 0) {
    data = [];
  }
  var suggested = "";
  if (value) {
    var suggestedItem = data[itemIndexStartsWith(data, value, textField)];
    if (suggestedItem) {
      var suggestedText = getItemValue(suggestedItem, textField);
      if (value.toLowerCase() !== suggestedText.toLowerCase()) {
        suggested = suggestedText.substring(value.length);
      }
    }
  }
  return suggested;
};
var preventDefaultNonInputs = function(event) {
  if (event.target.nodeName !== "INPUT") {
    event.preventDefault();
  }
};
var matchTags = function(tag1, tag2, key) {
  if (!!tag1 !== !!tag2 || tag1.text !== tag2.text) {
    return false;
  }
  return tag1 === tag2 || matchDataCollections(tag1.data, tag2.data, key);
};

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/ListDefaultItem.js
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var preventDefault = function(e) {
  return e.preventDefault();
};
var ListDefaultItem = (
  /** @class */
  function(_super) {
    __extends3(ListDefaultItem2, _super);
    function ListDefaultItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ListDefaultItem2.prototype.render = function() {
      var _a2 = this.props, selected = _a2.selected, defaultItem = _a2.defaultItem, textField = _a2.textField;
      return React3.createElement("div", { onClick: this.props.onClick, onMouseDown: preventDefault, style: { position: "unset" }, className: classNames("k-list-optionlabel", {
        "k-selected": selected
      }) }, getItemValue(defaultItem, textField) || "");
    };
    return ListDefaultItem2;
  }(React3.Component)
);
var ListDefaultItem_default = ListDefaultItem;

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/List.js
var React5 = __toESM(require_react());

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/ListItem.js
var React4 = __toESM(require_react());
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ListItem = (
  /** @class */
  function(_super) {
    __extends4(ListItem2, _super);
    function ListItem2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.handleClick = function(e) {
        return _this.props.onClick(_this.props.index, e);
      };
      return _this;
    }
    ListItem2.prototype.render = function() {
      var _a2 = this.props, selected = _a2.selected, group = _a2.group, dataItem = _a2.dataItem, virtual = _a2.virtual, renderer = _a2.render;
      var item = React4.createElement(
        "li",
        { id: this.props.id, role: "option", "aria-selected": selected, className: classNames("k-list-item", {
          "k-selected": selected,
          "k-focus": this.props.focused,
          "k-first": Boolean(group)
        }), onClick: this.handleClick, style: { position: virtual ? "relative" : "unset" } },
        React4.createElement("span", { className: "k-list-item-text" }, getItemValue(dataItem, this.props.textField).toString()),
        group !== void 0 ? React4.createElement("div", { className: "k-list-item-group-label" }, group) : null
      );
      return renderer !== void 0 ? renderer.call(void 0, item, this.props) : item;
    };
    return ListItem2;
  }(React4.Component)
);
var ListItem_default = ListItem;

// node_modules/@progress/kendo-react-dropdowns/dist/es/messages/index.js
var _a;
var nodata = "dropdowns.nodata";
var clear = "dropdowns.clear";
var comboArrowBtnAriaLabelExpand = "dropdowns.comboArrowBtnAriaLabelExpand";
var comboArrowBtnAriaLabelCollapse = "dropdowns.comboArrowBtnAriaLabelCollapse";
var dropDownListArrowBtnAriaLabel = "dropdowns.dropDownListArrowBtnAriaLabel";
var messages = (_a = {}, _a[clear] = "clear", _a[nodata] = "NO DATA FOUND.", _a[comboArrowBtnAriaLabelExpand] = "expand combobox", _a[comboArrowBtnAriaLabelCollapse] = "collapse combobox", _a[dropDownListArrowBtnAriaLabel] = "select", _a);

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/List.js
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var List = (
  /** @class */
  function(_super) {
    __extends5(List2, _super);
    function List2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    List2.prototype.renderItems = function() {
      var _this = this;
      var _a2 = this.props, textField = _a2.textField, valueField = _a2.valueField, groupField = _a2.groupField, optionsGuid = _a2.optionsGuid, _b = _a2.skip, skip = _b === void 0 ? 0 : _b, virtual = _a2.virtual, focusedIndex = _a2.focusedIndex, _c = _a2.highlightSelected, highlightSelected = _c === void 0 ? true : _c, value = _a2.value, data = _a2.data, itemRender = _a2.itemRender;
      var isArray = Array.isArray(value);
      return data.map(function(item, index) {
        var realIndex = skip + index;
        var selected = highlightSelected && (!isArray && areSame(item, value, valueField) || isArray && value.findIndex(function(i) {
          return areSame(i, item, valueField);
        }) !== -1);
        var group = void 0;
        var current, previous;
        if (index > 0 && groupField !== void 0) {
          current = getItemValue(item, groupField);
          previous = getItemValue(data[index - 1], groupField);
          if (current && previous && current !== previous) {
            group = current;
          }
        }
        return React5.createElement(ListItem_default, { id: "option-".concat(optionsGuid, "-").concat(realIndex), virtual, dataItem: item, selected, focused: focusedIndex === index, index: realIndex, key: realIndex, onClick: _this.props.onClick, textField, group, render: itemRender });
      });
    };
    List2.prototype.renderNoValueElement = function(localizationService) {
      var noDataRender = this.props.noDataRender;
      var noDataElement = React5.createElement(
        "div",
        { className: "k-nodata" },
        React5.createElement("div", null, localizationService.toLanguageString(nodata, messages[nodata]))
      );
      return noDataRender ? noDataRender.call(void 0, noDataElement) : noDataElement;
    };
    List2.prototype.render = function() {
      var localizationService = provideLocalizationService(this);
      var _a2 = this.props, id = _a2.id, show = _a2.show, wrapperCssClass = _a2.wrapperCssClass, wrapperStyle = _a2.wrapperStyle, listStyle = _a2.listStyle, listRef = _a2.listRef, wrapperRef = _a2.wrapperRef, _b = _a2.listClassName, listClassName = _b === void 0 ? "k-list-ul" : _b;
      var items = this.renderItems();
      return items.length ? React5.createElement(
        "div",
        { className: wrapperCssClass, style: wrapperStyle, ref: wrapperRef, onMouseDown: this.props.onMouseDown, onBlur: this.props.onBlur, onScroll: this.props.onScroll, unselectable: "on" },
        React5.createElement("ul", { id, role: "listbox", "aria-hidden": !show ? true : void 0, className: listClassName, ref: listRef, style: listStyle }, items),
        this.props.scroller && React5.createElement("div", { className: "k-height-container" }, this.props.scroller)
      ) : this.renderNoValueElement(localizationService);
    };
    return List2;
  }(React5.Component)
);
var List_default = List;
registerForLocalization(List);

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/DropDownBase.js
var React6 = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/VirtualScroll.js
var maxHeightIE = 1533915;
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll2() {
      var _this = this;
      this.container = null;
      this.scrollElement = null;
      this.list = null;
      this.containerHeight = 0;
      this.skip = 0;
      this.total = 0;
      this.enabled = false;
      this.pageSize = 0;
      this.itemHeight = 0;
      this.PageChange = null;
      this.prevScrollPos = 0;
      this.listTranslate = 0;
      this.scrollSyncing = false;
      this.scrollerRef = function(element) {
        var vs = _this;
        vs.container = element;
        if (element) {
          element.setAttribute("unselectable", "on");
          window.setTimeout(vs.calcScrollElementHeight.bind(vs), 0);
        }
      };
      this.calcScrollElementHeight = function() {
        _this.scrollSyncing = true;
        var heightChanged = false;
        _this.itemHeight = _this.list ? _this.list.children[0].offsetHeight : _this.itemHeight;
        _this.containerHeight = Math.min(maxHeightIE, _this.itemHeight * _this.total);
        var newHeight = _this.containerHeight;
        if (_this.scrollElement) {
          heightChanged = _this.scrollElement.style.height !== newHeight + "px";
          if (heightChanged) {
            _this.scrollElement.style.height = newHeight + "px";
          }
        }
        _this.scrollSyncing = false;
        return heightChanged;
      };
      this.scrollHandler = this.scrollHandler.bind(this);
    }
    Object.defineProperty(VirtualScroll2.prototype, "translate", {
      get: function() {
        return this.listTranslate;
      },
      enumerable: false,
      configurable: true
    });
    VirtualScroll2.prototype.changePage = function(skip, e) {
      var newSkip = Math.min(Math.max(0, skip), this.total - this.pageSize);
      if (newSkip !== this.skip && this.PageChange) {
        this.PageChange({ skip: newSkip, take: this.pageSize }, e);
      }
    };
    VirtualScroll2.prototype.translateTo = function(dY) {
      this.listTranslate = dY;
      if (this.list) {
        this.list.style.transform = "translateY(" + dY + "px)";
      }
    };
    VirtualScroll2.prototype.reset = function() {
      if (this.container) {
        this.calcScrollElementHeight();
        this.container.scrollTop = 0;
        this.translateTo(0);
      }
    };
    VirtualScroll2.prototype.scrollToEnd = function() {
      if (this.container && this.list) {
        this.calcScrollElementHeight();
        this.container.scrollTop = this.container.scrollHeight - this.container.offsetHeight;
        this.translateTo(this.container.scrollHeight);
      }
    };
    VirtualScroll2.prototype.localScrollUp = function(e) {
      var height = this.itemHeight;
      var scrollTop = this.container.scrollTop;
      var targetTranslate = this.listTranslate;
      var items;
      var additionalOnTop = scrollTop - targetTranslate;
      if (additionalOnTop > height) {
        return;
      }
      for (items = 0; items < this.skip; items++) {
        if (targetTranslate + height + additionalOnTop <= scrollTop) {
          break;
        }
        targetTranslate -= height;
      }
      targetTranslate = this.validateTranslate(targetTranslate);
      if (this.skip - items <= 0 && targetTranslate >= scrollTop) {
        this.translateTo(0);
        this.changePage(0, e);
        this.container.scrollTop = 0;
        return;
      }
      if (targetTranslate !== this.listTranslate) {
        this.translateTo(targetTranslate);
        this.changePage(this.skip - items, e);
      }
    };
    VirtualScroll2.prototype.localScrollDown = function(e) {
      var height = this.itemHeight;
      var scrollTop = this.container.scrollTop;
      var targetTranslate = this.listTranslate;
      var itemsLenght = this.list.children.length;
      var items;
      for (items = 0; items < itemsLenght; items++) {
        if (targetTranslate + height >= scrollTop) {
          break;
        }
        targetTranslate += height;
      }
      targetTranslate = this.validateTranslate(targetTranslate);
      if (items >= itemsLenght && this.skip + items >= this.total) {
        this.translateTo(targetTranslate);
        this.changePage(this.total - 1, e);
      } else if (targetTranslate !== this.listTranslate) {
        this.translateTo(targetTranslate);
        this.changePage(this.skip + items, e);
      }
    };
    VirtualScroll2.prototype.scrollNonStrict = function(e) {
      var floatItemIndex = this.total * this.prevScrollPos / this.containerHeight;
      var itemIndex = Math.min(Math.floor(floatItemIndex), this.total - 1);
      var targetTranslate = this.containerHeight * floatItemIndex / this.total;
      targetTranslate = this.validateTranslate(targetTranslate);
      this.translateTo(targetTranslate);
      this.changePage(itemIndex, e);
    };
    VirtualScroll2.prototype.scrollHandler = function(e) {
      var scrollTop = this.container ? this.container.scrollTop : 0;
      var prev = this.prevScrollPos;
      this.prevScrollPos = scrollTop;
      if (!this.enabled || !this.list || !this.container || this.scrollSyncing) {
        return;
      }
      if (scrollTop - prev <= 0 && scrollTop > this.listTranslate - this.list.scrollHeight / 10) {
        this.localScrollUp(e);
      } else if (scrollTop - prev > 0 && scrollTop < this.listTranslate + this.list.scrollHeight * 2 / 3) {
        this.localScrollDown(e);
      } else {
        this.scrollNonStrict(e);
      }
    };
    VirtualScroll2.prototype.validateTranslate = function(translate) {
      translate = Math.max(0, translate);
      translate = Math.min(this.containerHeight, translate);
      return translate;
    };
    return VirtualScroll2;
  }()
);
var VirtualScroll_default = VirtualScroll;

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/Navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2() {
    }
    Navigation2.prototype.navigate = function(args) {
      var keyCode = args.keyCode;
      if (keyCode === Keys.up || keyCode === Keys.left) {
        return this.next({ current: args.current, min: args.min, max: args.max, step: -1 });
      } else if (keyCode === Keys.down || keyCode === Keys.right) {
        return this.next({ current: args.current, min: args.min, max: args.max, step: 1 });
      } else if (keyCode === Keys.home) {
        return 0;
      } else if (keyCode === Keys.end) {
        return args.max;
      }
    };
    Navigation2.prototype.next = function(args) {
      if (!isPresent(args.current)) {
        return args.min;
      } else {
        return Math.min(args.max, Math.max(args.current + args.step, args.min));
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/DropDownBase.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var DropDownBase = (
  /** @class */
  function() {
    function DropDownBase2(component) {
      var _this = this;
      this.wrapper = null;
      this.list = null;
      this.vs = new VirtualScroll_default();
      this.navigation = new Navigation();
      this.handleItemClick = function(index, event) {
        var state = _this.initState();
        state.syntheticEvent = event;
        event.stopPropagation();
        _this.component.handleItemSelect(index, state);
        _this.togglePopup(state);
        _this.applyState(state);
      };
      this.handleFocus = function(event) {
        if (!_this.component.state.focused) {
          var state = _this.initState();
          state.data.focused = true;
          state.events.push({ type: "onFocus" });
          state.syntheticEvent = event;
          _this.applyState(state);
        }
      };
      this.filterChanged = function(text, state) {
        var _a2 = _this.component.props, textField = _a2.textField, filterable = _a2.filterable;
        if (filterable) {
          state.events.push({
            type: "onFilterChange",
            filter: {
              field: textField,
              operator: "contains",
              ignoreCase: true,
              value: text
            }
          });
        }
      };
      this.togglePopup = function(state) {
        var props = _this.component.props;
        var opened = props.opened !== void 0 ? props.opened : _this.component.state.opened;
        if (props.opened === void 0) {
          state.data.opened = !opened;
        }
        if (opened) {
          state.events.push({ type: "onClose" });
        } else {
          state.events.push({ type: "onOpen" });
          _this.calculatePopupWidth();
        }
      };
      this.pageChange = function(page, syntheticEvent) {
        var state = _this.initState();
        state.syntheticEvent = syntheticEvent;
        _this.triggerOnPageChange(state, page.skip, page.take);
        _this.applyState(state);
      };
      this.scrollToVirtualItem = function(virtual, selectedItemIndex) {
        var vs = _this.vs;
        vs.enabled = false;
        if (virtual.skip === 0) {
          vs.reset();
        } else if (virtual.skip + virtual.pageSize === virtual.total) {
          vs.scrollToEnd();
        } else {
          var scrollTop = vs.translate;
          if (scrollTop === 0) {
            vs.calcScrollElementHeight();
            scrollTop = vs.itemHeight * virtual.skip;
            vs.translateTo(scrollTop - vs.itemHeight);
          }
          if (vs.container) {
            vs.container.scrollTop = scrollTop;
          }
          _this.scrollToItem(selectedItemIndex, true);
        }
        window.setTimeout(function() {
          return vs.enabled = true;
        }, 10);
      };
      this.renderScrollElement = function() {
        var vs = _this.vs;
        return vs.enabled && React6.createElement("div", { ref: function(element) {
          return vs.scrollElement = element;
        }, key: "scrollElementKey" });
      };
      this.listBoxId = guid();
      this.guid = guid();
      this.component = component;
      this.vs.PageChange = this.pageChange;
    }
    DropDownBase2.prototype.didMount = function() {
      var props = this.component.props;
      var popupSettings = props.popupSettings || {};
      var style = props.style || {};
      var popupWidth = popupSettings.width;
      var shouldUpdate = props.opened === true;
      if (popupWidth === void 0) {
        this.calculatePopupWidth();
      }
      if (props.dir === void 0 && style.direction === void 0) {
        this.calculateDir();
        shouldUpdate = true;
      }
      if (shouldUpdate) {
        this.component.forceUpdate();
      }
    };
    DropDownBase2.prototype.calculateDir = function() {
      var element = this.component.element;
      if (element && element.ownerDocument && element.ownerDocument.defaultView) {
        this.dirCalculated = element.ownerDocument.defaultView.getComputedStyle(element).direction || void 0;
      }
    };
    DropDownBase2.prototype.calculatePopupWidth = function() {
      if (this.wrapper) {
        this.popupWidth = this.wrapper.offsetWidth + "px";
      }
    };
    DropDownBase2.prototype.scrollToItem = function(itemIndex, vsEnabled, once) {
      var _this = this;
      var list = this.list || this.vs.list;
      if (!list && !once) {
        setTimeout(function() {
          _this.scrollToItem(itemIndex, vsEnabled, true);
        }, 10);
      }
      if (list && itemIndex >= 0) {
        var vs = this.vs;
        var scrollElement = vs.container || list.parentNode;
        var virtualScroll = vsEnabled !== void 0 ? vsEnabled : vs.enabled;
        scrollToItem(scrollElement, list, itemIndex, vs.translate, virtualScroll);
      }
    };
    DropDownBase2.prototype.initState = function() {
      var state = {
        data: {},
        events: [],
        syntheticEvent: void 0
      };
      return state;
    };
    DropDownBase2.prototype.applyState = function(state) {
      var _this = this;
      if (Object.keys(state.data).length > 0) {
        this.component.setState(state.data);
      }
      var eventArgs = {
        syntheticEvent: state.syntheticEvent,
        nativeEvent: state.syntheticEvent ? state.syntheticEvent.nativeEvent : void 0,
        target: this.component,
        value: this.component.value
      };
      state.events.forEach(function(eventData) {
        var type = eventData.type;
        delete eventData.type;
        var handler = type && _this.component.props[type];
        if (handler) {
          handler.call(void 0, __assign2(__assign2({}, eventArgs), eventData));
        }
      });
    };
    DropDownBase2.prototype.triggerOnPageChange = function(state, skip, take) {
      var virtual = this.component.props.virtual;
      if (virtual) {
        var newSkip = Math.min(Math.max(0, skip), Math.max(0, virtual.total - take));
        if (newSkip !== virtual.skip) {
          state.events.push({
            type: "onPageChange",
            page: { skip: newSkip, take }
          });
        }
      }
    };
    DropDownBase2.prototype.triggerPageChangeCornerItems = function(item, state) {
      var props = this.component.props;
      var _a2 = props.data, data = _a2 === void 0 ? [] : _a2, dataItemKey = props.dataItemKey, virtual = props.virtual;
      var opened = props.opened !== void 0 ? props.opened : this.component.state.opened;
      if (item && virtual && this.vs.enabled) {
        if (virtual.skip > 0 && areSame(item, data[0], dataItemKey)) {
          this.triggerOnPageChange(state, virtual.skip - 1, virtual.pageSize);
        } else if (!opened && virtual.skip + virtual.pageSize < virtual.total && areSame(item, data[data.length - 1], dataItemKey)) {
          this.triggerOnPageChange(state, virtual.skip + 1, virtual.pageSize);
        }
      }
    };
    DropDownBase2.prototype.getPopupSettings = function() {
      return Object.assign({}, DropDownBase2.defaultProps.popupSettings, this.component.props.popupSettings);
    };
    DropDownBase2.basicPropTypes = {
      opened: PropTypes.bool,
      disabled: PropTypes.bool,
      dir: PropTypes.string,
      tabIndex: PropTypes.number,
      accessKey: PropTypes.string,
      data: PropTypes.array,
      textField: PropTypes.string,
      className: PropTypes.string,
      label: PropTypes.string,
      loading: PropTypes.bool,
      popupSettings: PropTypes.shape({
        animate: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
          openDuration: PropTypes.number,
          closeDuration: PropTypes.number
        })]),
        popupClass: PropTypes.string,
        className: PropTypes.string,
        appendTo: PropTypes.any,
        width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        height: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
      }),
      onOpen: PropTypes.func,
      onClose: PropTypes.func,
      onFocus: PropTypes.func,
      onBlur: PropTypes.func,
      onChange: PropTypes.func,
      itemRender: PropTypes.func,
      listNoDataRender: PropTypes.func,
      focusedItemIndex: PropTypes.func,
      header: PropTypes.node,
      footer: PropTypes.node
    };
    DropDownBase2.propTypes = __assign2(__assign2({}, DropDownBase2.basicPropTypes), { value: PropTypes.any, defaultValue: PropTypes.any, filterable: PropTypes.bool, filter: PropTypes.string, virtual: PropTypes.shape({
      pageSize: PropTypes.number.isRequired,
      skip: PropTypes.number.isRequired,
      total: PropTypes.number.isRequired
    }), onFilterChange: PropTypes.func, onPageChange: PropTypes.func });
    DropDownBase2.defaultProps = {
      popupSettings: {
        height: "200px"
      },
      required: false,
      validityStyles: true
    };
    return DropDownBase2;
  }()
);
var DropDownBase_default = DropDownBase;

// node_modules/@progress/kendo-react-dropdowns/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-dropdowns",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1680171876,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-dropdowns/dist/es/DropDownList/DropDownList.js
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var VALIDATION_MESSAGE = "Please select a value from the list!";
var sizeMap2 = kendoThemeMaps.sizeMap;
var roundedMap2 = kendoThemeMaps.roundedMap;
var DropDownListWithoutContext = (
  /** @class */
  function(_super) {
    __extends6(DropDownListWithoutContext2, _super);
    function DropDownListWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {};
      _this._element = null;
      _this.base = new DropDownBase_default(_this);
      _this.searchState = { word: "", last: "" };
      _this._select = null;
      _this._skipFocusEvent = false;
      _this._filterInput = null;
      _this._navigated = false;
      _this._inputId = guid();
      _this.focus = function() {
        if (_this.base.wrapper) {
          _this.base.wrapper.focus();
        }
      };
      _this.handleItemSelect = function(index, state) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, virtual = _a2.virtual, dataItemKey = _a2.dataItemKey, defaultItem = _a2.defaultItem;
        var skip = virtual ? virtual.skip : 0;
        var item = index === -1 && defaultItem !== void 0 ? defaultItem : data[index - skip];
        var newSelected = !areSame(item, _this.value, dataItemKey);
        _this.triggerOnChange(item, state);
        if (newSelected) {
          _this.base.triggerPageChangeCornerItems(item, state);
        }
      };
      _this.componentRef = function(element) {
        _this._element = element;
        _this.base.wrapper = element;
      };
      _this.dummySelect = function(value) {
        return React7.createElement(
          "select",
          { name: _this.props.name, ref: function(el) {
            _this._select = el;
          }, tabIndex: -1, "aria-hidden": true, title: _this.props.label, style: { opacity: 0, width: 1, border: 0, zIndex: -1, position: "absolute", left: "50%" } },
          React7.createElement("option", { value: _this.props.valueMap ? _this.props.valueMap.call(void 0, value) : value })
        );
      };
      _this.renderListContainer = function() {
        var _a2;
        var _b = _this.props, header = _b.header, footer = _b.footer, dir = _b.dir, _c = _b.data, data = _c === void 0 ? [] : _c, size = _b.size;
        var base = _this.base;
        var popupSettings = base.getPopupSettings();
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
        var listContainerProps = {
          dir: dir !== void 0 ? dir : base.dirCalculated,
          width: popupWidth,
          popupSettings: {
            popupClass: classNames(popupSettings.popupClass, "k-list-container", "k-dropdownlist-popup"),
            className: popupSettings.className,
            animate: popupSettings.animate,
            anchor: _this.element,
            show: opened,
            onOpen: _this.onPopupOpened,
            onClose: _this.onPopupClosed,
            appendTo: popupSettings.appendTo
          },
          itemsCount: [data.length]
        };
        return React7.createElement(
          ListContainer_default,
          __assign3({}, listContainerProps),
          _this.renderListFilter(),
          header && React7.createElement("div", { className: "k-list-header" }, header),
          React7.createElement(
            "div",
            { className: classNames("k-list", (_a2 = {}, _a2["k-list-".concat(sizeMap2[size] || size)] = size, _a2["k-virtual-list"] = _this.base.vs.enabled, _a2)) },
            _this.renderDefaultItem(),
            _this.renderList()
          ),
          footer && React7.createElement("div", { className: "k-list-footer" }, footer)
        );
      };
      _this.renderList = function() {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField, dataItemKey = _a2.dataItemKey, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, listNoDataRender = _a2.listNoDataRender, itemRender = _a2.itemRender;
        var vs = _this.base.vs;
        var skip = virtual.skip;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var popupSettings = _this.base.getPopupSettings();
        var translate = "translateY(".concat(vs.translate, "px)");
        return React7.createElement(List_default, { id: _this.base.listBoxId, show: opened, data: data.slice(), focusedIndex: _this.focusedIndex(), value: _this.value, textField, valueField: dataItemKey, optionsGuid: _this.base.guid, listRef: function(list) {
          return vs.list = _this.base.list = list;
        }, wrapperStyle: { maxHeight: popupSettings.height }, wrapperCssClass: "k-list-content", listStyle: vs.enabled ? { transform: translate } : void 0, key: "listkey", skip, onClick: _this.handleItemClick, itemRender, noDataRender: listNoDataRender, onScroll: function(e) {
          vs.scrollHandler(e);
        }, wrapperRef: vs.scrollerRef, scroller: _this.base.renderScrollElement() });
      };
      _this.renderListFilter = function() {
        var filterText = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        return _this.props.filterable && React7.createElement(ListFilter_default, { value: filterText, ref: function(filter) {
          return _this._filterInput = filter && filter.input;
        }, onChange: _this.handleListFilterChange, onKeyDown: _this.handleKeyDown, size: _this.props.size, rounded: _this.props.rounded, fillMode: _this.props.fillMode });
      };
      _this.renderDefaultItem = function() {
        var _a2 = _this.props, textField = _a2.textField, defaultItem = _a2.defaultItem, dataItemKey = _a2.dataItemKey;
        return defaultItem !== void 0 && React7.createElement(ListDefaultItem_default, { defaultItem, textField, selected: areSame(_this.value, defaultItem, dataItemKey), key: "defaultitemkey", onClick: _this.handleDefaultItemClick });
      };
      _this.search = function(event) {
        clearTimeout(_this._typingTimeout);
        if (!_this.props.filterable) {
          _this._typingTimeout = window.setTimeout(function() {
            return _this.searchState.word = "";
          }, _this.props.delay);
          _this.selectNext(event);
        }
      };
      _this.selectNext = function(event) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey;
        var mappedData = data.map(function(item, idx) {
          return { item, itemIndex: idx };
        });
        var word = _this.searchState.word;
        var last = _this.searchState.last;
        var isInLoop = sameCharsOnly(word, last);
        var dataLength = mappedData.length;
        var startIndex = Math.max(0, data.findIndex(function(i) {
          return areSame(i, _this.value, dataItemKey);
        }));
        var defaultItem;
        if (_this.props.defaultItem) {
          defaultItem = { item: _this.props.defaultItem, itemIndex: -1 };
          dataLength += 1;
          startIndex += 1;
        }
        startIndex += isInLoop ? 1 : 0;
        mappedData = shuffleData(mappedData, startIndex, defaultItem);
        var text, loopMatch, nextMatch, index = 0;
        var _c = _this.props, textField = _c.textField, ignoreCase = _c.ignoreCase;
        for (; index < dataLength; index++) {
          text = getItemValue(mappedData[index].item, textField);
          loopMatch = isInLoop && matchText(text, last, ignoreCase);
          nextMatch = matchText(text, word, ignoreCase);
          if (loopMatch || nextMatch) {
            index = mappedData[index].itemIndex;
            break;
          }
        }
        if (index !== dataLength) {
          var state = _this.base.initState();
          state.syntheticEvent = event;
          _this.handleItemSelect(index, state);
          _this.applyState(state);
          _this._valueDuringOnChange = void 0;
        }
      };
      _this.handleKeyDown = function(event) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, filterable = _a2.filterable, disabled = _a2.disabled, _c = _a2.leftRightKeysNavigation, leftRightKeysNavigation = _c === void 0 ? true : _c, _d = _a2.virtual, virtual = _d === void 0 ? { skip: 0, total: 0, pageSize: 0 } : _d;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var keyCode = event.keyCode;
        var homeOrEndKeys = keyCode === Keys.home || keyCode === Keys.end;
        var upOrDownKeys = keyCode === Keys.up || keyCode === Keys.down;
        var shouldOpen = !opened && (event.altKey && keyCode === Keys.down || keyCode === Keys.enter || keyCode === Keys.space);
        var shouldClose = opened && (event.altKey && keyCode === Keys.up || keyCode === Keys.esc);
        var leftOrRightKeys = leftRightKeysNavigation && (keyCode === Keys.left || keyCode === Keys.right);
        var shouldNavigate = upOrDownKeys || !filterable && (leftOrRightKeys || homeOrEndKeys);
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (disabled) {
          return;
        } else if (homeOrEndKeys && _this.base.vs.enabled) {
          if (keyCode === Keys.home) {
            if (virtual.skip !== 0) {
              _this.base.triggerOnPageChange(state, 0, virtual.pageSize);
              _this._navigated = true;
            } else {
              _this.triggerOnChange(data[0], state);
            }
          } else {
            if (virtual.skip < virtual.total - virtual.pageSize) {
              _this.base.triggerOnPageChange(state, virtual.total - virtual.pageSize, virtual.pageSize);
              _this._navigated = true;
            } else {
              _this.triggerOnChange(data[data.length - 1], state);
            }
          }
        } else if (opened && keyCode === Keys.enter) {
          var focusedIndex = _this.focusedIndex();
          if (focusedIndex !== void 0) {
            _this.handleItemSelect(focusedIndex, state);
          }
          _this.base.togglePopup(state);
          event.preventDefault();
        } else if (shouldOpen || shouldClose) {
          _this.base.togglePopup(state);
          event.preventDefault();
        } else if (shouldNavigate) {
          _this.onNavigate(state, keyCode);
          event.preventDefault();
        }
        _this.applyState(state);
      };
      _this.handleItemClick = function(index, event) {
        _this.base.handleItemClick(index, event);
        _this._valueDuringOnChange = void 0;
      };
      _this.handleFocus = function(event) {
        if (_this._skipFocusEvent) {
          return;
        }
        _this.base.handleFocus(event);
      };
      _this.handleBlur = function(event) {
        if (_this._skipFocusEvent || !_this.state.focused) {
          return;
        }
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        state.data.focused = false;
        state.events.push({ type: "onBlur" });
        if (opened) {
          _this.base.togglePopup(state);
        }
        _this.applyState(state);
      };
      _this.handleDefaultItemClick = function(event) {
        var state = _this.base.initState();
        state.syntheticEvent = event;
        _this.base.togglePopup(state);
        _this.triggerOnChange(_this.props.defaultItem, state);
        _this.applyState(state);
      };
      _this.handleWrapperClick = function(event) {
        if (event.isPropagationStopped()) {
          return;
        }
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (!_this.state.focused) {
          state.data.focused = true;
        }
        _this.base.togglePopup(state);
        _this.applyState(state);
      };
      _this.handleKeyPress = function(event) {
        if (_this.props.filterable || event.which === 0 || event.keyCode === Keys.enter) {
          return;
        }
        var character = String.fromCharCode(event.charCode || event.keyCode);
        if (_this.props.ignoreCase) {
          character = character.toLowerCase();
        }
        if (character === " ") {
          event.preventDefault();
        }
        _this.searchState = {
          word: _this.searchState.word + character,
          last: _this.searchState.last + character
        };
        _this.search(event);
      };
      _this.handleListFilterChange = function(event) {
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (_this.props.filter === void 0) {
          state.data.text = event.target.value;
        }
        _this.base.filterChanged(event.target.value, state);
        _this.applyState(state);
      };
      _this.onPopupOpened = function() {
        if (_this._filterInput) {
          _this.focusElement(_this._filterInput);
        }
      };
      _this.onPopupClosed = function() {
        if (_this.state.focused) {
          window.setTimeout(function() {
            if (_this.state.focused && _this.base.wrapper) {
              _this.focusElement(_this.base.wrapper);
            }
          });
        }
      };
      _this.setValidity = function() {
        if (_this._select && _this._select.setCustomValidity) {
          _this._select.setCustomValidity(_this.validity.valid ? "" : _this.props.validationMessage || VALIDATION_MESSAGE);
        }
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(DropDownListWithoutContext2.prototype, "element", {
      /**
       * @hidden
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DropDownListWithoutContext2.prototype, "value", {
      /**
       * The value of the DropDownList.
       */
      get: function() {
        var value;
        if (this._valueDuringOnChange !== void 0) {
          value = this._valueDuringOnChange;
        } else if (this.props.value !== void 0) {
          value = this.props.value;
        } else if (this.state.value !== void 0) {
          value = this.state.value;
        } else if (this.props.defaultValue !== void 0) {
          value = this.props.defaultValue;
        }
        if (!isPresent(value) && this.props.defaultItem !== void 0) {
          value = this.props.defaultItem;
        }
        return value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DropDownListWithoutContext2.prototype, "index", {
      /**
       * The index of the selected item.
       */
      get: function() {
        var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey;
        var value = this.value;
        return data.findIndex(function(i) {
          return areSame(i, value, dataItemKey);
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DropDownListWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the DropDownList.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DropDownListWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the DropDownList is set.
       */
      get: function() {
        var customError = this.props.validationMessage !== void 0;
        var isValid = !this.required || this.value !== null && this.value !== "" && this.value !== void 0;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DropDownListWithoutContext2.prototype, "validityStyles", {
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : DropDownListWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DropDownListWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : DropDownListWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    DropDownListWithoutContext2.prototype.componentDidUpdate = function(prevProps, prevState) {
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, virtual = _a2.virtual;
      var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var prevOpened = prevProps.opened !== void 0 ? prevProps.opened : prevState.opened;
      var opening = !prevOpened && opened;
      var closing = prevOpened && !opened;
      if (!this.base.getPopupSettings().animate) {
        if (opening) {
          this.onPopupOpened();
        } else if (closing) {
        }
      }
      if (virtual && virtual.total !== prevTotal) {
        this.base.vs.calcScrollElementHeight();
        this.base.vs.reset();
      } else {
        var selectedItem_1 = this.value;
        var prevSelectedItem = prevProps.value !== void 0 ? prevProps.value : prevState.value;
        var selectedItemIndex = data.findIndex(function(i) {
          return areSame(i, selectedItem_1, dataItemKey);
        });
        var selectedItemChanged = !areSame(prevSelectedItem, selectedItem_1, dataItemKey);
        if (opening && virtual) {
          this.base.scrollToVirtualItem(virtual, selectedItemIndex);
        } else if (opening && !virtual) {
          this.base.scrollToItem(selectedItemIndex);
        } else if (opened && prevOpened && selectedItem_1 && selectedItemChanged && !this._navigated) {
          this.base.scrollToItem(selectedItemIndex);
        } else if (opened && prevOpened && this._navigated) {
          if (this._navigated && virtual && virtual.skip === 0) {
            this.base.vs.reset();
          } else if (this._navigated && virtual && virtual.skip === virtual.total - virtual.pageSize) {
            this.base.vs.scrollToEnd();
          }
        }
      }
      this._navigated = false;
      this.setValidity();
    };
    DropDownListWithoutContext2.prototype.componentDidMount = function() {
      this.base.didMount();
      this.setValidity();
    };
    DropDownListWithoutContext2.prototype.render = function() {
      var _a2;
      var _this = this;
      var btnAriaLabel = provideLocalizationService(this).toLanguageString(dropDownListArrowBtnAriaLabel, messages[dropDownListArrowBtnAriaLabel]);
      var _b = this.props, style = _b.style, className = _b.className, label = _b.label, dir = _b.dir, virtual = _b.virtual, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var value = this.value;
      var text = getItemValue(value, this.props.textField);
      var isValid = !this.validityStyles || this.validity.valid;
      var base = this.base;
      var vs = base.vs;
      vs.enabled = virtual !== void 0;
      if (virtual !== void 0) {
        base.vs.skip = virtual.skip;
        base.vs.total = virtual.total;
        base.vs.pageSize = virtual.pageSize;
      }
      var _c = this.props, dataItemKey = _c.dataItemKey, _d = _c.data, data = _d === void 0 ? [] : _d, disabled = _c.disabled, tabIndex = _c.tabIndex, loading = _c.loading, iconClassName = _c.iconClassName, valueRender = _c.valueRender;
      var focused = this.state.focused;
      var selectedIndex = data.findIndex(function(i) {
        return areSame(i, value, dataItemKey);
      });
      var valueDefaultRendering = React7.createElement(
        "span",
        { id: this._inputId, className: "k-input-inner" },
        React7.createElement("span", { className: "k-input-value-text" }, text)
      );
      var valueElement = valueRender !== void 0 ? valueRender.call(void 0, valueDefaultRendering, value) : valueDefaultRendering;
      var dropdownlist = React7.createElement(
        "span",
        { ref: this.componentRef, className: classNames("k-dropdownlist k-picker", className, (_a2 = {}, _a2["k-picker-".concat(sizeMap2[size] || size)] = size, _a2["k-rounded-".concat(roundedMap2[rounded] || rounded)] = rounded, _a2["k-picker-".concat(fillMode)] = fillMode, _a2["k-focus"] = focused, _a2["k-disabled"] = disabled, _a2["k-invalid"] = !isValid, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2)), style: !label ? style : __assign3(__assign3({}, style), { width: void 0 }), dir, onMouseDown: opened ? function(event) {
          if (event.target.nodeName !== "INPUT") {
            _this.focusElement(_this.base.wrapper);
            event.preventDefault();
          }
        } : void 0, onFocus: this.handleFocus, onBlur: this.handleBlur, tabIndex: getTabIndex(tabIndex, disabled), accessKey: this.props.accessKey, onKeyDown: this.handleKeyDown, onKeyPress: this.handleKeyPress, onClick: disabled ? void 0 : this.handleWrapperClick, role: "combobox", "aria-required": this.required, "aria-disabled": disabled || void 0, "aria-haspopup": "listbox", "aria-expanded": opened || false, "aria-owns": this.base.listBoxId, "aria-activedescendant": opened ? "option-" + this.base.guid + "-" + (selectedIndex + (virtual ? virtual.skip : 0)) : void 0, "aria-label": this.props.ariaLabel || this.props.label, "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy || this._inputId, id: this.props.id, title: this.props.title },
        valueElement,
        loading && React7.createElement(IconWrap, { className: "k-input-loading-icon", name: "loading" }),
        React7.createElement(Button, { tabIndex: -1, type: "button", "aria-label": btnAriaLabel, "aria-hidden": true, size, fillMode, iconClass: iconClassName, className: "k-input-button", rounded: null, themeColor: "base", icon: !iconClassName ? "caret-alt-down" : void 0, svgIcon: !iconClassName ? caretAltDownIcon : this.props.svgIcon, onMouseDown: function(e) {
          return _this.state.focused && e.preventDefault();
        } }),
        this.dummySelect(value),
        this.renderListContainer()
      );
      return label ? React7.createElement(FloatingLabel, { label, editorValue: text, editorValid: isValid, editorDisabled: this.props.disabled, style: { width: style ? style.width : void 0 }, children: dropdownlist }) : dropdownlist;
    };
    DropDownListWithoutContext2.prototype.onNavigate = function(state, keyCode) {
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, defaultItem = _a2.defaultItem, dataItemKey = _a2.dataItemKey, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0, total: 0, pageSize: 0 } : _c;
      var vs = this.base.vs;
      var value = this.value;
      var index = data.findIndex(function(i) {
        return areSame(i, value, dataItemKey);
      });
      var newIndex = this.base.navigation.navigate({
        current: virtual.skip + index,
        max: (vs.enabled ? virtual.total : data.length) - 1,
        min: defaultItem !== void 0 ? -1 : 0,
        keyCode
      });
      if (newIndex !== void 0) {
        this.handleItemSelect(newIndex, state);
      }
      this.applyState(state);
    };
    DropDownListWithoutContext2.prototype.focusedIndex = function() {
      var filterText = isPresent(this.props.filter) ? this.props.filter : this.state.text;
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, dataItemKey = _a2.dataItemKey, textField = _a2.textField, focusedItemIndex = _a2.focusedItemIndex;
      var value = this.value;
      var selectedIndex = data.findIndex(function(i) {
        return areSame(i, value, dataItemKey);
      });
      var hasSelected = !(selectedIndex < 0 && !this.props.defaultItem);
      if (!hasSelected && filterText && virtual.skip === 0) {
        return focusedItemIndex ? focusedItemIndex(data, filterText, textField) : data.indexOf(getFocusedItem(data, filterText, textField));
      } else {
        return !hasSelected && virtual.skip === 0 ? 0 : void 0;
      }
    };
    DropDownListWithoutContext2.prototype.focusElement = function(element) {
      var _this = this;
      this._skipFocusEvent = true;
      element.focus();
      window.setTimeout(function() {
        return _this._skipFocusEvent = false;
      }, 30);
    };
    DropDownListWithoutContext2.prototype.triggerOnChange = function(item, state) {
      if (areSame(this.value, item, this.props.dataItemKey)) {
        return;
      }
      if (this.props.value === void 0) {
        state.data.value = item;
      }
      this._valueDuringOnChange = item;
      state.events.push({ type: "onChange" });
    };
    DropDownListWithoutContext2.prototype.applyState = function(state) {
      this.base.applyState(state);
      this._valueDuringOnChange = void 0;
    };
    DropDownListWithoutContext2.displayName = "DropDownList";
    DropDownListWithoutContext2.propTypes = __assign3({ delay: PropTypes2.number, ignoreCase: PropTypes2.bool, iconClassName: PropTypes2.string, svgIcon: svgIconPropType, defaultItem: PropTypes2.any, valueRender: PropTypes2.func, valueMap: PropTypes2.func, validationMessage: PropTypes2.string, required: PropTypes2.bool, id: PropTypes2.string, ariaLabelledBy: PropTypes2.string, ariaDescribedBy: PropTypes2.string, ariaLabel: PropTypes2.string, leftRightKeysNavigation: PropTypes2.bool, title: PropTypes2.string }, DropDownBase_default.propTypes);
    DropDownListWithoutContext2.defaultProps = __assign3(__assign3({ delay: 500, tabIndex: 0, ignoreCase: true }, DropDownBase_default.defaultProps), { required: false, size: "medium", rounded: "medium", fillMode: "solid" });
    return DropDownListWithoutContext2;
  }(React7.Component)
);
var DropDownListPropsContext = createPropsContext();
var DropDownList = withPropsContext(DropDownListPropsContext, DropDownListWithoutContext);
DropDownList.displayName = "KendoReactDropDownList";

// node_modules/@progress/kendo-react-dropdowns/dist/es/ComboBox/ComboBox.js
var React10 = __toESM(require_react());
var PropTypes3 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/SearchBar.js
var React8 = __toESM(require_react());
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SearchBar = (
  /** @class */
  function(_super) {
    __extends7(SearchBar2, _super);
    function SearchBar2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._input = null;
      return _this;
    }
    Object.defineProperty(SearchBar2.prototype, "input", {
      /**
       * @hidden
       */
      get: function() {
        return this._input;
      },
      enumerable: false,
      configurable: true
    });
    SearchBar2.prototype.componentDidUpdate = function(prevProps) {
      var prevValue = prevProps.value;
      var prevSuggestedText = prevProps.suggestedText;
      var _a2 = this.props, value = _a2.value, suggestedText = _a2.suggestedText, focused = _a2.focused;
      var input = this.input;
      var valueChanged = prevValue !== value || suggestedText !== prevSuggestedText;
      var deleting = valueChanged && prevValue.startsWith(value) && !(prevSuggestedText && suggestedText && prevSuggestedText.endsWith(suggestedText));
      if (focused && input && document.activeElement !== input) {
        input.focus();
      }
      if (suggestedText && valueChanged && !deleting && input) {
        input.setSelectionRange(value.length - suggestedText.length, value.length);
      }
    };
    SearchBar2.prototype.render = function() {
      var _this = this;
      var _a2 = this.props, _b = _a2.expanded, expanded = _b === void 0 ? false : _b, disabled = _a2.disabled, _c = _a2.role, role = _c === void 0 ? "listbox" : _c, render = _a2.render;
      var searchbar = React8.createElement("input", { autoComplete: "off", id: this.props.id, type: "text", key: "searchbar", size: this.props.size, placeholder: this.props.placeholder, className: "k-input-inner", tabIndex: this.props.tabIndex, accessKey: this.props.accessKey, role, name: this.props.name, value: this.props.value, onChange: this.props.onChange, ref: function(input) {
        return _this._input = input;
      }, onKeyDown: this.props.onKeyDown, onFocus: this.props.onFocus, onBlur: this.props.onBlur, onClick: this.props.onClick, "aria-disabled": disabled || void 0, disabled: disabled || void 0, readOnly: this.props.readOnly || void 0, "aria-haspopup": "listbox", "aria-expanded": expanded, "aria-owns": this.props.owns, "aria-activedescendant": expanded ? this.props.activedescendant : void 0, "aria-describedby": this.props.ariaDescribedBy, "aria-labelledby": this.props.ariaLabelledBy, "aria-required": this.props.ariaRequired });
      return render ? render.call(void 0, searchbar) : searchbar;
    };
    return SearchBar2;
  }(React8.Component)
);
var SearchBar_default = SearchBar;

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/ClearButton.js
var React9 = __toESM(require_react());
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ClearButton = (
  /** @class */
  function(_super) {
    __extends8(ClearButton2, _super);
    function ClearButton2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.onMouseDown = function(e) {
        return e.preventDefault();
      };
      return _this;
    }
    ClearButton2.prototype.render = function() {
      var title = provideLocalizationService(this).toLanguageString(clear, messages[clear]);
      return React9.createElement(
        "span",
        { className: "k-clear-value", role: "button", onClick: this.props.onClick, onMouseDown: this.onMouseDown, tabIndex: -1, title, key: "clearbutton" },
        React9.createElement(IconWrap, { name: "x", icon: xIcon })
      );
    };
    return ClearButton2;
  }(React9.Component)
);
var ClearButton_default = ClearButton;
registerForLocalization(ClearButton);

// node_modules/@progress/kendo-react-dropdowns/dist/es/ComboBox/ComboBox.js
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var VALIDATION_MESSAGE2 = "Please enter a valid value!";
var MOBILE_SMALL_DEVISE = 500;
var MOBILE_MEDIUM_DEVISE = 768;
var sizeMap3 = kendoThemeMaps.sizeMap;
var roundedMap3 = kendoThemeMaps.roundedMap;
var ComboBoxWithoutContext = (
  /** @class */
  function(_super) {
    __extends9(ComboBoxWithoutContext2, _super);
    function ComboBoxWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {};
      _this.base = new DropDownBase_default(_this);
      _this._element = null;
      _this._inputId = guid();
      _this._suggested = "";
      _this._skipBlur = false;
      _this._input = null;
      _this._adaptiveFilterInput = null;
      _this.itemHeight = 0;
      _this.focus = function() {
        if (_this._input) {
          _this._input.focus();
        }
      };
      _this.handleItemSelect = function(index, state) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, virtual = _a2.virtual, dataItemKey = _a2.dataItemKey;
        var skip = virtual ? virtual.skip : 0;
        var item = data[index - skip];
        var newSelected = !areSame(item, _this.value, dataItemKey);
        _this.triggerOnChange(item, state);
        if (_this.state.text !== void 0) {
          state.data.text = void 0;
        }
        if (newSelected) {
          _this.base.triggerPageChangeCornerItems(item, state);
        }
      };
      _this.onPopupOpened = function() {
        setTimeout(function() {
          if (_this.mobileMode && _this._adaptiveFilterInput) {
            _this._skipBlur = true;
            _this._adaptiveFilterInput.focus();
            _this._skipBlur = false;
          }
        }, 300);
      };
      _this.componentRef = function(element) {
        _this._element = element;
        _this.base.wrapper = element;
      };
      _this.toggleBtnClick = function(event) {
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        _this.base.togglePopup(state);
        if (!opened && _this.mobileMode) {
          var mobileText = _this.props.adaptiveFilter !== void 0 ? _this.props.adaptiveFilter : _this.state.text || null;
          _this.base.filterChanged(mobileText, state);
        }
        _this.applyState(state);
      };
      _this.renderMobileListFilter = function() {
        var mobileText = _this.props.adaptiveFilter !== void 0 ? _this.props.adaptiveFilter : _this.state.text;
        var selectedItemText = getItemValue(_this.value, _this.props.textField);
        var mobileInputText = isPresent(mobileText) ? mobileText : selectedItemText;
        return React10.createElement(ListFilter_default, { value: mobileInputText, ref: function(filter) {
          return _this._adaptiveFilterInput = filter && filter.input;
        }, onChange: _this.handleMobileFilterChange, onKeyDown: _this.onInputKeyDown, size: _this.props.size, rounded: _this.props.rounded, fillMode: _this.props.fillMode });
      };
      _this.handleMobileFilterChange = function(event) {
        var state = _this.base.initState();
        state.syntheticEvent = event;
        state.data.text = event.target.value;
        _this.base.filterChanged(event.target.value, state);
        _this.applyState(state);
      };
      _this.onScroll = function(event) {
        var _a2 = _this.base, vs = _a2.vs, list = _a2.list;
        vs.scrollHandler(event);
        var _b = _this.props, _c = _b.data, data = _c === void 0 ? [] : _c, groupField = _b.groupField;
        if (!groupField || !data.length) {
          return;
        }
        var itemHeight = _this.itemHeight = _this.itemHeight || (vs.enabled ? vs.itemHeight : list ? list.children[0].offsetHeight : 0);
        var target = event.target;
        var scrollTop = target.scrollTop - vs.skip * itemHeight;
        var group = data[0][groupField];
        for (var i = 1; i < data.length; i++) {
          if (itemHeight * i > scrollTop) {
            break;
          }
          if (data[i] && data[i][groupField]) {
            group = data[i][groupField];
          }
        }
        if (group !== _this.state.group) {
          _this.setState({
            group
          });
          if (_this.props.onGroupScroll) {
            _this.props.onGroupScroll.call(void 0, { group });
          }
        }
      };
      _this.handleItemClick = function(index, event) {
        _this.base.handleItemClick(index, event);
        _this._valueDuringOnChange = void 0;
      };
      _this.handleBlur = function(event) {
        if (_this.state.focused && !_this._skipBlur) {
          var state = _this.base.initState();
          state.data.focused = false;
          state.events.push({ type: "onBlur" });
          state.syntheticEvent = event;
          _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
        }
      };
      _this.onInputClick = function(event) {
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var mobileText = _this.props.adaptiveFilter !== void 0 ? _this.props.adaptiveFilter : _this.state.text || null;
        if (!opened && _this.mobileMode) {
          var state = _this.base.initState();
          state.syntheticEvent = event;
          _this.base.togglePopup(state);
          _this.base.filterChanged(mobileText, state);
          _this.applyState(state);
        }
      };
      _this.onInputKeyDown = function(event) {
        var keyCode = event.keyCode;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (!event.altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
          event.preventDefault();
          _this.onNavigate(state, keyCode);
          _this.applyState(state);
          return;
        }
        var togglePopup = function() {
          event.preventDefault();
          _this.base.togglePopup(state);
          _this.applyState(state);
        };
        if (opened) {
          if (event.altKey && keyCode === Keys.up) {
            togglePopup();
          } else if (keyCode === Keys.enter) {
            event.preventDefault();
            _this.applyValueOnEnter(event.currentTarget.value, state);
          } else if (keyCode === Keys.esc) {
            _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
          }
        } else if (event.altKey && keyCode === Keys.down) {
          togglePopup();
        }
      };
      _this.inputOnChange = function(event) {
        var state = _this.base.initState();
        state.syntheticEvent = event;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var input = event.currentTarget;
        var value = input.value;
        if (_this.props.suggest) {
          var selectionAtEnd = input.selectionEnd === value.length;
          var prevText = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
          if (!isPresent(prevText)) {
            prevText = getItemValue(_this.value, _this.props.textField) || "";
          }
          var deletedSuggestion = prevText && prevText === value;
          var deleting = prevText && prevText.length > value.length;
          if (deletedSuggestion || deleting || !selectionAtEnd) {
            _this._suggested = "";
          } else {
            _this.suggestValue(value);
          }
        }
        if (_this.props.filter === void 0) {
          state.data.text = value;
        }
        if (_this.state.focusedItem !== void 0) {
          state.data.focusedItem = void 0;
        }
        if (!opened) {
          _this.base.togglePopup(state);
        }
        _this.base.filterChanged(value, state);
        _this.applyState(state);
      };
      _this.clearButtonClick = function(event) {
        var state = _this.base.initState();
        state.syntheticEvent = event;
        event.stopPropagation();
        _this._suggested = "";
        _this.base.filterChanged("", state);
        if (_this.props.filter === void 0 && _this.state.text !== void 0) {
          state.data.text = void 0;
        }
        _this.triggerOnChange(null, state);
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var isAdaptive = _this.mobileMode;
        if (opened && !isAdaptive) {
          _this.base.togglePopup(state);
        }
        _this.applyState(state);
      };
      _this.setValidity = function() {
        if (_this._input && _this._input.setCustomValidity) {
          _this._input.setCustomValidity(_this.validity.valid ? "" : _this.props.validationMessage || VALIDATION_MESSAGE2);
        }
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "document", {
      get: function() {
        if (!canUseDOM) {
          return;
        }
        return this.element && this.element.ownerDocument || document;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "element", {
      /** @hidden */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "mobileMode", {
      /**
       * The mobile mode of the ComboBox.
       */
      get: function() {
        var isAdaptive = this.state.windowWidth && this.state.windowWidth <= MOBILE_MEDIUM_DEVISE && this.props.adaptive;
        return !!isAdaptive;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "value", {
      /**
       * The value of the ComboBox.
       */
      get: function() {
        if (this._valueDuringOnChange !== void 0) {
          return this._valueDuringOnChange;
        } else if (this.props.value !== void 0) {
          return this.props.value;
        } else if (this.state.value !== void 0) {
          return this.state.value;
        } else if (this.props.defaultValue !== void 0) {
          return this.props.defaultValue;
        }
        return void 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "index", {
      /**
       * The index of the selected item.
       */
      get: function() {
        var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey;
        var value = this.value;
        return data.findIndex(function(i) {
          return areSame(i, value, dataItemKey);
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the ComboBox.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the component is set.
       */
      get: function() {
        var customError = this.props.validationMessage !== void 0;
        var isValid = !this.required || this.value !== null && this.value !== "" && this.value !== void 0;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "validityStyles", {
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : ComboBoxWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ComboBoxWithoutContext2.prototype, "required", {
      /** @hidden */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : ComboBoxWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    ComboBoxWithoutContext2.prototype.componentDidUpdate = function(prevProps, prevState) {
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, virtual = _a2.virtual;
      var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var prevOpened = prevProps.opened !== void 0 ? prevProps.opened : prevState.opened;
      var opening = !prevOpened && opened;
      var selectedItem = this.value;
      this._valueOnDidUpdate = selectedItem;
      if (virtual && virtual.total !== prevTotal) {
        this.base.vs.calcScrollElementHeight();
        this.base.vs.reset();
      } else {
        var prevSelectedItem = prevProps.value !== void 0 ? prevProps.value : prevState.value;
        var selectedItemIndex = data.findIndex(function(i) {
          return areSame(i, selectedItem, dataItemKey);
        });
        var selectedItemChanged = !areSame(prevSelectedItem, selectedItem, dataItemKey);
        if (opening && virtual) {
          this.base.scrollToVirtualItem(virtual, selectedItemIndex);
        } else if (opening && !virtual) {
          this.onPopupOpened();
          this.base.scrollToItem(selectedItemIndex);
        } else if (opened && prevOpened && selectedItem && selectedItemChanged) {
          this.base.scrollToItem(selectedItemIndex);
        }
      }
      if (opening && this._input) {
        this._input.focus();
      }
      this.setValidity();
    };
    ComboBoxWithoutContext2.prototype.componentDidMount = function() {
      var _a2;
      this.observerResize = canUseDOM && window.ResizeObserver && new window.ResizeObserver(this.calculateMedia.bind(this));
      this.base.didMount();
      this.setValidity();
      if (((_a2 = this.document) === null || _a2 === void 0 ? void 0 : _a2.body) && this.observerResize) {
        this.observerResize.observe(this.document.body);
      }
    };
    ComboBoxWithoutContext2.prototype.componentWillUnmount = function() {
      var _a2;
      if (((_a2 = this.document) === null || _a2 === void 0 ? void 0 : _a2.body) && this.observerResize) {
        this.observerResize.disconnect();
      }
    };
    ComboBoxWithoutContext2.prototype.render = function() {
      var _a2;
      var btnAriaLabelExpand = provideLocalizationService(this).toLanguageString(comboArrowBtnAriaLabelExpand, messages[comboArrowBtnAriaLabelExpand]);
      var btnAriaLabelCollapse = provideLocalizationService(this).toLanguageString(comboArrowBtnAriaLabelCollapse, messages[comboArrowBtnAriaLabelCollapse]);
      var _b = this.props, dir = _b.dir, disabled = _b.disabled, _c = _b.clearButton, clearButton = _c === void 0 ? ComboBoxWithoutContext2.defaultProps.clearButton : _c, label = _b.label, textField = _b.textField, adaptive = _b.adaptive, className = _b.className, style = _b.style, loading = _b.loading, iconClassName = _b.iconClassName, virtual = _b.virtual, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode, _d = _b.opened, opened = _d === void 0 ? this.state.opened : _d, placeholder = _b.placeholder;
      var _e = this.state.windowWidth, windowWidth = _e === void 0 ? 0 : _e;
      var isValid = !this.validityStyles || this.validity.valid;
      var text = this.props.filter !== void 0 ? this.props.filter : this.state.text;
      var selectedItemText = getItemValue(this.value, textField);
      var inputText = isPresent(text) ? text : selectedItemText;
      var renderClearButton = clearButton && (!!inputText || isPresent(this.value));
      var base = this.base;
      var vs = base.vs;
      var id = this.props.id || this._inputId;
      var renderAdaptive = windowWidth <= MOBILE_MEDIUM_DEVISE && adaptive;
      vs.enabled = virtual !== void 0;
      if (virtual !== void 0) {
        vs.skip = virtual.skip;
        vs.total = virtual.total;
        vs.pageSize = virtual.pageSize;
      }
      var combobox = React10.createElement(
        React10.Fragment,
        null,
        React10.createElement(
          "span",
          { className: classNames("k-combobox k-input", (_a2 = {}, _a2["k-input-".concat(sizeMap3[size] || size)] = size, _a2["k-rounded-".concat(roundedMap3[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-invalid"] = !isValid, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2["k-disabled"] = disabled, _a2), className), ref: this.componentRef, style: !label ? style : __assign4(__assign4({}, style), { width: void 0 }), dir },
          this.renderSearchBar(inputText || "", id, placeholder),
          renderClearButton && !loading && React10.createElement(ClearButton_default, { onClick: this.clearButtonClick, key: "clearbutton" }),
          loading && React10.createElement("span", { className: "k-icon k-i-loading k-input-loading-icon", key: "loading" }),
          React10.createElement(Button, { tabIndex: -1, type: "button", "aria-label": opened ? btnAriaLabelCollapse : btnAriaLabelExpand, icon: !iconClassName ? "caret-alt-down" : void 0, svgIcon: !iconClassName ? caretAltDownIcon : this.props.svgIcon, iconClass: iconClassName, size, fillMode, rounded: null, themeColor: "base", className: "k-input-button", onClick: this.toggleBtnClick, onMouseDown: function(e) {
            return e.preventDefault();
          } }),
          !renderAdaptive && this.renderListContainer()
        ),
        renderAdaptive && this.renderAdaptiveListContainer()
      );
      return label ? React10.createElement(FloatingLabel, { label, editorId: id, editorValue: inputText, editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : void 0 }, children: combobox }) : combobox;
    };
    ComboBoxWithoutContext2.prototype.onNavigate = function(state, keyCode) {
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
      var text = this.props.filter ? this.props.filter : this.state.text;
      var focusedIndex = this.getFocusedIndex();
      var vs = this.base.vs;
      var value = this.value;
      this._suggested = "";
      if (focusedIndex !== -1 && !isPresent(value)) {
        this.handleItemSelect(focusedIndex, state);
      } else if (text === "") {
        this.handleItemSelect(0, state);
      } else {
        var currentIndex = virtual.skip + focusedIndex;
        var newIndex = this.base.navigation.navigate({
          keyCode,
          current: currentIndex,
          max: (vs.enabled ? vs.total : data.length) - 1,
          min: 0
        });
        if (newIndex !== void 0) {
          this.handleItemSelect(newIndex, state);
        }
      }
    };
    ;
    ComboBoxWithoutContext2.prototype.applyValueOnEnter = function(value, state) {
      var _a2;
      var _b = this.props, _c = _b.data, data = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var currentValueText = getItemValue(this.value, textField);
      var valueIndex = currentValueText === value ? this.index : getItemIndexByText(data, value, textField);
      var itemSelected = valueIndex !== -1;
      var newSelected = void 0;
      this._suggested = "";
      if (itemSelected) {
        newSelected = data[valueIndex];
      } else {
        if (allowCustom) {
          newSelected = textField !== void 0 ? (_a2 = {}, _a2[textField] = value, _a2) : value;
        } else {
          return this.selectFocusedItem(value, state);
        }
      }
      this.triggerOnChange(newSelected, state);
      if (opened) {
        this.base.togglePopup(state);
      }
      if (this.props.filter === void 0 && this.state.text !== void 0) {
        state.data.text = void 0;
      }
      this.applyState(state);
    };
    ComboBoxWithoutContext2.prototype.applyValueOnRejectSuggestions = function(text, state) {
      var _a2;
      var _b = this.props, _c = _b.data, data = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var valueItemText = getItemValue(this.value, textField);
      var isMobileDevice = this.state.windowWidth && this.state.windowWidth <= MOBILE_MEDIUM_DEVISE;
      this._suggested = "";
      if (text === valueItemText || text === "" && !isPresent(valueItemText)) {
        if (opened && !isMobileDevice) {
          this.base.togglePopup(state);
        }
        return this.applyState(state);
      }
      var valueIndex = getItemIndexByText(data, text, textField, true);
      var itemSelected = valueIndex !== -1;
      var newSelected = null;
      if (itemSelected) {
        newSelected = data[valueIndex];
      } else if (allowCustom) {
        newSelected = text ? textField ? (_a2 = {}, _a2[textField] = text, _a2) : text : null;
      }
      this.triggerOnChange(newSelected, state);
      if (this.state.text !== void 0) {
        state.data.text = void 0;
        this.base.filterChanged("", state);
      }
      if (opened && !isMobileDevice) {
        this.base.togglePopup(state);
      }
      this.applyState(state);
    };
    ComboBoxWithoutContext2.prototype.selectFocusedItem = function(text, state) {
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, _d = _a2.focusedItemIndex, focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;
      var skip = virtual.skip;
      var focusedIndex = text === "" && skip === 0 ? 0 : focusedItemIndex(data, text, textField);
      if (focusedIndex !== -1) {
        this.handleItemSelect(focusedIndex + skip, state);
      } else {
        this.triggerOnChange(null, state);
        if (this.state.text !== void 0) {
          state.data.text = void 0;
        }
      }
      if (opened) {
        this.base.togglePopup(state);
      }
      return this.applyState(state);
    };
    ComboBoxWithoutContext2.prototype.renderAdaptiveListContainer = function() {
      var _a2;
      var _this = this;
      var _b = this.state.windowWidth, windowWidth = _b === void 0 ? 0 : _b;
      var _c = this.props, header = _c.header, footer = _c.footer, size = _c.size, _d = _c.data, data = _d === void 0 ? [] : _d, groupField = _c.groupField, list = _c.list, virtual = _c.virtual, adaptiveTitle = _c.adaptiveTitle;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var group = this.state.group;
      if (group === void 0 && groupField !== void 0) {
        group = getItemValue(data[0], groupField);
      }
      var actionSheetProps = {
        navigatable: false,
        navigatableElements: [],
        expand: opened,
        animation: true,
        onClose: function(event) {
          return _this.toggleBtnClick(event);
        },
        animationStyles: windowWidth <= MOBILE_SMALL_DEVISE ? { top: 0, width: "100%", height: "100%" } : void 0,
        className: windowWidth <= MOBILE_SMALL_DEVISE ? "k-adaptive-actionsheet k-actionsheet-fullscreen" : "k-adaptive-actionsheet k-actionsheet-bottom"
      };
      return React10.createElement(
        React10.Fragment,
        null,
        React10.createElement(
          ActionSheet,
          __assign4({}, actionSheetProps),
          React10.createElement(
            ActionSheetHeader,
            { className: "k-text-center" },
            React10.createElement(
              "div",
              { className: "k-actionsheet-titlebar-group k-hbox" },
              React10.createElement(
                "div",
                { className: "k-actionsheet-title" },
                React10.createElement("div", null, adaptiveTitle)
              ),
              React10.createElement(
                "div",
                { className: "k-actionsheet-actions" },
                React10.createElement(
                  Button,
                  { tabIndex: 0, "aria-label": "Cancel", "aria-disabled": "false", type: "button", fillMode: "flat", onClick: this.toggleBtnClick },
                  React10.createElement("span", { className: "k-button-icon k-icon k-i-x" })
                )
              )
            ),
            React10.createElement("div", { className: "k-actionsheet-titlebar-group k-actionsheet-filter" }, this.renderMobileListFilter())
          ),
          React10.createElement(
            ActionSheetContent,
            { className: "!k-overflow-hidden" },
            React10.createElement(
              "div",
              { className: "k-list-container" },
              React10.createElement(
                "div",
                { className: classNames((_a2 = {}, _a2["k-list"] = !list, _a2["k-list-lg"] = true, _a2["k-virtual-list"] = virtual, _a2["k-data-table"] = list, _a2["k-table-".concat(sizeMap3[size] || size)] = list && size, _a2)) },
                header && React10.createElement("div", { className: "k-table-header" }, header),
                !list && group && React10.createElement("div", { className: "k-list-group-sticky-header" }, group),
                this.renderList(),
                footer && React10.createElement("div", { className: "k-list-footer" }, footer)
              )
            )
          )
        )
      );
    };
    ComboBoxWithoutContext2.prototype.renderListContainer = function() {
      var _a2;
      var base = this.base;
      var _b = this.props, dir = _b.dir, header = _b.header, footer = _b.footer, _c = _b.data, data = _c === void 0 ? [] : _c, groupField = _b.groupField, size = _b.size, list = _b.list, virtual = _b.virtual;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var popupSettings = base.getPopupSettings();
      var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
      var group = this.state.group;
      if (group === void 0 && groupField !== void 0) {
        group = getItemValue(data[0], groupField);
      }
      return React10.createElement(
        ListContainer_default,
        { width: popupWidth, popupSettings: {
          animate: popupSettings.animate,
          anchor: this.element,
          show: opened,
          popupClass: classNames(popupSettings.popupClass, "k-list-container", "k-combobox-popup"),
          className: popupSettings.className,
          appendTo: popupSettings.appendTo
        }, dir: dir !== void 0 ? dir : this.base.dirCalculated, itemsCount: [data.length] },
        React10.createElement(
          "div",
          { className: classNames((_a2 = {}, _a2["k-list"] = !list, _a2["k-list-".concat(sizeMap3[size] || size)] = !list && size, _a2["k-virtual-list"] = virtual, _a2["k-data-table"] = list, _a2["k-table-".concat(sizeMap3[size] || size)] = list && size, _a2)) },
          header && React10.createElement("div", { className: "k-table-header" }, header),
          !list && group && React10.createElement("div", { className: "k-list-group-sticky-header" }, group),
          this.renderList(),
          footer && React10.createElement("div", { className: "k-list-footer" }, footer)
        )
      );
    };
    ComboBoxWithoutContext2.prototype.renderList = function() {
      var _a2;
      var _this = this;
      var base = this.base;
      var _b = this.props, textField = _b.textField, dataItemKey = _b.dataItemKey, listNoDataRender = _b.listNoDataRender, itemRender = _b.itemRender, _c = _b.data, data = _c === void 0 ? [] : _c, _d = _b.virtual, virtual = _d === void 0 ? { skip: 0 } : _d;
      var popupSettings = base.getPopupSettings();
      var vs = base.vs;
      var skip = virtual.skip;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var translate = "translateY(".concat(vs.translate, "px)");
      var focusedIndex = opened ? this.getFocusedIndex() : void 0;
      var text = this.props.filter !== void 0 ? this.props.filter : this.state.text;
      var selectedItemText = getItemValue(this.value, textField);
      var value = isPresent(text) && text !== selectedItemText ? null : this.value;
      var ListComponent = this.props.list || List_default;
      return React10.createElement(ListComponent, { id: base.listBoxId, virtual: Boolean(virtual), show: opened, data, focusedIndex, value, textField, valueField: dataItemKey, groupField: this.props.groupField, optionsGuid: base.guid, listRef: function(list) {
        vs.list = _this.base.list = list;
        _this.itemHeight = 0;
      }, wrapperStyle: this.state.windowWidth && this.state.windowWidth > MOBILE_MEDIUM_DEVISE ? { maxHeight: popupSettings.height } : {}, wrapperCssClass: classNames("k-list-content", (_a2 = {}, _a2["k-list-scroller"] = !virtual, _a2)), listStyle: vs.enabled ? { transform: translate } : void 0, key: "listkey", skip, onClick: this.handleItemClick, itemRender, noDataRender: listNoDataRender, onMouseDown: function(e) {
        return e.preventDefault();
      }, onScroll: this.onScroll, wrapperRef: vs.scrollerRef, scroller: this.base.renderScrollElement() });
    };
    ComboBoxWithoutContext2.prototype.renderSearchBar = function(text, id, placeholder) {
      var _this = this;
      var _a2 = this.props, tabIndex = _a2.tabIndex, disabled = _a2.disabled, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var value = this.value;
      var selectedIndex = Math.max(0, data.findIndex(function(i) {
        return areSame(i, value, dataItemKey);
      }));
      if (this._suggested && !areSame(this._valueOnDidUpdate, value, dataItemKey)) {
        this._suggested = "";
      }
      return React10.createElement(SearchBar_default, { id, readOnly: opened && this.mobileMode, placeholder, tabIndex, accessKey: this.props.accessKey, value: text + this._suggested, suggestedText: this._suggested, ref: function(el) {
        return _this._input = el && el.input;
      }, onClick: this.onInputClick, onKeyDown: this.onInputKeyDown, onChange: this.inputOnChange, onFocus: this.base.handleFocus, onBlur: this.handleBlur, disabled, expanded: opened, owns: this.base.listBoxId, activedescendant: "option-".concat(this.base.guid, "-").concat(selectedIndex + virtual.skip), role: "combobox", ariaLabelledBy: this.props.ariaLabelledBy, ariaDescribedBy: this.props.ariaDescribedBy, ariaRequired: this.required, render: this.props.valueRender });
    };
    ComboBoxWithoutContext2.prototype.triggerOnChange = function(item, state) {
      var value = this.value;
      if (!isPresent(value) && !isPresent(item) || areSame(value, item, this.props.dataItemKey)) {
        return;
      }
      if (this.props.value === void 0) {
        state.data.value = item;
      }
      this._valueDuringOnChange = item;
      state.events.push({ type: "onChange" });
    };
    ComboBoxWithoutContext2.prototype.getFocusedIndex = function() {
      var value = this.value;
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField, dataItemKey = _a2.dataItemKey, _c = _a2.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, _d = _a2.focusedItemIndex, focusedItemIndex = _d === void 0 ? itemIndexStartsWith : _d;
      var text = this.props.filter ? this.props.filter : this.state.text;
      if (isPresent(value) && text === void 0) {
        return data.findIndex(function(i) {
          return areSame(i, value, dataItemKey);
        });
      } else if (text) {
        return focusedItemIndex(data, text, textField);
      } else {
        return virtual.skip === 0 ? 0 : -1;
      }
    };
    ComboBoxWithoutContext2.prototype.suggestValue = function(value) {
      var _a2 = this.props, data = _a2.data, textField = _a2.textField;
      this._suggested = suggestValue(value, data, textField);
    };
    ComboBoxWithoutContext2.prototype.applyState = function(state) {
      this.base.applyState(state);
      this._valueDuringOnChange = void 0;
    };
    ComboBoxWithoutContext2.prototype.calculateMedia = function(entries) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i];
        this.setState({ windowWidth: entry.target.clientWidth });
      }
      ;
    };
    ;
    ComboBoxWithoutContext2.displayName = "ComboBox";
    ComboBoxWithoutContext2.propTypes = __assign4(__assign4({}, DropDownBase_default.propTypes), { size: PropTypes3.oneOf([null, "small", "medium", "large"]), rounded: PropTypes3.oneOf([null, "small", "medium", "large", "full"]), fillMode: PropTypes3.oneOf([null, "solid", "flat", "outline"]), dataItemKey: PropTypes3.string, groupField: PropTypes3.string, suggest: PropTypes3.bool, placeholder: PropTypes3.string, allowCustom: PropTypes3.bool, clearButton: PropTypes3.bool, iconClassName: PropTypes3.string, svgIcon: svgIconPropType, validationMessage: PropTypes3.string, required: PropTypes3.bool, id: PropTypes3.string, ariaLabelledBy: PropTypes3.string, ariaDescribedBy: PropTypes3.string, list: PropTypes3.any, valueRender: PropTypes3.func });
    ComboBoxWithoutContext2.defaultProps = __assign4(__assign4({}, DropDownBase_default.defaultProps), { size: "medium", rounded: "medium", fillMode: "solid", allowCustom: false, clearButton: true, required: false });
    return ComboBoxWithoutContext2;
  }(React10.Component)
);
var ComboBoxPropsContext = createPropsContext();
var ComboBox = withPropsContext(ComboBoxPropsContext, ComboBoxWithoutContext);
ComboBox.displayName = "KendoReactComboBox";

// node_modules/@progress/kendo-react-dropdowns/dist/es/AutoComplete/AutoComplete.js
var React11 = __toESM(require_react());
var PropTypes4 = __toESM(require_prop_types());
var __extends10 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var VALIDATION_MESSAGE3 = "Please enter a valid value!";
var sizeMap4 = kendoThemeMaps.sizeMap;
var roundedMap4 = kendoThemeMaps.roundedMap;
var AutoCompleteWithoutContext = (
  /** @class */
  function(_super) {
    __extends10(AutoCompleteWithoutContext2, _super);
    function AutoCompleteWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {};
      _this.base = new DropDownBase_default(_this);
      _this._element = null;
      _this._inputId = guid();
      _this._suggested = "";
      _this._input = null;
      _this.focus = function() {
        if (_this._input) {
          _this._input.focus();
        }
      };
      _this.handleItemSelect = function(index, state) {
        var _a2 = _this.props.data, data = _a2 === void 0 ? [] : _a2;
        var newText = getItemValue(data[index], _this.props.textField);
        _this.triggerOnChange(newText, state);
      };
      _this.itemFocus = function(index, state) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField;
        var focusedItem = data[index];
        if (!areSame(_this.state.focusedItem, focusedItem, textField)) {
          state.data.focusedItem = focusedItem;
        }
      };
      _this.togglePopup = function(state) {
        _this.base.togglePopup(state);
      };
      _this.setValidity = function() {
        if (_this._input && _this._input.setCustomValidity) {
          _this._input.setCustomValidity(_this.validity.valid ? "" : _this.props.validationMessage || VALIDATION_MESSAGE3);
        }
      };
      _this.handleItemClick = function(index, event) {
        _this.base.handleItemClick(index, event);
        _this._valueDuringOnChange = void 0;
      };
      _this.onChangeHandler = function(event) {
        var base = _this.base;
        var state = base.initState();
        var input = event.currentTarget;
        var value = input.value;
        var selectionAtEnd = input.selectionEnd === value.length;
        state.syntheticEvent = event;
        var prevSuggestion = _this._suggested;
        var prevValue = _this.value;
        var prevUserInput = prevValue && prevValue.substring(0, prevValue.length - prevSuggestion.length);
        var deletedSuggestion = prevUserInput && prevUserInput === value;
        var deleting = prevUserInput && prevUserInput.length > value.length;
        var suggest = _this.props.suggest;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        if (suggest !== void 0 && suggest !== false) {
          if (deletedSuggestion || deleting || !selectionAtEnd) {
            _this._suggested = "";
          } else {
            _this.suggestValue(value);
          }
          var newValue = value + _this._suggested;
          var suggestion = { userInput: value, value: _this._suggested };
          _this.triggerOnChange(newValue, state, { suggestion });
        } else {
          _this._suggested = "";
          _this.triggerOnChange(value, state);
        }
        if (!opened && value || opened && !value) {
          _this.togglePopup(state);
        }
        state.data.focusedItem = void 0;
        _this.applyState(state);
      };
      _this.clearButtonClick = function(event) {
        var base = _this.base;
        var state = base.initState();
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        state.syntheticEvent = event;
        var newValue = "";
        _this._suggested = "";
        _this.triggerOnChange(newValue, state);
        if (_this.state.focusedItem !== void 0) {
          state.data.focusedItem = void 0;
        }
        if (opened) {
          _this.togglePopup(state);
        }
        _this.applyState(state);
      };
      _this.onInputKeyDown = function(event) {
        var keyCode = event.keyCode;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        var preventDefault4 = function() {
          if (opened) {
            event.preventDefault();
          }
        };
        if (keyCode === Keys.enter || keyCode === Keys.esc) {
          preventDefault4();
          _this.applyInputValue(event.currentTarget.value, state, event.keyCode);
        } else if (keyCode === Keys.up || keyCode === Keys.down) {
          preventDefault4();
          _this.onNavigate(state, keyCode);
        }
      };
      _this.handleBlur = function(event) {
        if (_this.state.focused) {
          var state = _this.base.initState();
          state.data.focused = false;
          state.events.push({ type: "onBlur" });
          state.syntheticEvent = event;
          _this.applyInputValue(event.currentTarget.value, state);
        }
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(AutoCompleteWithoutContext2.prototype, "element", {
      /**
       * @hidden
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext2.prototype, "value", {
      /**
       * The value of the AutoComplete.
       */
      get: function() {
        if (this._valueDuringOnChange !== void 0) {
          return this._valueDuringOnChange;
        } else if (this.props.value !== void 0) {
          return this.props.value;
        } else if (this.state.value !== void 0) {
          return this.state.value;
        } else if (this.props.defaultValue !== void 0) {
          return this.props.defaultValue;
        }
        return "";
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the AutoComplete.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the AutoComplete is set.
       */
      get: function() {
        var customError = this.props.validationMessage !== void 0;
        var isValid = !this.required || this.value !== "";
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext2.prototype, "validityStyles", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : AutoCompleteWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AutoCompleteWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : AutoCompleteWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    AutoCompleteWithoutContext2.prototype.componentDidUpdate = function(prevProps, prevState) {
      var _a2 = this.props.data, data = _a2 === void 0 ? [] : _a2;
      var _b = prevProps.data, prevData = _b === void 0 ? [] : _b;
      var focusedIndex = this.focusedIndex();
      var focusedItem = data[focusedIndex];
      var dataChanged = prevData !== data;
      var focusedItemChanged = focusedItem !== void 0 && prevState.focusedItem !== focusedItem;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var prevOpened = prevProps.opened !== void 0 ? prevProps.opened : prevState.opened;
      var opening = !prevOpened && opened;
      if (opened && (focusedItemChanged || dataChanged) || opening) {
        this.base.scrollToItem(focusedIndex);
      }
      this.setValidity();
    };
    AutoCompleteWithoutContext2.prototype.componentDidMount = function() {
      this.base.didMount();
      this.setValidity();
    };
    AutoCompleteWithoutContext2.prototype.render = function() {
      var _a2;
      var _this = this;
      var _b = this.props, dir = _b.dir, disabled = _b.disabled, label = _b.label, className = _b.className, style = _b.style, loading = _b.loading, suggest = _b.suggest, size = _b.size, rounded = _b.rounded, fillMode = _b.fillMode;
      var isValid = !this.validityStyles || this.validity.valid;
      var base = this.base;
      var value = this.value;
      var renderClearButton = this.props.clearButton !== false && !loading && !!value;
      var id = this.props.id || this._inputId;
      if (typeof suggest === "string") {
        this._suggested = suggest;
      }
      var autoComplete = React11.createElement(
        "span",
        { className: classNames("k-autocomplete k-input", className, (_a2 = {}, _a2["k-input-".concat(sizeMap4[size] || size)] = size, _a2["k-rounded-".concat(roundedMap4[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-invalid"] = !isValid, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2["k-disabled"] = disabled, _a2)), ref: function(element) {
          _this._element = element;
          base.wrapper = element;
        }, style: !label ? style : __assign5(__assign5({}, style), { width: void 0 }), dir },
        this.renderSearchBar(value || "", id),
        loading && React11.createElement(IconWrap, { className: "k-input-loading-icon", name: "loading" }),
        renderClearButton && !loading && React11.createElement(ClearButton_default, { onClick: this.clearButtonClick, key: "clearbutton" }),
        this.renderListContainer()
      );
      return label ? React11.createElement(FloatingLabel, { label, editorId: id, editorValue: value, editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : void 0 }, children: autoComplete }) : autoComplete;
    };
    AutoCompleteWithoutContext2.prototype.onNavigate = function(state, keyCode) {
      var _this = this;
      var typedText = this.value;
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField, focusedItemIndex = _a2.focusedItemIndex;
      var focusedIndex = this.state.focusedItem !== void 0 ? data.findIndex(function(i) {
        return areSame(i, _this.state.focusedItem, textField);
      }) : focusedItemIndex ? focusedItemIndex(data, typedText, textField) : data.indexOf(getFocusedItem(data, typedText, textField));
      var newFocused = this.base.navigation.navigate({
        keyCode,
        current: focusedIndex,
        max: data.length - 1,
        min: 0
      });
      if (newFocused !== void 0) {
        this.itemFocus(newFocused, state);
      }
      this.applyState(state);
    };
    AutoCompleteWithoutContext2.prototype.applyInputValue = function(value, state, eventKey) {
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField;
      this._suggested = "";
      if (opened && eventKey === Keys.enter) {
        var newValue = getItemValue(data[this.focusedIndex(value)], textField);
        this.triggerOnChange(newValue, state);
      }
      if (opened) {
        this.togglePopup(state);
      }
      this.applyState(state);
    };
    AutoCompleteWithoutContext2.prototype.renderSearchBar = function(value, id) {
      var _this = this;
      var base = this.base;
      var _a2 = this.props, placeholder = _a2.placeholder, tabIndex = _a2.tabIndex, disabled = _a2.disabled, readonly = _a2.readonly;
      var focused = this.state.focused;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      return React11.createElement(SearchBar_default, { id, placeholder, tabIndex, accessKey: this.props.accessKey, value, suggestedText: this._suggested, focused, name: this.props.name, ref: function(searchbar) {
        return _this._input = searchbar && searchbar.input;
      }, onKeyDown: this.onInputKeyDown, onChange: this.onChangeHandler, onFocus: base.handleFocus, onBlur: this.handleBlur, disabled, readOnly: readonly, expanded: opened, owns: base.listBoxId, activedescendant: "option-" + base.guid + "-" + this.focusedIndex(), role: "combobox", ariaLabelledBy: this.props.ariaLabelledBy, ariaDescribedBy: this.props.ariaDescribedBy, ariaRequired: this.required, render: this.props.valueRender });
    };
    AutoCompleteWithoutContext2.prototype.renderListContainer = function() {
      var _a2;
      var base = this.base;
      var _b = this.props, dir = _b.dir, header = _b.header, footer = _b.footer, _c = _b.data, data = _c === void 0 ? [] : _c, size = _b.size;
      var popupSettings = base.getPopupSettings();
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
      return React11.createElement(
        ListContainer_default,
        { width: popupWidth, popupSettings: {
          animate: popupSettings.animate,
          anchor: this.element,
          show: opened,
          popupClass: classNames(popupSettings.popupClass, "k-list-container", "k-autocomplete-popup"),
          className: popupSettings.className,
          appendTo: popupSettings.appendTo
        }, dir: dir !== void 0 ? dir : this.base.dirCalculated, itemsCount: [data.length] },
        header && React11.createElement("div", { className: "k-list-header" }, header),
        React11.createElement("div", { className: classNames("k-list", (_a2 = {}, _a2["k-list-".concat(sizeMap4[size] || size)] = size, _a2)) }, this.renderList()),
        footer && React11.createElement("div", { className: "k-list-footer" }, footer)
      );
    };
    AutoCompleteWithoutContext2.prototype.renderList = function() {
      var base = this.base;
      var popupSettings = base.getPopupSettings();
      var _a2 = this.props, textField = _a2.textField, _b = _a2.data, data = _b === void 0 ? [] : _b, listNoDataRender = _a2.listNoDataRender, itemRender = _a2.itemRender;
      var value = this.value;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      return React11.createElement(List_default, { id: base.listBoxId, show: opened, data: data.slice(), focusedIndex: this.focusedIndex(), value, textField, valueField: textField, highlightSelected: false, optionsGuid: base.guid, listRef: function(list) {
        return base.list = list;
      }, wrapperStyle: { maxHeight: popupSettings.height }, wrapperCssClass: "k-list-content", onClick: this.handleItemClick, itemRender, noDataRender: listNoDataRender, onMouseDown: function(e) {
        return e.preventDefault();
      } });
    };
    AutoCompleteWithoutContext2.prototype.triggerOnChange = function(newValue, state, eventArgs) {
      if (this.value === newValue && !eventArgs) {
        return;
      }
      state.data.value = newValue;
      this._valueDuringOnChange = newValue;
      state.events.push(__assign5({ type: "onChange" }, eventArgs || {}));
    };
    AutoCompleteWithoutContext2.prototype.applyState = function(state) {
      this.base.applyState(state);
      this._valueDuringOnChange = void 0;
    };
    AutoCompleteWithoutContext2.prototype.suggestValue = function(value) {
      this._suggested = "";
      if (value) {
        var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField;
        var suggestedItem = data[itemIndexStartsWith(data, value, textField)];
        if (suggestedItem) {
          var suggestedText = getItemValue(suggestedItem, textField);
          if (value.toLowerCase() !== suggestedText.toLowerCase()) {
            this._suggested = suggestedText.substring(value.length);
          }
        }
      }
    };
    AutoCompleteWithoutContext2.prototype.focusedIndex = function(value) {
      var _this = this;
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField, focusedItemIndex = _a2.focusedItemIndex;
      var inputValue = value !== void 0 ? value : this.value;
      return this.state.focusedItem !== void 0 ? data.findIndex(function(i) {
        return areSame(i, _this.state.focusedItem, textField);
      }) : focusedItemIndex ? focusedItemIndex(data, inputValue, textField) : Math.max(0, data.indexOf(getFocusedItem(data, inputValue, textField)));
    };
    AutoCompleteWithoutContext2.displayName = "AutoComplete";
    AutoCompleteWithoutContext2.propTypes = __assign5(__assign5({}, DropDownBase_default.basicPropTypes), { size: PropTypes4.oneOf([null, "small", "medium", "large"]), rounded: PropTypes4.oneOf([null, "small", "medium", "large", "full"]), fillMode: PropTypes4.oneOf([null, "solid", "flat", "outline"]), suggest: PropTypes4.oneOfType([PropTypes4.bool, PropTypes4.string]), placeholder: PropTypes4.string, value: PropTypes4.string, defaultValue: PropTypes4.string, validationMessage: PropTypes4.string, required: PropTypes4.bool, readonly: PropTypes4.bool, clearButton: PropTypes4.bool, valueRender: PropTypes4.func, id: PropTypes4.string, ariaLabelledBy: PropTypes4.string, ariaDescribedBy: PropTypes4.string });
    AutoCompleteWithoutContext2.defaultProps = __assign5(__assign5({}, DropDownBase_default.defaultProps), { size: "medium", rounded: "medium", fillMode: "solid" });
    return AutoCompleteWithoutContext2;
  }(React11.Component)
);
var AutoCompletePropsContext = createPropsContext();
var AutoComplete = withPropsContext(AutoCompletePropsContext, AutoCompleteWithoutContext);
AutoComplete.displayName = "KendoReactAutoComplete";

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiSelect/MultiSelect.js
var React13 = __toESM(require_react());
var PropTypes5 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiSelect/TagList.js
var React12 = __toESM(require_react());
var __extends11 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var preventDefault2 = function(event) {
  return event.syntheticEvent.preventDefault();
};
var stopPropagation = function(event) {
  return event.syntheticEvent.stopPropagation();
};
var TagList = (
  /** @class */
  function(_super) {
    __extends11(TagList2, _super);
    function TagList2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TagList2.prototype.render = function() {
      var _a2 = this.props, data = _a2.data, guid2 = _a2.guid, focused = _a2.focused, tagRender = _a2.tagRender, TagComponent = _a2.tag, onTagDelete = _a2.onTagDelete, size = _a2.size;
      return React12.createElement(
        React12.Fragment,
        null,
        data.map(function(tagData, index) {
          var tag = TagComponent ? React12.createElement(TagComponent, { key: tagData.text + index, tagData, guid: guid2, focusedTag: focused, onTagDelete }) : React12.createElement(Chip, { id: "tag-".concat(guid2, "-").concat(tagData.text.replace(/\s+/g, "-")), "aria-selected": true, role: "option", "aria-setsize": data.length, key: tagData.text + index, text: tagData.text, removable: true, onRemove: function(e) {
            return onTagDelete.call(void 0, tagData.data, e.syntheticEvent);
          }, onMouseDown: preventDefault2, onClick: stopPropagation, className: tagData === focused ? "k-focus" : void 0, size });
          return tagRender ? tagRender(tagData, tag) : tag;
        }),
        this.props.children
      );
    };
    return TagList2;
  }(React12.Component)
);
var TagList_default = TagList;

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/settings.js
var ActiveDescendant;
(function(ActiveDescendant2) {
  ActiveDescendant2[ActiveDescendant2["PopupList"] = 0] = "PopupList";
  ActiveDescendant2[ActiveDescendant2["TagsList"] = 1] = "TagsList";
})(ActiveDescendant || (ActiveDescendant = {}));

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiSelect/MultiSelect.js
var __extends12 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var sizeMap5 = kendoThemeMaps.sizeMap;
var roundedMap5 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE4 = "Please enter a valid value!";
var preventDefault3 = function(event) {
  return event.preventDefault();
};
var isCustom = function(type) {
  return type === FocusedItemType.CustomItem;
};
var FocusedItemType;
(function(FocusedItemType2) {
  FocusedItemType2[FocusedItemType2["None"] = 0] = "None";
  FocusedItemType2[FocusedItemType2["ListItem"] = 1] = "ListItem";
  FocusedItemType2[FocusedItemType2["CustomItem"] = 2] = "CustomItem";
})(FocusedItemType || (FocusedItemType = {}));
var MultiSelectWithoutContext = (
  /** @class */
  function(_super) {
    __extends12(MultiSelectWithoutContext2, _super);
    function MultiSelectWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {
        activedescendant: ActiveDescendant.PopupList
      };
      _this._element = null;
      _this._valueItemsDuringOnChange = null;
      _this._inputId = guid();
      _this.base = new DropDownBase_default(_this);
      _this._tags = [];
      _this._input = null;
      _this._skipFocusEvent = false;
      _this.scrollToFocused = false;
      _this.focus = function() {
        if (_this._input) {
          _this._input.focus();
        }
      };
      _this.handleItemSelect = function(index, state) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, virtual = _a2.virtual;
        var skip = virtual ? virtual.skip : 0;
        var dataItem = data[index - skip];
        var indexInValue = _this.value.findIndex(function(i) {
          return areSame(i, dataItem, dataItemKey);
        });
        var newItems = [];
        if (indexInValue !== -1) {
          newItems = _this.value;
          newItems.splice(indexInValue, 1);
        } else {
          newItems = __spreadArray(__spreadArray([], _this.value, true), [dataItem], false);
        }
        var text = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        if (text) {
          if (_this.state.text) {
            state.data.text = "";
          }
          _this.base.filterChanged("", state);
        }
        if (_this.state.focusedIndex !== void 0) {
          state.data.focusedIndex = void 0;
        }
        _this.triggerOnChange(newItems, state);
        _this.base.triggerPageChangeCornerItems(dataItem, state);
      };
      _this.onTagDelete = function(itemsToRemove, event) {
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (opened) {
          _this.base.togglePopup(state);
        }
        if (!_this.state.focused) {
          state.data.focused = true;
          _this.focus();
        }
        var selected = _this.value;
        removeDataItems(selected, itemsToRemove, _this.props.dataItemKey);
        _this.triggerOnChange(selected, state);
        _this.applyState(state);
      };
      _this.itemFocus = function(index, state) {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, allowCustom = _a2.allowCustom, virtual = _a2.virtual;
        var skip = virtual ? virtual.skip : 0;
        var text = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        var focusedIndex = _this.getFocusedState().focusedIndex;
        var customItem = allowCustom && text;
        var nextFocusedItem = data[index - skip];
        if (nextFocusedItem && focusedIndex !== index) {
          if (_this.state.focusedIndex !== index) {
            state.data.focusedIndex = index;
            state.data.activedescendant = ActiveDescendant.PopupList;
          }
        } else if (customItem && index === -1) {
          if (_this.state.focusedIndex !== void 0) {
            state.data.focusedIndex = void 0;
          }
        }
        _this.base.triggerPageChangeCornerItems(nextFocusedItem, state);
      };
      _this.componentRef = function(element) {
        _this._element = element;
        _this.base.wrapper = element;
      };
      _this.searchbarRef = function(searchbar) {
        var input = _this._input = searchbar && searchbar.input;
        if (input && _this.state.focused) {
          window.setTimeout(function() {
            return input.focus();
          }, 0);
        }
      };
      _this.onChangeHandler = function(event) {
        var state = _this.base.initState();
        var value = event.currentTarget.value;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        state.syntheticEvent = event;
        if (_this.props.filter === void 0) {
          state.data.text = value;
        }
        state.data.focusedIndex = void 0;
        if (!opened) {
          _this.base.togglePopup(state);
        }
        _this.base.filterChanged(value, state);
        _this.applyState(state);
      };
      _this.clearButtonClick = function(event) {
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        event.stopPropagation();
        if (_this.value.length > 0) {
          _this.triggerOnChange([], state);
        }
        if (_this.state.focusedIndex !== void 0) {
          state.data.focusedIndex = void 0;
        }
        if (opened) {
          _this.base.togglePopup(state);
        }
        var text = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        if (isPresent(text) && text !== "") {
          _this.base.filterChanged("", state);
        }
        if (_this.state.text) {
          state.data.text = "";
        }
        _this.applyState(state);
      };
      _this.onInputKeyDown = function(event) {
        var keyCode = event.keyCode;
        var text = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var focusedItem = _this.getFocusedState().focusedItem;
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (!text && _this.value.length > 0 && (keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end || keyCode === Keys.delete || keyCode === Keys.backspace)) {
          return _this.onTagsNavigate(event, state);
        }
        var togglePopup = function() {
          event.preventDefault();
          _this.base.togglePopup(state);
          _this.applyState(state);
        };
        if (opened) {
          if (event.altKey && keyCode === Keys.up) {
            togglePopup();
          } else if (keyCode === Keys.up || keyCode === Keys.down) {
            event.preventDefault();
            _this.onNavigate(state, keyCode);
          } else if (keyCode === Keys.enter) {
            event.preventDefault();
            if (_this.props.allowCustom && text && focusedItem === null) {
              _this.customItemSelect(event);
            } else {
              _this.selectFocusedItem(event);
            }
          } else if (keyCode === Keys.esc) {
            togglePopup();
          }
        } else if (event.altKey && keyCode === Keys.down) {
          togglePopup();
        }
      };
      _this.renderListContainer = function() {
        var _a2, _b;
        var base = _this.base;
        var _c = _this.props, header = _c.header, footer = _c.footer, allowCustom = _c.allowCustom, dir = _c.dir, _d = _c.data, data = _d === void 0 ? [] : _d, size = _c.size;
        var popupSettings = _this.base.getPopupSettings();
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var text = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        var popupWidth = popupSettings.width !== void 0 ? popupSettings.width : base.popupWidth;
        var listContainerProps = {
          dir: dir !== void 0 ? dir : base.dirCalculated,
          width: popupWidth,
          popupSettings: {
            popupClass: classNames(popupSettings.popupClass, "k-list-container", "k-multiselect-popup"),
            className: popupSettings.className,
            animate: popupSettings.animate,
            anchor: _this.element,
            show: opened,
            onOpen: _this.onPopupOpened,
            onClose: _this.onPopupClosed,
            appendTo: popupSettings.appendTo
          },
          itemsCount: [data.length, _this.value.length]
        };
        var focusedType = _this.getFocusedState().focusedType;
        var customItem = allowCustom && text && React13.createElement(
          "div",
          { className: classNames("k-list", (_a2 = {}, _a2["k-list-".concat(sizeMap5[size] || size)] = size, _a2)), key: "customitem", onClick: _this.customItemSelect, onMouseDown: preventDefault3 },
          React13.createElement(
            "div",
            { className: classNames("k-list-item k-custom-item", { "k-focus": isCustom(focusedType) }), style: { fontStyle: "italic" } },
            text,
            React13.createElement(IconWrap, { name: "plus", icon: plusIcon, style: { position: "absolute", right: "0.5em" } })
          )
        );
        return React13.createElement(
          ListContainer_default,
          __assign6({}, listContainerProps),
          header && React13.createElement("div", { className: "k-list-header" }, header),
          customItem,
          React13.createElement("div", { className: classNames("k-list", (_b = {}, _b["k-list-".concat(sizeMap5[size] || size)] = size, _b["k-virtual-list"] = _this.base.vs.enabled, _b)) }, _this.renderList()),
          footer && React13.createElement("div", { className: "k-list-footer" }, footer)
        );
      };
      _this.renderList = function() {
        var _a2 = _this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, textField = _a2.textField, listNoDataRender = _a2.listNoDataRender, itemRender = _a2.itemRender, dataItemKey = _a2.dataItemKey, virtual = _a2.virtual;
        var vs = _this.base.vs;
        var skip = virtual ? virtual.skip : 0;
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var focusedIndex = _this.getFocusedState().focusedIndex;
        var popupSettings = _this.base.getPopupSettings();
        var translate = "translateY(".concat(vs.translate, "px)");
        return React13.createElement(List_default, { id: _this.base.listBoxId, show: opened, data: data.slice(), focusedIndex: focusedIndex - skip, value: _this.value, textField, valueField: dataItemKey, optionsGuid: _this.base.guid, listRef: function(list) {
          vs.list = _this.base.list = list;
        }, wrapperStyle: { maxHeight: popupSettings.height }, wrapperCssClass: "k-list-content", listStyle: vs.enabled ? { transform: translate } : void 0, key: "listKey", skip, onClick: _this.handleItemClick, itemRender, noDataRender: listNoDataRender, onMouseDown: preventDefault3, onBlur: _this.handleBlur, onScroll: function(e) {
          vs.scrollHandler(e);
        }, wrapperRef: vs.scrollerRef, scroller: _this.base.renderScrollElement() });
      };
      _this.customItemSelect = function(event) {
        var _a2;
        var itemText = _this.props.filter !== void 0 ? _this.props.filter : _this.state.text;
        var textField = _this.props.textField;
        if (!itemText) {
          return;
        }
        var state = _this.base.initState();
        state.syntheticEvent = event;
        var item = textField ? (_a2 = {}, _a2[textField] = itemText, _a2) : itemText;
        if (_this.state.text !== void 0) {
          state.data.text = "";
        }
        state.data.focusedIndex = void 0;
        _this.base.filterChanged("", state);
        var newItems = __spreadArray(__spreadArray([], _this.value, true), [item], false);
        _this.triggerOnChange(newItems, state);
        _this.base.togglePopup(state);
        _this.applyState(state);
      };
      _this.handleWrapperClick = function(event) {
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var input = _this._input;
        if (!opened && input) {
          _this.focusElement(input);
        }
        var state = _this.base.initState();
        state.syntheticEvent = event;
        if (!_this.state.focused) {
          state.events.push({ type: "onFocus" });
          state.data.focused = true;
        }
        _this.base.togglePopup(state);
        _this.applyState(state);
      };
      _this.handleItemClick = function(index, event) {
        var state = _this.base.initState();
        state.syntheticEvent = event;
        _this.handleItemSelect(index, state);
        if (_this.props.autoClose) {
          _this.base.togglePopup(state);
        }
        event.stopPropagation();
        _this.applyState(state);
      };
      _this.handleBlur = function(event) {
        if (!_this.state.focused || _this._skipFocusEvent) {
          return;
        }
        var opened = _this.props.opened !== void 0 ? _this.props.opened : _this.state.opened;
        var state = _this.base.initState();
        var _a2 = _this.props, allowCustom = _a2.allowCustom, filterable = _a2.filterable;
        state.syntheticEvent = event;
        state.data.focused = false;
        state.events.push({ type: "onBlur" });
        if (opened) {
          if (_this.state.opened) {
            state.data.opened = false;
          }
          state.events.push({ type: "onClose" });
        }
        if (!allowCustom && !filterable && _this.state.text) {
          state.data.text = "";
        }
        _this.applyState(state);
      };
      _this.handleFocus = function(event) {
        if (_this._skipFocusEvent) {
          return;
        }
        _this.base.handleFocus(event);
      };
      _this.onPopupOpened = function() {
        if (_this._input && _this.state.focused) {
          _this.focusElement(_this._input);
        }
      };
      _this.onPopupClosed = function() {
        if (_this.state.focused) {
          window.setTimeout(function() {
            if (_this.state.focused) {
              _this.focusElement(_this._input);
            }
          }, 0);
        }
      };
      _this.setValidity = function() {
        if (_this._input && _this._input.setCustomValidity) {
          _this._input.setCustomValidity(_this.validity.valid ? "" : _this.props.validationMessage || VALIDATION_MESSAGE4);
        }
      };
      validatePackage(packageMetadata);
      return _this;
    }
    Object.defineProperty(MultiSelectWithoutContext2.prototype, "element", {
      /**
       * @hidden
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext2.prototype, "value", {
      /**
       * Represents the value of the MultiSelect.
       */
      get: function() {
        var result = [];
        if (this._valueItemsDuringOnChange) {
          result.push.apply(result, this._valueItemsDuringOnChange);
        } else if (this.props.value) {
          result.push.apply(result, this.props.value);
        } else if (this.state.value) {
          result.push.apply(result, this.state.value);
        } else if (this.props.defaultValue) {
          result.push.apply(result, this.props.defaultValue);
        }
        return result;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext2.prototype, "name", {
      /**
       * Gets the `name` property of the MultiSelect.
       */
      get: function() {
        return this.props.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext2.prototype, "validity", {
      /**
       * Represents the validity state into which the MultiSelect is set.
       */
      get: function() {
        var customError = this.props.validationMessage !== void 0;
        var isValid = !this.required || this.value !== null && this.value.length > 0 && this.value !== void 0;
        var valid = this.props.valid !== void 0 ? this.props.valid : isValid;
        return {
          customError,
          valid,
          valueMissing: this.value === null
        };
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext2.prototype, "required", {
      /**
       * @hidden
       */
      get: function() {
        return this.props.required !== void 0 ? this.props.required : MultiSelectWithoutContext2.defaultProps.required;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MultiSelectWithoutContext2.prototype, "validityStyles", {
      get: function() {
        return this.props.validityStyles !== void 0 ? this.props.validityStyles : MultiSelectWithoutContext2.defaultProps.validityStyles;
      },
      enumerable: false,
      configurable: true
    });
    MultiSelectWithoutContext2.prototype.componentDidUpdate = function(prevProps, prevState) {
      var virtual = this.props.virtual;
      var skip = virtual ? virtual.skip : 0;
      var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var prevOpened = prevProps.opened !== void 0 ? prevProps.opened : prevState.opened;
      var opening = !prevOpened && opened;
      var closing = prevOpened && !opened;
      var popupSettings = this.base.getPopupSettings();
      if (!popupSettings.animate && closing) {
        this.onPopupClosed();
      }
      if (virtual && virtual.total !== prevTotal) {
        this.base.vs.calcScrollElementHeight();
        this.base.vs.reset();
      } else {
        var _a2 = this.getFocusedState(), focusedItem = _a2.focusedItem, focusedIndex = _a2.focusedIndex;
        if (opening && virtual) {
          this.base.scrollToVirtualItem(virtual, focusedIndex - skip);
        } else if (opening && !virtual) {
          this.base.scrollToItem(focusedIndex);
        } else if (opened && prevOpened && focusedItem && this.scrollToFocused) {
          this.base.scrollToItem(focusedIndex - skip);
        }
      }
      this.scrollToFocused = false;
      this.setValidity();
    };
    MultiSelectWithoutContext2.prototype.componentDidMount = function() {
      this.base.didMount();
      this.setValidity();
    };
    MultiSelectWithoutContext2.prototype.onNavigate = function(state, keyCode) {
      var _a2 = this.props, allowCustom = _a2.allowCustom, _b = _a2.data, data = _b === void 0 ? [] : _b;
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var text = this.props.filter !== void 0 ? this.props.filter : this.state.text;
      var _c = this.getFocusedState(), focusedType = _c.focusedType, focusedIndex = _c.focusedIndex;
      var customItem = allowCustom && text;
      var customItemFocused = isCustom(focusedType);
      var base = this.base;
      var vs = base.vs;
      if (opened && keyCode === Keys.up && customItemFocused) {
        if (this.state.focusedIndex !== void 0) {
          state.data.focusedIndex = void 0;
        }
      } else {
        var newFocused = base.navigation.navigate({
          keyCode,
          current: focusedIndex,
          max: (vs.enabled ? vs.total : data.length) - 1,
          min: customItem ? -1 : 0
        });
        if (newFocused !== void 0) {
          this.itemFocus(newFocused, state);
          this.scrollToFocused = true;
        }
      }
      this.applyState(state);
    };
    MultiSelectWithoutContext2.prototype.render = function() {
      var _a2, _b;
      var _c = this.props, style = _c.style, className = _c.className, label = _c.label, dir = _c.dir, disabled = _c.disabled, tags = _c.tags, textField = _c.textField, dataItemKey = _c.dataItemKey, virtual = _c.virtual, size = _c.size, rounded = _c.rounded, fillMode = _c.fillMode, loading = _c.loading, filter = _c.filter;
      var _d = this.state, text = _d.text, focused = _d.focused, focusedTag = _d.focusedTag;
      var vs = this.base.vs;
      var id = this.props.id || this._inputId;
      vs.enabled = virtual !== void 0;
      if (virtual !== void 0) {
        vs.skip = virtual.skip;
        vs.total = virtual.total;
        vs.pageSize = virtual.pageSize;
      }
      var tagsToRender = [];
      if (tags === void 0) {
        this.value.forEach(function(item) {
          tagsToRender.push({ text: getItemValue(item, textField), data: [item] });
        });
      } else {
        tagsToRender.push.apply(tagsToRender, tags);
      }
      this.setItems(tagsToRender, this._tags);
      var isValid = !this.validityStyles || this.validity.valid;
      var clearButton = Boolean(filter !== void 0 ? filter : text) || this.value.length > 0;
      var component = React13.createElement(
        "div",
        { ref: this.componentRef, className: classNames("k-multiselect k-input", className, (_a2 = {}, _a2["k-input-".concat(sizeMap5[size] || size)] = size, _a2["k-rounded-".concat(roundedMap5[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-focus"] = focused && !disabled, _a2["k-invalid"] = !isValid, _a2["k-disabled"] = disabled, _a2["k-loading"] = loading, _a2["k-required"] = this.required, _a2)), style: !label ? style : __assign6(__assign6({}, style), { width: void 0 }), dir, onFocus: this.handleFocus, onBlur: this.handleBlur, onClick: this.handleWrapperClick, onMouseDown: preventDefaultNonInputs },
        React13.createElement(
          "div",
          { className: classNames("k-input-values") },
          React13.createElement("div", { className: classNames("k-chip-list", (_b = {}, _b["k-chip-list-".concat(sizeMap5[size] || size)] = size, _b)), role: "listbox", id: "tagslist-" + this.base.guid }, tagsToRender.length > 0 && React13.createElement(TagList_default, { tagRender: this.props.tagRender, onTagDelete: this.onTagDelete, data: tagsToRender, guid: this.base.guid, focused: focusedTag ? tagsToRender.find(function(t) {
            return matchTags(t, focusedTag, dataItemKey);
          }) : void 0, size })),
          this.renderSearchbar(id)
        ),
        loading && React13.createElement(IconWrap, { className: "k-input-loading-icon", name: "loading" }),
        clearButton && React13.createElement(ClearButton_default, { onClick: this.clearButtonClick }),
        this.renderListContainer()
      );
      return label ? React13.createElement(FloatingLabel, { label, editorId: id, editorValue: text || getItemValue(this.value[0], textField), editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : void 0 }, children: component }) : component;
    };
    MultiSelectWithoutContext2.prototype.renderSearchbar = function(id) {
      var _a2 = this.state, activedescendant = _a2.activedescendant, focusedTag = _a2.focusedTag;
      var _b = this.props, disabled = _b.disabled, placeholder = _b.placeholder, ariaDescribedBy = _b.ariaDescribedBy;
      var text = (this.props.filter !== void 0 ? this.props.filter : this.state.text) || "";
      var opened = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
      var focusedIndex = this.getFocusedState().focusedIndex;
      var placeholderToShow = this.value.length === 0 && !text ? placeholder : void 0;
      var ariaActivedescendant = activedescendant === ActiveDescendant.TagsList && focusedTag !== void 0 ? "tag-".concat(this.base.guid, "-").concat(focusedTag.text.replace(/\s+/g, "-")) : "option-".concat(this.base.guid, "-").concat(focusedIndex);
      return React13.createElement(SearchBar_default, { id, size: Math.max((placeholderToShow || "").length, text.length, 1), tabIndex: this.props.tabIndex, accessKey: this.props.accessKey, placeholder: placeholderToShow, value: text, onChange: this.onChangeHandler, onKeyDown: this.onInputKeyDown, ref: this.searchbarRef, disabled, expanded: opened, owns: this.base.listBoxId, role: "combobox", activedescendant: ariaActivedescendant, ariaDescribedBy: "tagslist-".concat(this.base.guid).concat(ariaDescribedBy ? " " + ariaDescribedBy : ""), ariaLabelledBy: this.props.ariaLabelledBy, ariaRequired: this.required });
    };
    MultiSelectWithoutContext2.prototype.onTagsNavigate = function(event, state) {
      var keyCode = event.keyCode;
      var focusedTag = this.state.focusedTag;
      var tags = this._tags;
      var itemsKey = this.props.dataItemKey;
      var focusedIndex = focusedTag ? tags.findIndex(function(t) {
        return matchTags(t, focusedTag, itemsKey);
      }) : -1;
      var newFocusedTag = void 0;
      var hasFocused = focusedIndex !== -1;
      if (keyCode === Keys.left) {
        if (hasFocused) {
          focusedIndex = Math.max(0, focusedIndex - 1);
        } else {
          focusedIndex = tags.length - 1;
        }
        newFocusedTag = tags[focusedIndex];
      } else if (keyCode === Keys.right) {
        if (focusedIndex === tags.length - 1) {
          newFocusedTag = void 0;
        } else if (hasFocused) {
          focusedIndex = Math.min(tags.length - 1, focusedIndex + 1);
          newFocusedTag = tags[focusedIndex];
        }
      } else if (keyCode === Keys.home) {
        newFocusedTag = tags[0];
      } else if (keyCode === Keys.end) {
        newFocusedTag = tags[tags.length - 1];
      } else if (keyCode === Keys.delete) {
        if (hasFocused) {
          var items = this.value;
          removeDataItems(items, tags[focusedIndex].data, itemsKey);
          this.triggerOnChange(items, state);
        }
      } else if (keyCode === Keys.backspace) {
        var items = this.value;
        if (hasFocused) {
          removeDataItems(items, tags[focusedIndex].data, itemsKey);
          this.triggerOnChange(items, state);
        } else if (!hasFocused && tags.length) {
          var removed = tags.pop();
          removeDataItems(items, removed.data, itemsKey);
          this.triggerOnChange(items, state);
        }
      }
      if (newFocusedTag !== focusedTag) {
        state.data.focusedTag = newFocusedTag;
        state.data.activedescendant = ActiveDescendant.TagsList;
      }
      this.applyState(state);
    };
    MultiSelectWithoutContext2.prototype.triggerOnChange = function(items, state) {
      if (this.props.value === void 0) {
        state.data.value = __spreadArray([], items, true);
      }
      this._valueItemsDuringOnChange = [];
      this.setItems(items, this._valueItemsDuringOnChange);
      state.events.push({ type: "onChange" });
    };
    MultiSelectWithoutContext2.prototype.selectFocusedItem = function(event) {
      var _a2 = this.props, _b = _a2.data, data = _b === void 0 ? [] : _b, virtual = _a2.virtual;
      var focusedIndex = this.getFocusedState().focusedIndex;
      var skip = virtual ? virtual.skip : 0;
      if (data[focusedIndex - skip] !== void 0) {
        this.handleItemClick(focusedIndex, event);
      }
    };
    MultiSelectWithoutContext2.prototype.setItems = function(srcItems, destItems) {
      destItems.length = 0;
      destItems.push.apply(destItems, srcItems);
    };
    MultiSelectWithoutContext2.prototype.getFocusedState = function() {
      var focusedIndex = this.state.focusedIndex;
      var text = this.props.filter !== void 0 ? this.props.filter : this.state.text;
      var _a2 = this.props, allowCustom = _a2.allowCustom, _b = _a2.data, data = _b === void 0 ? [] : _b, dataItemKey = _a2.dataItemKey, virtual = _a2.virtual, textField = _a2.textField, _c = _a2.focusedItemIndex, focusedItemIndex = _c === void 0 ? itemIndexStartsWith : _c;
      var skip = virtual && virtual.skip || 0;
      var focusedInd;
      if (focusedIndex !== void 0) {
        return {
          focusedIndex,
          focusedItem: data[focusedIndex - skip],
          focusedType: FocusedItemType.ListItem
        };
      }
      var selected = this.value;
      if (allowCustom && text) {
        return { focusedItem: null, focusedIndex: -1, focusedType: FocusedItemType.CustomItem };
      } else if (text) {
        focusedInd = focusedItemIndex(data, text, textField);
        return {
          focusedItem: data[focusedInd],
          focusedIndex: focusedInd + skip,
          focusedType: FocusedItemType.ListItem
        };
      } else if (selected.length) {
        var last_1 = selected[selected.length - 1];
        focusedInd = data.findIndex(function(i) {
          return areSame(i, last_1, dataItemKey);
        });
        if (data[focusedInd] !== void 0) {
          return {
            focusedIndex: focusedInd + skip,
            focusedItem: data[focusedInd],
            focusedType: FocusedItemType.ListItem
          };
        }
        return { focusedType: FocusedItemType.None, focusedIndex: -1 };
      }
      return skip === 0 ? { focusedItem: data[0], focusedIndex: 0, focusedType: FocusedItemType.ListItem } : { focusedType: FocusedItemType.None, focusedIndex: -1 };
    };
    MultiSelectWithoutContext2.prototype.focusElement = function(element) {
      var _this = this;
      this._skipFocusEvent = true;
      element.focus();
      window.setTimeout(function() {
        return _this._skipFocusEvent = false;
      }, 0);
    };
    MultiSelectWithoutContext2.prototype.applyState = function(state) {
      this.base.applyState(state);
      this._valueItemsDuringOnChange = null;
    };
    MultiSelectWithoutContext2.displayName = "MultiSelect";
    MultiSelectWithoutContext2.propTypes = __assign6(__assign6({}, DropDownBase_default.propTypes), { autoClose: PropTypes5.bool, value: PropTypes5.arrayOf(PropTypes5.any), defaultValue: PropTypes5.arrayOf(PropTypes5.any), dataItemKey: PropTypes5.string, placeholder: PropTypes5.string, tags: PropTypes5.arrayOf(PropTypes5.shape({
      text: PropTypes5.string,
      data: PropTypes5.arrayOf(PropTypes5.any)
    })), tagRender: PropTypes5.func, id: PropTypes5.string, ariaLabelledBy: PropTypes5.string, ariaDescribedBy: PropTypes5.string });
    MultiSelectWithoutContext2.defaultProps = __assign6(__assign6({}, DropDownBase_default.defaultProps), { autoClose: true, required: false, size: "medium", rounded: "medium", fillMode: "solid" });
    return MultiSelectWithoutContext2;
  }(React13.Component)
);
var MultiSelectPropsContext = createPropsContext();
var MultiSelect = withPropsContext(MultiSelectPropsContext, MultiSelectWithoutContext);
MultiSelect.displayName = "KendoReactMultiSelect";

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiColumnComboBox/MultiColumnComboBox.js
var React15 = __toESM(require_react());
var PropTypes6 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dropdowns/dist/es/common/MultiColumnList.js
var React14 = __toESM(require_react());
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var MultiColumnList = function(props) {
  return React14.createElement(List_default, __assign7({}, props, { wrapperCssClass: "k-table-body k-table-scroller", listClassName: "k-table k-table-list", listStyle: __assign7({}, props.listStyle) }));
};

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiColumnComboBox/MultiColumnComboBox.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var columnWidth = function(width, defaultWidth) {
  if (width) {
    return typeof width === "number" ? width + "px" : width;
  }
  return defaultWidth;
};
var MultiColumnComboBoxPropsContext = createPropsContext();
var MultiColumnComboBox = React15.forwardRef(function(directProps, ref) {
  var props = usePropsContext(MultiColumnComboBoxPropsContext, directProps);
  var target = React15.useRef(null);
  var comboBoxRef = React15.useRef(null);
  var scrollbarWidth = getScrollbarWidth();
  var _a2 = props.columns, columns = _a2 === void 0 ? defaultProps.columns : _a2, _b = props.popupSettings, popupSettings = _b === void 0 ? defaultProps.popupSettings : _b, className = props.className, size = props.size, onOpen = props.onOpen, onClose = props.onClose, onFocus = props.onFocus, onBlur = props.onBlur, onChange = props.onChange, onFilterChange = props.onFilterChange, onPageChange = props.onPageChange, other = __rest(props, ["columns", "popupSettings", "className", "size", "onOpen", "onClose", "onFocus", "onBlur", "onChange", "onFilterChange", "onPageChange"]);
  React15.useImperativeHandle(target, function() {
    return {
      element: comboBoxRef.current && comboBoxRef.current.element,
      focus: function() {
        if (comboBoxRef.current) {
          comboBoxRef.current.focus();
        }
      },
      get value() {
        return comboBoxRef.current && comboBoxRef.current.value;
      },
      get name() {
        return comboBoxRef.current && comboBoxRef.current.name;
      },
      props
    };
  });
  React15.useImperativeHandle(ref, function() {
    return target.current;
  });
  var initialGroupHeader = React15.useMemo(function() {
    if (initialGroupHeader === void 0 && props.groupField !== void 0 && props.data) {
      return getItemValue(props.data[0], props.groupField);
    }
  }, [props.data, props.groupField]);
  var _c = React15.useState(initialGroupHeader), groupHeader = _c[0], setGroupHeader = _c[1];
  var header = React15.useMemo(function() {
    return React15.createElement(
      React15.Fragment,
      null,
      props.header,
      React15.createElement(
        "div",
        { className: "k-table-header-wrap" },
        React15.createElement(
          "table",
          { className: "k-table", role: "presentation" },
          React15.createElement("colgroup", null, columns.map(function(column, i) {
            return React15.createElement("col", { key: column.uniqueKey ? column.uniqueKey : i, style: { width: column.width ? column.width : defaultProps.width } });
          })),
          React15.createElement(
            "thead",
            { className: "k-table-thead" },
            React15.createElement("tr", { className: "k-table-row" }, columns.map(function(column, i) {
              return React15.createElement("th", { className: "k-table-th", key: column.uniqueKey ? column.uniqueKey : i }, column.header || " ");
            })),
            groupHeader && React15.createElement(
              "tr",
              { className: "k-table-group-row" },
              React15.createElement("th", { className: "k-table-th", colSpan: columns.length }, groupHeader)
            )
          )
        )
      )
    );
  }, [props.header, columns, groupHeader]);
  var popupWidth = React15.useMemo(function() {
    return "calc(".concat(columns.map(function(column) {
      return columnWidth(column.width, defaultProps.width);
    }).filter(Boolean).join(" + "), " + ").concat(scrollbarWidth, "px + 4px)");
  }, [columns, scrollbarWidth]);
  var skip = props.virtual ? props.virtual.skip : 0;
  var itemRender = React15.useCallback(function(li, liProps) {
    var children = columns.map(function(column, i) {
      return React15.createElement("span", { className: "k-table-td", style: { width: column.width ? column.width : defaultProps.width }, key: column.uniqueKey ? column.uniqueKey : i }, column.field ? getter(column.field)(liProps.dataItem) : "");
    });
    var group = void 0;
    var curGroup, prevGroup, groupGetter, data = props.data || [];
    var index = liProps.index - skip;
    if (props.groupField !== void 0) {
      groupGetter = getter(props.groupField);
      curGroup = groupGetter(data[index]);
      prevGroup = groupGetter(data[index - 1]);
      if (curGroup && prevGroup && curGroup !== prevGroup) {
        group = curGroup;
      }
    }
    if (group) {
      children.push(React15.createElement(
        "div",
        { key: "group", className: "k-table-td k-table-group-td" },
        React15.createElement("span", null, group)
      ));
    }
    var rendering = React15.cloneElement(li, __assign8(__assign8({}, li.props), { className: classNames("k-table-row", {
      "k-table-alt-row": liProps.index % 2 !== 0,
      "k-focus": liProps.focused,
      "k-selected": liProps.selected,
      "k-first": Boolean(group)
    }) }), children);
    return props.itemRender ? props.itemRender.call(void 0, rendering, liProps) : rendering;
  }, [columns, props.groupField, props.itemRender, props.data, skip]);
  var handleEvent = React15.useCallback(function(handler, event) {
    if (handler) {
      handler.call(void 0, __assign8(__assign8({}, event), { target: target.current }));
    }
  }, []);
  var onOpenHandler = React15.useCallback(function(event) {
    return handleEvent(onOpen, event);
  }, [onOpen]);
  var onCloseHandler = React15.useCallback(function(event) {
    return handleEvent(onClose, event);
  }, [onClose]);
  var onFocusHandler = React15.useCallback(function(event) {
    return handleEvent(onFocus, event);
  }, [onFocus]);
  var onBlurHandler = React15.useCallback(function(event) {
    return handleEvent(onBlur, event);
  }, [onBlur]);
  var onChangeHandler = React15.useCallback(function(event) {
    return handleEvent(onChange, event);
  }, [onChange]);
  var onFilterChangeHandler = React15.useCallback(function(event) {
    return handleEvent(onFilterChange, event);
  }, [onFilterChange]);
  var onPageChangeHandler = React15.useCallback(function(event) {
    return handleEvent(onPageChange, event);
  }, [onPageChange]);
  var onGroupScroll = React15.useCallback(function(event) {
    setGroupHeader(event.group);
  }, []);
  React15.useEffect(function() {
    setScrollbarWidth();
  });
  var List2 = React15.useCallback(function(listProps) {
    return React15.createElement(MultiColumnList, __assign8({}, listProps));
  }, []);
  return React15.createElement(ComboBox, __assign8({}, other, { list: List2, popupSettings: __assign8(__assign8({ width: popupWidth }, popupSettings), { popupClass: "k-dropdowngrid-popup k-reset", className: popupSettings.className }), ref: comboBoxRef, header, itemRender, size: props.size, rounded: props.rounded, fillMode: props.fillMode, onOpen: onOpenHandler, onClose: onCloseHandler, onFocus: onFocusHandler, onBlur: onBlurHandler, onChange: onChangeHandler, onFilterChange: onFilterChangeHandler, onPageChange: onPageChangeHandler, onGroupScroll, className: classNames("k-dropdowngrid", className), required: props.required }));
});
var propTypes = __assign8(__assign8({}, ComboBoxWithoutContext.propTypes), { columns: PropTypes6.any.isRequired });
var defaultProps = {
  columns: [],
  popupSettings: {},
  width: "200px",
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
MultiColumnComboBox.displayName = "KendoMultiColumnComboBox";
MultiColumnComboBox.propTypes = propTypes;
MultiColumnComboBox.defaultProps = defaultProps;

// node_modules/@progress/kendo-react-dropdowns/dist/es/DropDownTree/DropDownTree.js
var React18 = __toESM(require_react());
var PropTypes7 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-dropdowns/dist/es/DropDownTree/useDropdownWidth.js
var React16 = __toESM(require_react());
function useDropdownWidth(elementRef, initialStyleWidth, args) {
  var _a2 = React16.useState(initialStyleWidth), width = _a2[0], setWidth = _a2[1];
  React16.useEffect(function() {
    if (width !== void 0 && elementRef.current) {
      setWidth(elementRef.current.offsetWidth);
    }
  }, args);
  return width;
}

// node_modules/@progress/kendo-react-dropdowns/dist/es/DropDownTree/ListNoData.js
var React17 = __toESM(require_react());
var ListNoData = function(props) {
  return React17.createElement(
    "div",
    { className: "k-nodata" },
    React17.createElement("div", null, props.children)
  );
};

// node_modules/@progress/kendo-react-dropdowns/dist/es/DropDownTree/DropDownTree.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var sizeMap6 = kendoThemeMaps.sizeMap;
var roundedMap6 = kendoThemeMaps.roundedMap;
var VALIDATION_MESSAGE5 = "Please select a value from the list!";
var ValueHolder = function(props) {
  return React18.createElement("span", { className: "k-input-value-text" }, props.children);
};
var toLevel = function(hierarchicalIndex) {
  return hierarchicalIndex.split("_").map(function(i) {
    return parseInt(i, 10);
  });
};
var getValidity = function(parameters, hasValue) {
  var validationMessage = parameters.validationMessage, valid = parameters.valid, required = parameters.required;
  return {
    customError: validationMessage !== void 0,
    valid: Boolean(valid !== void 0 ? valid : !required || hasValue),
    valueMissing: !hasValue
  };
};
var defaultProps2 = {
  selectField: "selected",
  subItemsField: "items",
  popupSettings: {
    animate: true,
    width: "200px",
    height: "200px"
  },
  required: false,
  validityStyles: true,
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
var DropDownTreePropsContext = createPropsContext();
var DropDownTree = React18.forwardRef(function(directProps, ref) {
  var _a2;
  validatePackage(packageMetadata);
  var props = usePropsContext(DropDownTreePropsContext, directProps);
  var calculatedId = React18.useMemo(function() {
    return guid();
  }, []);
  var id = props.id || calculatedId;
  var _b = props.data, data = _b === void 0 ? [] : _b, dataItemKey = props.dataItemKey, _c = props.popupSettings, popupSettings = _c === void 0 ? {} : _c, _d = props.style, style = _d === void 0 ? {} : _d, opened = props.opened, disabled = props.disabled, _e = props.onOpen, onOpen = _e === void 0 ? noop : _e, _f = props.onClose, onClose = _f === void 0 ? noop : _f, placeholder = props.placeholder, label = props.label, name = props.name, _g = props.selectField, selectField = _g === void 0 ? defaultProps2.selectField : _g, _h = props.subItemsField, subItemsField = _h === void 0 ? defaultProps2.subItemsField : _h, validationMessage = props.validationMessage, valid = props.valid, required = props.required, validityStyles = props.validityStyles;
  var tabIndex = getTabIndex(props.tabIndex, disabled);
  var target = React18.useRef(null);
  var elementRef = React18.useRef(null);
  var inputRef = React18.useRef(null);
  var selectRef = React18.useRef(null);
  var treeViewRef = React18.useRef(null);
  var skipFocusRef = React18.useRef(false);
  var _j = React18.useState(void 0), stateValue = _j[0], setStateValue = _j[1];
  var controlled = props.value !== void 0;
  var value = controlled ? props.value : stateValue !== void 0 ? stateValue : props.defaultValue;
  var hasValue = isPresent(value);
  var currentValueText = hasValue ? getItemValue(value, props.textField) : "";
  var validity = getValidity({ validationMessage, valid, required }, hasValue);
  var focus = React18.useCallback(function() {
    return elementRef.current && elementRef.current.focus();
  }, []);
  React18.useImperativeHandle(target, function() {
    return {
      props,
      element: elementRef.current,
      focus
    };
  });
  React18.useImperativeHandle(ref, function() {
    return target.current;
  });
  var dir = useRtl(elementRef, props.dir);
  var initialStyleWidth = popupSettings.width !== void 0 ? popupSettings.width : style.width !== void 0 ? style.width : defaultProps2.popupSettings.width;
  var popupWidth = useDropdownWidth(elementRef, initialStyleWidth);
  var popupStyles = __assign9({ width: popupWidth }, dir !== void 0 ? { direction: dir } : {});
  var _k = React18.useState(false), open = _k[0], setOpen = _k[1];
  var isOpen = opened !== void 0 ? opened : open;
  var _l = React18.useState(false), focused = _l[0], setFocused = _l[1];
  var _m = React18.useState(""), filter = _m[0], setFilter = _m[1];
  var setValidity = React18.useCallback(function() {
    if (selectRef.current && selectRef.current.setCustomValidity) {
      selectRef.current.setCustomValidity(validity.valid ? "" : validationMessage === void 0 ? VALIDATION_MESSAGE5 : validationMessage);
    }
  }, [validationMessage, validity]);
  React18.useEffect(setValidity);
  var openPopup = React18.useCallback(function(event) {
    if (!isOpen) {
      if (onOpen) {
        var openEvent = __assign9({}, event);
        onOpen.call(void 0, openEvent);
      }
      if (opened === void 0) {
        setOpen(true);
      }
    }
  }, [isOpen, opened, onOpen]);
  var closePopup = React18.useCallback(function(event) {
    if (isOpen) {
      if (onClose) {
        var closeEvent = __assign9({}, event);
        onClose.call(void 0, closeEvent);
      }
      if (opened === void 0) {
        setOpen(false);
      }
    }
  }, [isOpen, opened, onClose]);
  var onWrapperClick = React18.useCallback(function(event) {
    if (!event.isDefaultPrevented() && target.current) {
      setFocused(true);
      var ev = {
        syntheticEvent: event,
        nativeEvent: event.nativeEvent,
        target: target.current
      };
      (isOpen ? closePopup : openPopup)(ev);
    }
  }, [isOpen, opened, onOpen, onClose]);
  var switchFocus = React18.useCallback(function(focusFn) {
    skipFocusRef.current = true;
    focusFn();
    window.setTimeout(function() {
      return skipFocusRef.current = false;
    }, 0);
  }, []);
  var onWrapperKeyDown = React18.useCallback(function(event) {
    var keyCode = event.keyCode, altKey = event.altKey;
    var treeview = treeViewRef.current && treeViewRef.current.element;
    if (!target.current || event.isDefaultPrevented() && inputRef.current === event.target) {
      return;
    }
    var ev = {
      syntheticEvent: event,
      nativeEvent: event.nativeEvent,
      target: target.current
    };
    if (isOpen) {
      if (keyCode === Keys.esc || altKey && keyCode === Keys.up) {
        event.preventDefault();
        closePopup(ev);
      } else if (treeview && treeview.querySelector(".k-focus") && (keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end)) {
        if (keyCode === Keys.up && inputRef.current) {
          var items = Array.from(treeview.querySelectorAll(".k-treeview-item"));
          var focusedItem = __spreadArray2([], items, true).reverse().find(function(i) {
            return Boolean(i && i.querySelector(".k-focus"));
          });
          if (focusedItem && items.indexOf(focusedItem) === 0) {
            return switchFocus(function() {
              focusElement(inputRef.current);
            });
          }
        }
        switchFocus(noop);
      } else if (keyCode === Keys.down) {
        switchFocus(function() {
          focusElement(inputRef.current || treeview);
        });
      }
    } else {
      if (altKey && keyCode === Keys.down) {
        event.preventDefault();
        openPopup(ev);
      }
    }
  }, [isOpen, opened, onOpen, onClose]);
  var onInputKeyDown = React18.useCallback(function(event) {
    var keyCode = event.keyCode, altKey = event.altKey;
    if (altKey || keyCode !== Keys.up && keyCode !== Keys.down) {
      return;
    }
    event.preventDefault();
    switchFocus(keyCode === Keys.up ? function() {
      focusElement(elementRef.current);
    } : function() {
      focusElement(treeViewRef.current && treeViewRef.current.element);
    });
  }, []);
  var focusElement = React18.useCallback(function(element) {
    if (element) {
      switchFocus(function() {
        return element.focus();
      });
    }
  }, []);
  var onPopupOpened = React18.useCallback(function() {
    if (!focused && isOpen && !opened) {
      closePopup({ target: target.current });
    } else {
      if (props.filterable) {
        focusElement(inputRef.current);
      } else {
        focusElement(treeViewRef.current && treeViewRef.current.element);
      }
    }
  }, [onClose, props.filterable, focused, opened, isOpen]);
  var onPopupClosed = React18.useCallback(function() {
    if (focused) {
      focusElement(elementRef.current);
    }
  }, [focused]);
  var onFocus = React18.useCallback(function(event) {
    if (!focused && !skipFocusRef.current) {
      setFocused(true);
      if (props.onFocus && target.current) {
        var focusEvent = {
          syntheticEvent: event,
          nativeEvent: event.nativeEvent,
          target: target.current
        };
        props.onFocus.call(void 0, focusEvent);
      }
    }
  }, [focused, props.onFocus]);
  var onBlur = React18.useCallback(function(event) {
    if (focused && !skipFocusRef.current && target.current) {
      setFocused(false);
      var ev = {
        syntheticEvent: event,
        nativeEvent: event.nativeEvent,
        target: target.current
      };
      if (props.onBlur) {
        var focusEvent = __assign9({}, ev);
        props.onBlur.call(void 0, focusEvent);
      }
      closePopup(ev);
    }
  }, [focused, props.onBlur, isOpen, opened, onClose]);
  var onWrapperMouseDown = React18.useCallback(function() {
    if (focused) {
      switchFocus(noop);
    }
  }, [focused]);
  var changeValue = React18.useCallback(function(event, newValue, hierarchicalIndex) {
    if (props.onChange) {
      var changeEvent = __assign9({ value: newValue, level: hierarchicalIndex ? toLevel(hierarchicalIndex) : [] }, event);
      props.onChange.call(void 0, changeEvent);
    }
    if (!controlled) {
      setStateValue(newValue);
    }
  }, [props.onChange, controlled]);
  var onChange = React18.useCallback(function(event) {
    if (areSame(event.item, value, dataItemKey) || !target.current) {
      return;
    }
    var item = event.item, itemHierarchicalIndex = event.itemHierarchicalIndex, nativeEvent = event.nativeEvent, syntheticEvent = event.syntheticEvent;
    var ev = {
      syntheticEvent,
      nativeEvent,
      target: target.current
    };
    changeValue(ev, item, itemHierarchicalIndex);
    closePopup(ev);
  }, [controlled, value, props.onChange, dataItemKey, isOpen, opened, onClose]);
  var onClear = React18.useCallback(function(event) {
    if (!target.current) {
      return;
    }
    var ev = {
      syntheticEvent: event,
      nativeEvent: event.nativeEvent,
      target: target.current
    };
    changeValue(ev, null);
    closePopup(ev);
    event.preventDefault();
  }, [controlled, props.onChange, isOpen, opened, onClose]);
  var onExpand = React18.useCallback(function(event) {
    event.syntheticEvent.stopPropagation();
    if (props.onExpandChange && target.current) {
      var item = event.item, itemHierarchicalIndex = event.itemHierarchicalIndex, nativeEvent = event.nativeEvent, syntheticEvent = event.syntheticEvent;
      var expandEvent = {
        level: toLevel(itemHierarchicalIndex),
        item,
        nativeEvent,
        syntheticEvent,
        target: target.current
      };
      props.onExpandChange.call(void 0, expandEvent);
    }
  }, [props.onExpandChange]);
  var onFilterChange = React18.useCallback(function(event) {
    if (props.onFilterChange && target.current) {
      var filterDesc = { field: props.textField, operator: "contains", value: event.target.value };
      var ev = {
        filter: filterDesc,
        syntheticEvent: event,
        nativeEvent: event.nativeEvent,
        target: target.current
      };
      props.onFilterChange.call(void 0, ev);
      if (props.filter === void 0) {
        setFilter(event.target.value);
      }
    }
  }, [props.onFilterChange, props.filter, props.textField]);
  var treeViewData = React18.useMemo(function() {
    return controlled || !hasValue ? data : mapTree(data, subItemsField, function(item) {
      var _a3;
      return extendDataItem(item, subItemsField, (_a3 = {}, _a3[selectField] = areSame(item, value, dataItemKey), _a3));
    });
  }, [data, value, controlled, hasValue, selectField, subItemsField]);
  var NoData = props.listNoData || ListNoData;
  var ValueComponent = props.valueHolder || ValueHolder;
  var localization = useLocalization();
  var isValid = !validityStyles || validity.valid;
  var size = props.size, rounded = props.rounded, fillMode = props.fillMode;
  var dropdowntree = React18.createElement(
    "span",
    { className: classNames("k-dropdowntree k-picker", props.className, (_a2 = {}, _a2["k-picker-".concat(sizeMap6[size] || size)] = size, _a2["k-rounded-".concat(roundedMap6[rounded] || rounded)] = rounded, _a2["k-picker-".concat(fillMode)] = fillMode, _a2["k-focus"] = focused, _a2["k-invalid"] = !isValid, _a2["k-loading"] = props.loading, _a2["k-required"] = required, _a2["k-disabled"] = props.disabled, _a2)), tabIndex, accessKey: props.accessKey, id, style: label ? __assign9(__assign9({}, style), { width: void 0 }) : style, dir, ref: elementRef, onKeyDown: disabled ? void 0 : onWrapperKeyDown, onMouseDown: onWrapperMouseDown, onClick: disabled ? void 0 : onWrapperClick, onFocus, onBlur, role: "combobox", "aria-haspopup": "tree", "aria-expanded": isOpen, "aria-disabled": disabled, "aria-label": label, "aria-labelledby": props.ariaLabelledBy, "aria-describedby": props.ariaDescribedBy, "aria-required": required },
    React18.createElement(
      "span",
      { className: "k-input-inner" },
      React18.createElement(ValueComponent, { item: value }, currentValueText || placeholder)
    ),
    props.loading && React18.createElement(IconWrap, { className: "k-input-loading-icon", name: "loading" }),
    hasValue && !disabled && React18.createElement(
      "span",
      { onClick: onClear, className: "k-clear-value", title: localization.toLanguageString(clear, messages[clear]), role: "button", tabIndex: -1, onMouseDown: function(e) {
        return e.preventDefault();
      } },
      React18.createElement(IconWrap, { name: "x", icon: xIcon })
    ),
    React18.createElement(Button, { tabIndex: -1, type: "button", "aria-label": "select", className: "k-input-button", size, fillMode, themeColor: "base", rounded: null, icon: "caret-alt-down", svgIcon: caretAltDownIcon }),
    React18.createElement(
      "select",
      { name, ref: selectRef, tabIndex: -1, "aria-hidden": true, title: label, style: { opacity: 0, width: 1, border: 0, zIndex: -1, position: "absolute", left: "50%" } },
      React18.createElement("option", { value: props.valueMap ? props.valueMap.call(void 0, value) : value })
    ),
    React18.createElement(
      Popup,
      { className: classNames(popupSettings.className, { "k-rtl": dir === "rtl" }), popupClass: classNames(popupSettings.popupClass, "k-list-container", "k-dropdowntree-popup"), style: popupStyles, animate: popupSettings.animate, anchor: elementRef.current, show: isOpen, onOpen: onPopupOpened, onClose: onPopupClosed, appendTo: popupSettings.appendTo },
      props.filterable && React18.createElement(ListFilter_default, { value: props.filter === void 0 ? filter : props.filter, inputRef, onChange: onFilterChange, onKeyDown: onInputKeyDown, size, rounded, fillMode }),
      data.length > 0 ? React18.createElement(TreeView, { ref: treeViewRef, tabIndex, data: treeViewData, focusIdField: dataItemKey, textField: props.textField, selectField, expandField: props.expandField, childrenField: subItemsField, expandIcons: true, onItemClick: onChange, onExpandChange: onExpand, size, item: props.item }) : React18.createElement(NoData, null, localization.toLanguageString(nodata, messages[nodata]))
    )
  );
  return label ? React18.createElement(FloatingLabel, { label, editorValue: currentValueText, editorPlaceholder: placeholder, editorValid: isValid, editorDisabled: disabled, editorId: id, style: { width: style ? style.width : void 0 }, children: dropdowntree, dir }) : dropdowntree;
});
var propTypes2 = {
  opened: PropTypes7.bool,
  disabled: PropTypes7.bool,
  dir: PropTypes7.string,
  tabIndex: PropTypes7.number,
  accessKey: PropTypes7.string,
  data: PropTypes7.array,
  value: PropTypes7.any,
  valueMap: PropTypes7.func,
  placeholder: PropTypes7.string,
  dataItemKey: PropTypes7.string.isRequired,
  textField: PropTypes7.string.isRequired,
  selectField: PropTypes7.string,
  expandField: PropTypes7.string,
  subItemsField: PropTypes7.string,
  className: PropTypes7.string,
  style: PropTypes7.object,
  label: PropTypes7.string,
  validationMessage: PropTypes7.string,
  validityStyles: PropTypes7.bool,
  valid: PropTypes7.bool,
  required: PropTypes7.bool,
  name: PropTypes7.string,
  id: PropTypes7.string,
  ariaLabelledBy: PropTypes7.string,
  ariaDescribedBy: PropTypes7.string,
  filterable: PropTypes7.bool,
  filter: PropTypes7.string,
  loading: PropTypes7.bool,
  popupSettings: PropTypes7.shape({
    animate: PropTypes7.oneOfType([PropTypes7.bool, PropTypes7.shape({
      openDuration: PropTypes7.number,
      closeDuration: PropTypes7.number
    })]),
    popupClass: PropTypes7.string,
    className: PropTypes7.string,
    appendTo: PropTypes7.any,
    width: PropTypes7.oneOfType([PropTypes7.string, PropTypes7.number]),
    height: PropTypes7.oneOfType([PropTypes7.string, PropTypes7.number])
  }),
  onOpen: PropTypes7.func,
  onClose: PropTypes7.func,
  onFocus: PropTypes7.func,
  onBlur: PropTypes7.func,
  onChange: PropTypes7.func,
  onFilterChange: PropTypes7.func,
  onExpandChange: PropTypes7.func,
  item: PropTypes7.func,
  valueHolder: PropTypes7.func,
  listNoData: PropTypes7.func
};
DropDownTree.displayName = "KendoReactDropDownTree";
DropDownTree.defaultProps = defaultProps2;
DropDownTree.propTypes = propTypes2;

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiSelectTree/MultiSelectTree.js
var React19 = __toESM(require_react());
var PropTypes8 = __toESM(require_prop_types());
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var VALIDATION_MESSAGE6 = "Please select a value from the list!";
var sizeMap7 = kendoThemeMaps.sizeMap;
var roundedMap7 = kendoThemeMaps.roundedMap;
var toLevel2 = function(hierarchicalIndex) {
  return hierarchicalIndex.split("_").map(function(i) {
    return parseInt(i, 10);
  });
};
var getValidity2 = function(parameters, hasValue) {
  var validationMessage = parameters.validationMessage, valid = parameters.valid, required = parameters.required;
  return {
    customError: validationMessage !== void 0,
    valid: Boolean(valid !== void 0 ? valid : !required || hasValue),
    valueMissing: !hasValue
  };
};
var defaultProps3 = {
  checkField: "checkField",
  checkIndeterminateField: "checkIndeterminateField",
  subItemsField: "items",
  popupSettings: {
    animate: true,
    width: "200px",
    height: "200px"
  },
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  required: false,
  validityStyles: true
};
var MultiSelectTreePropsContext = createPropsContext();
var MultiSelectTree = React19.forwardRef(function(directProps, ref) {
  var _a2, _b;
  var props = usePropsContext(MultiSelectTreePropsContext, directProps);
  validatePackage(packageMetadata);
  var componentGuid = React19.useMemo(function() {
    return guid();
  }, []);
  var id = props.id || componentGuid;
  var _c = props.data, data = _c === void 0 ? [] : _c, dataItemKey = props.dataItemKey, _d = props.popupSettings, popupSettings = _d === void 0 ? {} : _d, _e = props.style, style = _e === void 0 ? {} : _e, opened = props.opened, disabled = props.disabled, _f = props.onOpen, onOpen = _f === void 0 ? noop : _f, _g = props.onClose, onClose = _g === void 0 ? noop : _g, placeholder = props.placeholder, label = props.label, name = props.name, _h = props.checkField, checkField = _h === void 0 ? defaultProps3.checkField : _h, _j = props.checkIndeterminateField, checkIndeterminateField = _j === void 0 ? defaultProps3.checkIndeterminateField : _j, _k = props.subItemsField, subItemsField = _k === void 0 ? defaultProps3.subItemsField : _k, validationMessage = props.validationMessage, valid = props.valid, tags = props.tags, value = props.value, _l = props.required, required = _l === void 0 ? defaultProps3.required : _l, _m = props.validityStyles, validityStyles = _m === void 0 ? defaultProps3.validityStyles : _m;
  var tabIndex = getTabIndex(props.tabIndex, disabled);
  var targetRef = React19.useRef(null);
  var elementRef = React19.useRef(null);
  var inputRef = React19.useRef(null);
  var selectRef = React19.useRef(null);
  var treeViewRef = React19.useRef(null);
  var skipFocusRef = React19.useRef(false);
  var tagsToRenderRef = React19.useRef([]);
  var popupRef = React19.useRef(null);
  var _o = React19.useState(), focusedTagState = _o[0], setFocusedTagState = _o[1];
  var _p = React19.useState(false), openState = _p[0], setOpenState = _p[1];
  var _q = React19.useState(false), focusedState = _q[0], setFocusedState = _q[1];
  var _r = React19.useState(""), filterState = _r[0], setFilterState = _r[1];
  var isOpen = opened !== void 0 ? opened : openState;
  var hasValue = Boolean(Array.isArray(value) && value.length);
  var validity = getValidity2({ validationMessage, valid, required }, hasValue);
  var dir = useRtl(elementRef, props.dir);
  var initialStyleWidth = popupSettings.width !== void 0 ? popupSettings.width : style.width !== void 0 ? style.width : defaultProps3.popupSettings.width;
  var popupWidth = useDropdownWidth(elementRef, initialStyleWidth);
  var popupStyles = __assign10({ width: popupWidth }, dir !== void 0 ? { direction: dir } : {});
  var focus = React19.useCallback(function() {
    return elementRef.current && elementRef.current.focus();
  }, []);
  tagsToRenderRef.current = tags === void 0 ? (value || []).map(function(item) {
    return { text: getItemValue(item, props.textField), data: [item] };
  }) : __spreadArray3([], tags, true);
  React19.useImperativeHandle(targetRef, function() {
    return {
      props,
      element: elementRef.current,
      focus
    };
  });
  React19.useImperativeHandle(ref, function() {
    return targetRef.current;
  });
  var setValidity = React19.useCallback(function() {
    if (selectRef.current && selectRef.current.setCustomValidity) {
      selectRef.current.setCustomValidity(validity.valid ? "" : validationMessage === void 0 ? VALIDATION_MESSAGE6 : validationMessage);
    }
  }, [validationMessage, validity]);
  React19.useEffect(setValidity);
  React19.useEffect(function() {
    if (popupRef.current && isOpen) {
      popupRef.current.setPosition(popupRef.current._popup);
    }
  }, [value, isOpen]);
  var changeValue = React19.useCallback(function(event, relatedItems, operation) {
    if (props.onChange) {
      var changeEvent = __assign10({ items: relatedItems, operation }, event);
      props.onChange.call(void 0, changeEvent);
    }
  }, [props.onChange]);
  var onChange = React19.useCallback(function(event) {
    if (areSame(event.item, value, dataItemKey) || !targetRef.current) {
      return;
    }
    var item = event.item, nativeEvent = event.nativeEvent, syntheticEvent = event.syntheticEvent;
    var ev = {
      syntheticEvent,
      nativeEvent,
      target: targetRef.current
    };
    changeValue(ev, [item], "toggle");
  }, [value, dataItemKey, changeValue]);
  var openPopup = React19.useCallback(function(event) {
    if (!isOpen) {
      if (onOpen) {
        var openEvent = __assign10({}, event);
        onOpen.call(void 0, openEvent);
      }
      if (opened === void 0) {
        setOpenState(true);
      }
    }
  }, [isOpen, opened, onOpen]);
  var closePopup = React19.useCallback(function(event) {
    if (isOpen) {
      if (onClose) {
        var closeEvent = __assign10({}, event);
        onClose.call(void 0, closeEvent);
      }
      if (opened === void 0) {
        setOpenState(false);
      }
    }
  }, [isOpen, opened, onClose]);
  var switchFocus = React19.useCallback(function(focusFn) {
    skipFocusRef.current = true;
    focusFn();
    window.setTimeout(function() {
      return skipFocusRef.current = false;
    }, 0);
  }, []);
  var focusElement = React19.useCallback(function(element) {
    if (element) {
      switchFocus(function() {
        return element.focus();
      });
    }
  }, [switchFocus]);
  var onPopupOpened = React19.useCallback(function() {
    if (!focusedState && isOpen) {
      closePopup({ target: targetRef.current });
    } else {
      if (props.filterable) {
        focusElement(inputRef.current);
      } else {
        focusElement(treeViewRef.current && treeViewRef.current.element);
      }
    }
  }, [focusedState, isOpen, focusElement, closePopup, props.filterable]);
  var onPopupClosed = React19.useCallback(function() {
    if (focusedState) {
      focusElement(elementRef.current);
    }
  }, [focusedState, focusElement]);
  var onFocus = React19.useCallback(function(event) {
    if (!focusedState && !skipFocusRef.current) {
      setFocusedState(true);
      if (props.onFocus && targetRef.current) {
        var focusEvent = {
          syntheticEvent: event,
          nativeEvent: event.nativeEvent,
          target: targetRef.current
        };
        props.onFocus.call(void 0, focusEvent);
      }
    }
  }, [focusedState, props.onFocus]);
  var onBlur = React19.useCallback(function(event) {
    if (focusedState && !skipFocusRef.current && targetRef.current) {
      setFocusedState(false);
      var ev = {
        syntheticEvent: event,
        nativeEvent: event.nativeEvent,
        target: targetRef.current
      };
      if (props.onBlur) {
        var focusEvent = __assign10({}, ev);
        props.onBlur.call(void 0, focusEvent);
      }
      closePopup(ev);
    }
  }, [focusedState, props.onBlur, isOpen, opened, onClose]);
  var onWrapperMouseDown = React19.useCallback(function() {
    if (focusedState) {
      switchFocus(noop);
    }
  }, [focusedState, switchFocus]);
  var onWrapperClick = React19.useCallback(function(event) {
    if (!event.isDefaultPrevented() && targetRef.current) {
      setFocusedState(true);
      var ev = {
        syntheticEvent: event,
        nativeEvent: event.nativeEvent,
        target: targetRef.current
      };
      if (!isOpen) {
        openPopup(ev);
      }
    }
  }, [isOpen, openPopup]);
  var onWrapperKeyDown = React19.useCallback(function(event) {
    var keyCode = event.keyCode, altKey = event.altKey;
    var treeviewElement = treeViewRef.current && treeViewRef.current.element;
    if (!targetRef.current || event.isDefaultPrevented() && inputRef.current === event.target) {
      return;
    }
    var ev = {
      syntheticEvent: event,
      nativeEvent: event.nativeEvent,
      target: targetRef.current
    };
    if (value && value.length > 0 && (keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end || keyCode === Keys.delete)) {
      var tagsToRender = tagsToRenderRef.current;
      var focusedIndex = focusedTagState ? tagsToRender.findIndex(function(t) {
        return matchTags(t, focusedTagState, dataItemKey);
      }) : -1;
      var newFocusedTag = void 0;
      var hasFocused = focusedIndex !== -1;
      if (keyCode === Keys.left) {
        if (hasFocused) {
          focusedIndex = Math.max(0, focusedIndex - 1);
        } else {
          focusedIndex = tagsToRender.length - 1;
        }
        newFocusedTag = tagsToRender[focusedIndex];
      } else if (keyCode === Keys.right) {
        if (focusedIndex === tagsToRender.length - 1) {
          newFocusedTag = void 0;
        } else if (hasFocused) {
          focusedIndex = Math.min(tagsToRender.length - 1, focusedIndex + 1);
          newFocusedTag = tagsToRender[focusedIndex];
        }
      } else if (keyCode === Keys.home) {
        newFocusedTag = tagsToRender[0];
      } else if (keyCode === Keys.end) {
        newFocusedTag = tagsToRender[tagsToRender.length - 1];
      } else if (keyCode === Keys.delete) {
        if (hasFocused) {
          changeValue(ev, tagsToRender[focusedIndex].data, "delete");
        }
      }
      if (newFocusedTag !== focusedTagState) {
        setFocusedTagState(newFocusedTag);
      }
    }
    if (isOpen) {
      if (keyCode === Keys.esc || altKey && keyCode === Keys.up) {
        event.preventDefault();
        closePopup(ev);
      } else if (treeviewElement && treeviewElement.querySelector(".k-focus") && (keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.left || keyCode === Keys.right || keyCode === Keys.home || keyCode === Keys.end)) {
        if (keyCode === Keys.up && inputRef.current) {
          var items = Array.from(treeviewElement.querySelectorAll(".k-treeview-item"));
          var focusedItem = __spreadArray3([], items, true).reverse().find(function(i) {
            return Boolean(i && i.querySelector(".k-focus"));
          });
          if (focusedItem && items.indexOf(focusedItem) === 0) {
            return switchFocus(function() {
              focusElement(inputRef.current);
            });
          }
        }
        switchFocus(noop);
      } else if (keyCode === Keys.down) {
        switchFocus(function() {
          focusElement(inputRef.current || treeviewElement);
        });
      }
    } else {
      if (altKey && keyCode === Keys.down) {
        event.preventDefault();
        openPopup(ev);
      }
    }
  }, [isOpen, closePopup, focusElement, switchFocus, openPopup, focusedTagState, dataItemKey, value, changeValue]);
  var onInputKeyDown = React19.useCallback(function(event) {
    var keyCode = event.keyCode, altKey = event.altKey;
    if (altKey || keyCode !== Keys.up && keyCode !== Keys.down) {
      return;
    }
    event.preventDefault();
    switchFocus(keyCode === Keys.up ? function() {
      focusElement(elementRef.current);
    } : function() {
      focusElement(treeViewRef.current && treeViewRef.current.element);
    });
  }, [focusElement, switchFocus]);
  var onClear = React19.useCallback(function(event) {
    if (!targetRef.current) {
      return;
    }
    var ev = {
      syntheticEvent: event,
      nativeEvent: event.nativeEvent,
      target: targetRef.current
    };
    changeValue(ev, [], "clear");
    closePopup(ev);
    event.preventDefault();
  }, [changeValue, closePopup]);
  var onTagDelete = React19.useCallback(function(itemsToRemove, event) {
    closePopup({ target: targetRef.current });
    if (!focusedState) {
      focusElement(inputRef.current);
    }
    changeValue({
      syntheticEvent: event,
      nativeEvent: event.nativeEvent,
      target: targetRef.current
    }, itemsToRemove, "delete");
  }, [changeValue, closePopup, focusElement, focusedState]);
  var onExpand = React19.useCallback(function(event) {
    if (props.onExpandChange && targetRef.current) {
      var item = event.item, itemHierarchicalIndex = event.itemHierarchicalIndex, nativeEvent = event.nativeEvent, syntheticEvent = event.syntheticEvent;
      var expandEvent = {
        level: toLevel2(itemHierarchicalIndex),
        item,
        nativeEvent,
        syntheticEvent,
        target: targetRef.current
      };
      props.onExpandChange.call(void 0, expandEvent);
    }
  }, [props.onExpandChange]);
  var onFilterChange = React19.useCallback(function(event) {
    if (props.onFilterChange && targetRef.current) {
      var filterDesc = { field: props.textField, operator: "contains", value: event.target.value };
      var ev = {
        filter: filterDesc,
        syntheticEvent: event,
        nativeEvent: event.nativeEvent,
        target: targetRef.current
      };
      props.onFilterChange.call(void 0, ev);
      if (props.filter === void 0) {
        setFilterState(event.target.value);
      }
    }
  }, [props.onFilterChange, props.filter, props.textField]);
  var NoData = props.listNoData || ListNoData;
  var localization = useLocalization();
  var isValid = !validityStyles || validity.valid;
  var size = props.size, rounded = props.rounded, fillMode = props.fillMode;
  var multiselecttree = React19.createElement(
    "span",
    { className: classNames("k-multiselect k-input", props.className, (_a2 = {}, _a2["k-input-".concat(sizeMap7[size] || size)] = size, _a2["k-rounded-".concat(roundedMap7[rounded] || rounded)] = rounded, _a2["k-input-".concat(fillMode)] = fillMode, _a2["k-focus"] = focusedState && !disabled, _a2["k-invalid"] = !isValid, _a2["k-disabled"] = disabled, _a2["k-loading"] = props.loading, _a2["k-required"] = required, _a2)), tabIndex, accessKey: props.accessKey, id, style: label ? __assign10(__assign10({}, style), { width: void 0 }) : style, dir, ref: elementRef, onKeyDown: disabled ? void 0 : onWrapperKeyDown, onMouseDown: onWrapperMouseDown, onFocus, onBlur, role: "combobox", "aria-haspopup": "true", "aria-expanded": isOpen, "aria-disabled": disabled, "aria-label": label, "aria-labelledby": props.ariaLabelledBy, "aria-describedby": props.ariaDescribedBy, "aria-required": props.required, onClick: disabled ? void 0 : onWrapperClick },
    React19.createElement("div", { id: "tagslist-" + id, className: classNames("k-input-values k-chip-list k-selection-multiple", (_b = {}, _b["k-chip-list-".concat(sizeMap7[size] || size)] = size, _b)) }, tagsToRenderRef.current.length > 0 && React19.createElement(TagList_default, { tag: props.tag, onTagDelete, data: tagsToRenderRef.current, guid: id, focused: focusedTagState ? tagsToRenderRef.current.find(function(t) {
      return matchTags(t, focusedTagState, dataItemKey);
    }) : void 0, size })),
    !hasValue && React19.createElement(
      "span",
      { className: "k-input-inner", role: "combobox", tabIndex, "aria-expanded": isOpen, "aria-describedby": "tagslist-" + id, "aria-label": props.ariaLabelledBy },
      React19.createElement("span", { className: "k-input-value-text" }, " ")
    ),
    props.loading && React19.createElement(IconWrap, { className: "k-input-loading-icon", name: "loading" }),
    hasValue && !disabled && React19.createElement(ClearButton_default, { onClick: onClear }),
    React19.createElement(
      "select",
      { name, ref: selectRef, tabIndex: -1, "aria-hidden": true, title: label, style: { opacity: 0, width: 1, border: 0, zIndex: -1, position: "absolute", left: "50%" } },
      React19.createElement("option", { value: props.valueMap ? props.valueMap.call(void 0, value) : value })
    ),
    React19.createElement(
      Popup,
      { popupClass: classNames(popupSettings.popupClass, "k-list-container", "k-multiselecttree-popup"), className: classNames(popupSettings.className, { "k-rtl": dir === "rtl" }), style: popupStyles, animate: popupSettings.animate, anchor: elementRef.current, show: isOpen, onOpen: onPopupOpened, onClose: onPopupClosed, appendTo: popupSettings.appendTo, ref: popupRef },
      props.filterable && React19.createElement(ListFilter_default, { value: props.filter === void 0 ? filterState : props.filter, inputRef, onChange: onFilterChange, onKeyDown: onInputKeyDown, tabIndex, size, rounded, fillMode }),
      data.length > 0 ? React19.createElement(TreeView, { ref: treeViewRef, tabIndex, data, focusIdField: dataItemKey, textField: props.textField, checkField, checkIndeterminateField, expandField: props.expandField, childrenField: subItemsField, expandIcons: true, onItemClick: onChange, onCheckChange: onChange, onExpandChange: onExpand, checkboxes: true, size, item: props.item }) : React19.createElement(NoData, null, localization.toLanguageString(nodata, messages[nodata]))
    )
  );
  return label ? React19.createElement(FloatingLabel, { label, editorValue: hasValue, editorPlaceholder: placeholder, editorValid: isValid, editorDisabled: disabled, editorId: id, style: { width: style ? style.width : void 0 }, children: multiselecttree, dir }) : multiselecttree;
});
var propTypes3 = {
  opened: PropTypes8.bool,
  disabled: PropTypes8.bool,
  dir: PropTypes8.string,
  tabIndex: PropTypes8.number,
  accessKey: PropTypes8.string,
  data: PropTypes8.array,
  value: PropTypes8.any,
  valueMap: PropTypes8.func,
  placeholder: PropTypes8.string,
  dataItemKey: PropTypes8.string.isRequired,
  textField: PropTypes8.string.isRequired,
  checkField: PropTypes8.string,
  checkIndeterminateField: PropTypes8.string,
  expandField: PropTypes8.string,
  subItemsField: PropTypes8.string,
  className: PropTypes8.string,
  style: PropTypes8.object,
  label: PropTypes8.string,
  validationMessage: PropTypes8.string,
  validityStyles: PropTypes8.bool,
  valid: PropTypes8.bool,
  required: PropTypes8.bool,
  name: PropTypes8.string,
  id: PropTypes8.string,
  ariaLabelledBy: PropTypes8.string,
  ariaDescribedBy: PropTypes8.string,
  filterable: PropTypes8.bool,
  filter: PropTypes8.string,
  loading: PropTypes8.bool,
  tags: PropTypes8.arrayOf(PropTypes8.shape({
    text: PropTypes8.string,
    data: PropTypes8.arrayOf(PropTypes8.any)
  })),
  popupSettings: PropTypes8.shape({
    animate: PropTypes8.oneOfType([PropTypes8.bool, PropTypes8.shape({
      openDuration: PropTypes8.number,
      closeDuration: PropTypes8.number
    })]),
    popupClass: PropTypes8.string,
    className: PropTypes8.string,
    appendTo: PropTypes8.any,
    width: PropTypes8.oneOfType([PropTypes8.string, PropTypes8.number]),
    height: PropTypes8.oneOfType([PropTypes8.string, PropTypes8.number])
  }),
  onOpen: PropTypes8.func,
  onClose: PropTypes8.func,
  onFocus: PropTypes8.func,
  onBlur: PropTypes8.func,
  onChange: PropTypes8.func,
  onFilterChange: PropTypes8.func,
  onExpandChange: PropTypes8.func,
  item: PropTypes8.func,
  listNoData: PropTypes8.func
};
MultiSelectTree.displayName = "KendoReactMultiSelectTree";
MultiSelectTree.defaultProps = defaultProps3;
MultiSelectTree.propTypes = propTypes3;

// node_modules/@progress/kendo-react-dropdowns/dist/es/MultiSelectTree/utils.js
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var getValueMap = function(value, idGetter) {
  var map = {};
  if (value && value.length) {
    value.forEach(function(item) {
      map[idGetter(item)] = true;
    });
  }
  return map;
};
var getMultiSelectTreeValue = function(data, options) {
  var items = options.items, dataItemKey = options.dataItemKey, value = options.value, _a2 = options.subItemsField, subItemsField = _a2 === void 0 ? "items" : _a2, operation = options.operation;
  var idGetter = getter(dataItemKey);
  var valueMap = getValueMap(value, idGetter);
  if (operation === "clear") {
    return [];
  } else if (operation === "delete") {
    var deletedItemsMap_1 = getValueMap(items, idGetter);
    return value.filter(function(item) {
      return !deletedItemsMap_1[idGetter(item)];
    });
  }
  var selectedItem = items[0];
  var selectedId = idGetter(selectedItem);
  var subItemGetter = getter(subItemsField);
  var stack = __spreadArray4([], data, true);
  var context = [];
  var parents = [];
  var foundItem;
  while (stack.length) {
    var currentItem = stack.pop();
    if (selectedId === idGetter(currentItem)) {
      parents = context.map(function(contextItem) {
        return contextItem.item;
      });
      foundItem = currentItem;
      break;
    } else {
      if (context && context.length && context[context.length - 1].parentPosition === stack.length) {
        context.pop();
      }
      var subItems = subItemGetter(currentItem);
      if (subItems && subItems.length) {
        context.push({ item: currentItem, parentPosition: stack.length });
        stack.push.apply(stack, subItems);
      }
    }
  }
  var childrenStack = __spreadArray4([], subItemGetter(foundItem) || [], true);
  var children = [];
  while (childrenStack.length) {
    var currentItem = childrenStack.pop();
    children.push(currentItem);
    var subItems = subItemGetter(currentItem);
    if (subItems && subItems.length) {
      childrenStack.push.apply(childrenStack, subItems);
    }
  }
  var isChecked = !valueMap[selectedId];
  var newValue = [];
  if (isChecked) {
    newValue.push.apply(newValue, value);
    newValue.push(foundItem);
    newValue.push.apply(newValue, children.filter(function(item) {
      return !valueMap[idGetter(item)];
    }));
    var parentCandidates = parents.filter(function(item) {
      return !valueMap[idGetter(item)];
    });
    var newValueMap_1 = getValueMap(newValue, idGetter);
    for (var i = parentCandidates.length - 1; i > -1; i--) {
      var candidate = parentCandidates[i];
      var subItems = subItemGetter(candidate);
      var checkedChildrenLength = subItems.filter(function(item) {
        return newValueMap_1[idGetter(item)];
      }).length;
      if (checkedChildrenLength < subItems.length) {
        break;
      } else {
        newValue.push(candidate);
        newValueMap_1[idGetter(candidate)] = true;
      }
    }
  } else {
    var foundId_1 = idGetter(foundItem);
    var childrenMap_1 = getValueMap(children, idGetter);
    var parentsMap_1 = getValueMap(parents, idGetter);
    newValue.push.apply(newValue, value.filter(function(item) {
      var itemId = idGetter(item);
      return !childrenMap_1[itemId] && foundId_1 !== itemId && !parentsMap_1[itemId];
    }));
  }
  return newValue;
};

export {
  DropDownListPropsContext,
  DropDownList,
  ComboBoxPropsContext,
  ComboBox,
  AutoCompletePropsContext,
  AutoComplete,
  MultiSelectPropsContext,
  MultiSelect,
  MultiColumnComboBoxPropsContext,
  MultiColumnComboBox,
  DropDownTreePropsContext,
  DropDownTree,
  MultiSelectTreePropsContext,
  MultiSelectTree,
  getValueMap,
  getMultiSelectTreeValue
};
//# sourceMappingURL=chunk-BWCWHVIM.js.map
