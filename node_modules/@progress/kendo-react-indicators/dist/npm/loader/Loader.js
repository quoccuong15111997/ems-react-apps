"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loader = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
var SEGMENT_COUNT = {
    'pulsing': 2,
    'infinite-spinner': 3,
    'converging-spinner': 4
};
var TYPE_CLASSES = {
    'pulsing': 'k-loader-pulsing-2',
    'infinite-spinner': 'k-loader-spinner-3',
    'converging-spinner': 'k-loader-spinner-4'
};
/**
 * Represents the [KendoReact Loader component]({% slug overview_loader %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <Loader />
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.Loader = React.forwardRef(function (props, target) {
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    var className = props.className, style = props.style;
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    React.useImperativeHandle(target, function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); });
    var size = React.useMemo(function () { return props.size || defaultProps.size; }, [props.size]);
    var themeColor = React.useMemo(function () { return props.themeColor || defaultProps.themeColor; }, [props.themeColor]);
    var type = React.useMemo(function () { return props.type || defaultProps.type; }, [props.type]);
    var LoaderClasses = React.useMemo(function () { return (0, kendo_react_common_1.classNames)('k-loader', {
        'k-loader-sm': size === 'small',
        'k-loader-md': size === 'medium',
        'k-loader-lg': size === 'large',
        'k-loader-primary': themeColor === 'primary',
        'k-loader-secondary': themeColor === 'secondary',
        'k-loader-tertiary': themeColor === 'tertiary',
        'k-loader-info': themeColor === 'info',
        'k-loader-success': themeColor === 'success',
        'k-loader-warning': themeColor === 'warning',
        'k-loader-error': themeColor === 'error',
        'k-loader-dark': themeColor === 'dark',
        'k-loader-light': themeColor === 'light',
        'k-loader-inverse': themeColor === 'inverse'
    }, className, TYPE_CLASSES[type]); }, [
        size, themeColor, className, type
    ]);
    var spans = new Array(SEGMENT_COUNT[type]);
    spans.fill(0, 0, SEGMENT_COUNT[type]);
    return (React.createElement("div", { className: LoaderClasses, style: style },
        React.createElement("div", { className: "k-loader-canvas" }, spans.map(function (_, i) { return React.createElement("span", { key: i, className: "k-loader-segment" }); }))));
});
exports.Loader.propTypes = {
    className: PropTypes.string,
    style: PropTypes.object,
    type: PropTypes.oneOf([
        'pulsing',
        'infinite-spinner',
        'converging-spinner'
    ]),
    size: PropTypes.oneOf(['small', 'medium', 'large']),
    themeColor: PropTypes.oneOf([
        'primary', 'secondary', 'tertiary',
        'info', 'success', 'warning',
        'error', 'dark', 'light', 'inverse'
    ])
};
var defaultProps = {
    size: 'medium',
    themeColor: 'primary',
    type: 'pulsing'
};
exports.Loader.defaultProps = defaultProps;
exports.Loader.displayName = 'KendoLoader';
