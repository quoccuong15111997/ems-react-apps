"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadgeContainer = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * Represents the [KendoReact BadgeContainer component]({% slug overview_badge %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <BadgeContainer>
 *           <Avatar shape="circle" type="image">
 *               <img src={'https://demos.telerik.com/kendo-ui/content/web/Customers/RICSU.jpg'} />
 *           </Avatar>
 *           <Badge cornerPlacement="edge" position="topEnd" shape="dot">
 *       </BadgeContainer>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.BadgeContainer = React.forwardRef(function (props, target) {
    var children = props.children, className = props.className, style = props.style;
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    React.useImperativeHandle(target, function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); });
    var dir = (0, kendo_react_common_1.useDir)(elementRef, props.dir);
    var containerClasses = React.useMemo(function () { return (0, kendo_react_common_1.classNames)('k-badge-container', className); }, [className]);
    var containerStyles = React.useMemo(function () { return (__assign({ display: 'inline-block' }, style)); }, [style]);
    return (React.createElement("span", { className: containerClasses, style: containerStyles, dir: dir }, children));
});
exports.BadgeContainer.propTypes = {
    className: PropTypes.string,
    dir: PropTypes.string,
    style: PropTypes.object
};
exports.BadgeContainer.displayName = 'KendoBadgeContainer';
