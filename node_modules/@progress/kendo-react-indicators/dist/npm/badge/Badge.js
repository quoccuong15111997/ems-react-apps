"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Badge = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
/**
 * Represents the [KendoReact Badge component]({% slug overview_badge %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <Badge>99+</Badge>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.Badge = React.forwardRef(function (props, target) {
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    var children = props.children, className = props.className, style = props.style;
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    React.useImperativeHandle(target, function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); });
    var dir = (0, kendo_react_common_1.useDir)(elementRef, props.dir);
    var size = React.useMemo(function () {
        if (props.size === null) {
            return null;
        }
        else {
            return props.size || defaultProps.size;
        }
    }, [props.size]);
    var fillMode = React.useMemo(function () {
        if (props.fillMode === null) {
            return null;
        }
        else if (props.fill === null) {
            return null;
        }
        else {
            return props.fill || props.fillMode || defaultProps.fillMode;
        }
    }, [props.fillMode, props.fill]);
    var themeColor = React.useMemo(function () { return props.themeColor || defaultProps.themeColor; }, [props.themeColor]);
    var rounded = React.useMemo(function () {
        if (props.rounded !== undefined) {
            return props.rounded || 'medium';
        }
        else if (props.shape !== undefined) {
            switch (props.shape) {
                case 'rounded':
                    return 'md';
                case 'rectangle':
                    return null;
                default:
                    return 'full';
            }
        }
        return 'medium';
    }, [props.rounded, props.shape]);
    var _a = props.cutoutBorder, cutoutBorder = _a === void 0 ? defaultProps.cutoutBorder : _a, _b = props.position, position = _b === void 0 ? defaultProps.position : _b, _c = props.align, align = _c === void 0 ? defaultProps.align : _c;
    var badgeClasses = React.useMemo(function () {
        var _a;
        return (0, kendo_react_common_1.classNames)('k-badge', (_a = {
                'k-badge-sm': size === 'small',
                'k-badge-md': size === 'medium',
                'k-badge-lg': size === 'large'
            },
            _a["k-badge-".concat(fillMode)] = fillMode,
            _a["k-badge-".concat(fillMode, "-").concat(themeColor)] = Boolean(fillMode && themeColor),
            _a["k-rounded-".concat(kendo_react_common_1.kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded,
            _a['k-badge-border-cutout'] = cutoutBorder,
            _a["k-badge-".concat(position)] = position,
            _a['k-top-start'] = align.vertical === 'top' && align.horizontal === 'start',
            _a['k-top-end'] = align.vertical === 'top' && align.horizontal === 'end',
            _a['k-bottom-start'] = align.vertical === 'bottom' && align.horizontal === 'start',
            _a['k-bottom-end'] = align.vertical === 'bottom' && align.horizontal === 'end',
            _a), className);
    }, [
        size, fillMode, themeColor,
        rounded, cutoutBorder, align,
        position, className
    ]);
    return (React.createElement("span", { className: badgeClasses, style: style, dir: dir }, children));
});
exports.Badge.propTypes = {
    className: PropTypes.string,
    dir: PropTypes.string,
    style: PropTypes.object,
    align: PropTypes.shape({
        vertical: PropTypes.oneOf(['top', 'bottom']),
        horizontal: PropTypes.oneOf(['start', 'end'])
    }),
    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
    fillMode: PropTypes.oneOf([null, 'solid', 'outline']),
    fill: PropTypes.oneOf([null, 'solid', 'outline']),
    themeColor: PropTypes.oneOf([null,
        'primary', 'secondary', 'tertiary',
        'info', 'success', 'warning',
        'error', 'dark', 'light', 'inverse', 'inherit'
    ]),
    shape: PropTypes.oneOf(['circle', 'rectangle', 'rounded', 'dot', 'pill']),
    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),
    position: PropTypes.oneOf(['edge', 'outside', 'inside']),
    cutoutBorder: PropTypes.bool
};
var defaultProps = {
    size: 'medium',
    fillMode: 'solid',
    themeColor: 'primary',
    position: 'edge',
    align: { vertical: 'top', horizontal: 'end' },
    cutoutBorder: false
};
exports.Badge.defaultProps = defaultProps;
exports.Badge.displayName = 'KendoBadge';
