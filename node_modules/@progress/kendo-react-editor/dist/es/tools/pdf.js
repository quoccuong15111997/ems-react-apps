var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Button } from '@progress/kendo-react-buttons';
import { useLocalization } from '@progress/kendo-react-intl';
import { savePDF } from '@progress/kendo-react-pdf';
import { onDownPreventDefault } from './utils';
import { messages } from './../messages';
import { EditorToolsSettings } from './../config/toolsSettings';
var pdf = EditorToolsSettings.pdf, defaultSavePdfOptions = EditorToolsSettings.savePdfOptions;
/**
 * @hidden
 */
export var Pdf = function (props) {
    var view = props.view, render = props.render, _a = props.settings, settings = _a === void 0 ? pdf : _a, savePdfOptions = props.savePdfOptions, savePdfCallback = props.savePdfCallback, buttonProps = __rest(props, ["view", "render", "settings", "savePdfOptions", "savePdfCallback"]);
    var titleKey = settings.messages.title;
    var onClick = React.useCallback(function () {
        if (view) {
            savePDF(view.dom, __assign(__assign({}, defaultSavePdfOptions), (savePdfOptions || {})), savePdfCallback);
        }
    }, [view, savePdfOptions, savePdfCallback]);
    var button = (React.createElement(Button, __assign({ onClick: onClick, title: useLocalization().toLanguageString(titleKey, messages[titleKey]) }, onDownPreventDefault, settings.props, buttonProps)));
    return (render ? render.call(undefined, button, { view: view }) : button);
};
