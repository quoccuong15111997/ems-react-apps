"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridToolbar = void 0;
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * Represents the GridToolbar component.
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    state = {
 *       data: [
 *            {'Column1':'A1', 'Column2':'A2'},
 *            {'Column1':'B1', 'Column2':'B2'},
 *            {'Column1':'C1', 'Column2':'C2'}
 *        ]
 *    }
 *
 *    customClick = () => {
 *        alert("Custom handler in custom toolbar");
 *    }
 *    render() {
 *        return (
 *           <Grid data={this.state.data}>
 *                <GridToolbar>
 *                    <button
 *                        title="Click"
 *                        className="k-button k-primary"
 *                        onClick={this.customClick}
 *                    >Click
 *                    </button>
 *                </GridToolbar>
 *            </Grid>
 *        );
 *    }
 * }
 * ReactDOM.render(
 *    <App />,
 *    document.querySelector('my-app')
 * );
 * ```
 */
var GridToolbar = /** @class */ (function (_super) {
    __extends(GridToolbar, _super);
    function GridToolbar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     */
    GridToolbar.prototype.render = function () {
        var _a;
        return (React.createElement("div", { className: (0, kendo_react_common_1.classNames)('k-toolbar k-grid-toolbar', (_a = {
                    'k-toolbar-md': !this.props.size
                },
                _a["k-toolbar-".concat(kendo_react_common_1.kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size,
                _a), this.props.className) }, this.props.children));
    };
    /**
     * @hidden
     */
    GridToolbar.displayName = 'KendoReactGridToolbar';
    return GridToolbar;
}(React.Component));
exports.GridToolbar = GridToolbar;
