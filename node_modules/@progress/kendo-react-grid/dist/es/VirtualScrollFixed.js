import * as React from 'react';
/**
 * @hidden
 */
var RowHeightService = /** @class */ (function () {
    function RowHeightService(total, rowHeight, detailRowHeight, data) {
        if (total === void 0) { total = 0; }
        this.total = total;
        this.offsets = [];
        this.heights = [];
        var agg = 0;
        for (var idx = 0; idx < total; idx++) {
            this.offsets.push(agg);
            var currHeight = (data && data[idx].expanded && data[idx].rowType === 'data') ? detailRowHeight : rowHeight;
            agg += currHeight;
            this.heights.push(currHeight);
        }
    }
    RowHeightService.prototype.height = function (rowIndex) {
        return this.heights[rowIndex];
    };
    RowHeightService.prototype.index = function (position) {
        if (position < 0) {
            return undefined;
        }
        var result = this.offsets.reduce(function (prev, current, idx) {
            if (prev !== undefined) {
                return prev;
            }
            else if (current === position) {
                return idx;
            }
            else if (current > position) {
                return idx - 1;
            }
            return undefined;
        }, undefined);
        return result === undefined ? this.total - 1 : result;
    };
    RowHeightService.prototype.offset = function (rowIndex) {
        return this.offsets[rowIndex];
    };
    RowHeightService.prototype.totalHeight = function () {
        var lastOffset = this.offsets[this.offsets.length - 1];
        var lastHeight = this.heights[this.heights.length - 1];
        return lastOffset + lastHeight;
        // return this.heights.reduce((prev, curr) => prev + curr, 0);
    };
    return RowHeightService;
}());
export { RowHeightService };
/**
 * @hidden
 */
var VirtualScrollFixed = /** @class */ (function () {
    function VirtualScrollFixed(_cached) {
        this.table = null;
        this.containerHeight = 0;
        this.topCacheCount = 0;
        this.attendedSkip = 0;
        this.propsSkip = 0;
        this.total = 0;
        this.scrollableVirtual = false;
        this.realSkip = 0;
        this.pageSize = 0;
        this.PageChange = null;
        this.tableBodyRef = React.createRef();
        this.fixedScroll = false;
        this.askedSkip = undefined;
        this.containerRef = React.createRef();
        this.tableTransform = '';
        this.scrollSyncing = false;
        this.lastLoaded = 0;
        this.firstLoaded = 0;
        this.lastScrollTop = 0;
        this.reactVersion = Number.parseFloat(React.version);
        this.firstLoaded = this.pageSize;
        this.lastLoaded = this.realSkip + this.pageSize;
        this.scrollHandler = this.scrollHandler.bind(this);
    }
    Object.defineProperty(VirtualScrollFixed.prototype, "container", {
        get: function () {
            return this.containerRef.current;
        },
        enumerable: false,
        configurable: true
    });
    VirtualScrollFixed.prototype.translate = function (dY, forceSet) {
        if (this.scrollableVirtual && this.table) {
            if (this.reactVersion <= 17 || forceSet) {
                this.table.style.transform = 'translateY(' + dY + 'px)';
            }
            else {
                this.tableTransform = 'translateY(' + dY + 'px)';
            }
        }
    };
    VirtualScrollFixed.prototype.changePage = function (skip, e) {
        if (this.PageChange) {
            this.PageChange({ skip: Math.max(0, skip), take: this.pageSize }, e);
        }
    };
    VirtualScrollFixed.prototype.reset = function () {
        this.scrollSyncing = true;
        if (this.fixedScroll) {
            return;
        }
        if (this.container) {
            this.container.scrollTop = 0;
        }
        this.translate(0, true);
    };
    VirtualScrollFixed.prototype.scrollHandler = function (e) {
        if (!this.scrollableVirtual || !this.container || !this.table ||
            !this.rowHeightService || !this.containerRef.current) {
            return;
        }
        if (this.scrollSyncing) {
            this.scrollSyncing = false;
            return;
        }
        var scrollTop = this.container.scrollTop;
        var up = this.lastScrollTop >= scrollTop;
        var down = !up;
        this.lastScrollTop = scrollTop;
        var firstItemIndex = this.rowHeightService.index(scrollTop);
        var firstItemOffset = this.rowHeightService.offset(firstItemIndex);
        var offsetHeight = this.containerRef.current.offsetHeight;
        var lastItemIndex = this.rowHeightService.index(scrollTop + offsetHeight);
        if (down && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
            var overflow = (firstItemIndex + this.pageSize) - this.total;
            if (overflow > 0) {
                firstItemIndex = firstItemIndex - overflow;
                firstItemOffset = this.rowHeightService.offset(firstItemIndex);
            }
            this.firstLoaded = firstItemIndex;
            this.translate(firstItemOffset);
            var nextTake = this.firstLoaded + this.pageSize;
            this.lastLoaded = Math.min(nextTake, this.total);
            this.changePage(this.firstLoaded, e);
        }
        else if (up && firstItemIndex < this.firstLoaded) {
            var nonVisibleBuffer = Math.floor(this.pageSize * 0.3);
            this.firstLoaded = Math.max(firstItemIndex - nonVisibleBuffer, 0);
            this.translate(this.rowHeightService.offset(this.firstLoaded));
            this.lastLoaded = Math.min(this.firstLoaded + this.pageSize, this.total);
            this.changePage(this.firstLoaded, e);
        }
    };
    return VirtualScrollFixed;
}());
export { VirtualScrollFixed };
