/// <reference types="react" />
import { SortDescriptor, FilterDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { TreeListSortChangeEvent, TreeListFilterChangeEvent, TreeListExpandChangeEvent, TreeListSelectionChangeEvent, TreeListHeaderSelectionChangeEvent, TreeListItemChangeEvent, TreeListDataStateChangeEvent, TreeListRowClickEvent, TreeListColumnResizeEvent, TreeListColumnReorderEvent, TreeListPageChangeEvent, TreeListRowDragEvent, TreeListColumnMenuFilterChangeEvent, TreeListRowDoubleClickEvent, TreeListRowContextMenuEvent, TreeListKeyDownEvent } from './events';
import { ScrollMode } from '../ScrollMode';
import { TreeListCellProps } from './TreeListCellProps';
import { SortSettings as TreeListSortSettings, FilterRowProps } from '@progress/kendo-react-data-tools';
import { TreeListRowProps } from './TreeListRowProps';
import { TreeListHeaderCellProps } from './TreeListHeaderCellProps';
import { TreeListColumnProps } from './TreeListColumnProps';
import { TreeListToolbarProps } from './TreeListToolbarProps';
import { TreeListNoRecordsProps } from './TreeListNoRecordsProps';
import { TreeListSelectableSettings } from './TreeListSelectableSettings';
/**
 * Represents the props of the [KendoReact TreeList component]({% slug getstarted_treelist %}).
 */
export interface TreeListProps {
    /**
     * Sets the TreeList row key prop to the value of this field in the dataItem.
     * If not set, the dataItem index will be used for the row key, which might lead to row not updated during paging or scrolling.
     */
    dataItemKey?: string;
    /**
     * Sets custom CSS classes to the TreeList DOM element.
     */
    className?: string;
    /**
     * A collection of `TreeListColumnProps` for creating columns.
     */
    columns?: TreeListColumnProps[];
    /**
     * Enables the virtualization of the columns
     * ([see example]({% slug virtual_columns_treelist %})).
     * If enabled, the columns outside the viewport are not rendered.
     */
    columnVirtualization?: boolean;
    /**
     * Sets the data of the TreeList.
     */
    data?: any[];
    /**
     * Enables sorting ([see example]({% slug sorting_treelist %})).
     */
    sortable?: TreeListSortSettings;
    /**
     * Fires when the sorting of the TreeList is changed ([see example]({% slug sorting_treelist %})).
     * You have to handle the event yourself and sort the data.
     */
    onSortChange?: (event: TreeListSortChangeEvent) => void;
    /**
     * The descriptors by which the data is sorted. Applies the sorting styles and buttons to the affected columns.
     */
    sort?: SortDescriptor[];
    /**
     * If set, it will be rendered instead of the default `FilterRow` TreeList component.
     */
    filterRow?: React.ComponentType<FilterRowProps>;
    /**
     * If set and when the data item is in edit mode, the `editRow` value will be rendered.
     */
    editRow?: React.ComponentType<TreeListRowProps>;
    /**
     * Represents the TreeList toolbar component.
     */
    toolbar?: React.ReactElement<TreeListToolbarProps>;
    /**
     * Represents the component that will be rendered when the `data` property of the TreeList is empty or undefined.
     */
    noRecords?: React.ReactElement<TreeListNoRecordsProps>;
    /**
     * The descriptors by which the data is filtered ([more information and examples]({% slug filtering_treelist %})).
     * This affects the values and buttons in the `FilterRow` of the TreeList.
     */
    filter?: FilterDescriptor[];
    /**
     * Fires when the TreeList filter is modified through the UI
     * ([more information and examples]({% slug filtering_treelist %})).
     * You have to handle the event yourself and filter the data.
     */
    onFilterChange?: (event: TreeListFilterChangeEvent) => void;
    /**
     * Fires when the user clicks on the expand or collapse icon of a row.
     */
    onExpandChange?: (event: TreeListExpandChangeEvent) => void;
    /**
     * Specifies the name of the field which will provide a Boolean representation of the expanded state of the item.
     */
    expandField?: string;
    /**
     * Specifies the name of the field which will provide an array representation of the item subitems.
     */
    subItemsField?: string;
    /**
     * The TreeList selectable settings.
     */
    selectable?: TreeListSelectableSettings;
    /**
     * Specifies the name of the field which will provide a Boolean representation of the selected state of the item
     * ([see example]({% slug selection_treelist %})).
     */
    selectedField?: string;
    /**
     * Fires when the user tries to select or deselect a row or cell.
     * ([more information and example]({% slug selection_treelist %})).
     */
    onSelectionChange?: (event: TreeListSelectionChangeEvent) => void;
    /**
     * Fires when the user press keyboard key.
     */
    onKeyDown?: (event: TreeListKeyDownEvent) => void;
    /**
     * Fires when the user clicks the checkbox of a column header whose `field` matches `selectedField`
     * ([more information and example]({% slug selection_treelist %})).
     */
    onHeaderSelectionChange?: (event: TreeListHeaderSelectionChangeEvent) => void;
    /**
     * Fires when the user changes the values of the item.
     * The event is not debounced and fires on every `onChange` event of the input in the current `EditCell`
     * ([more information and examples]({% slug editing_inline_treelist %})).
     */
    onItemChange?: (event: TreeListItemChangeEvent) => void;
    /**
     * Fires when the user clicks a row.
     */
    onRowClick?: (event: TreeListRowClickEvent) => void;
    /**
     * Fires when the user double clicks a row.
     */
    onRowDoubleClick?: (event: TreeListRowDoubleClickEvent) => void;
    /**
     * Fires when the user trigger the context menu of row.
     */
    onRowContextMenu?: (event: TreeListRowContextMenuEvent) => void;
    /**
     * Specifies the name of the field which will provide a Boolean representation of the edit state of the current item
     * ([more information and examples]({% slug editing_inline_treelist %})).
     */
    editField?: string;
    /**
     * Defines the scroll mode of the TreeList.
     *
     * The available options are:
     * - `none`&mdash;Renders no scrollbar.
     * - `scrollable`&mdash;Represents the default scroll mode of the TreeList.
     * Requires you to set the `overflow` and `height` (for vertical scrolling),
     * or `width` (for horizontal scrolling) styles.
     * - `virtual`&mdash;Enables the vertical virtual scrolling of the TreeList.
     * Requires you to set the `overflow` and `height` styles and `rowHeight` prop of the TreeList.
     */
    scrollable?: ScrollMode;
    /**
     * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their header cells.
     */
    resizable?: boolean;
    /**
     * If set to `true`, the user can reorder columns by dragging their header cells.
     */
    reorderable?: boolean;
    /**
     * If set to `true`, the user can drag and drop rows.
     */
    rowDraggable?: boolean;
    /**
     * Defines the row height and implements equal heights for all rows.
     */
    rowHeight?: number;
    /**
     * Represents the `style` HTML attribute.
     */
    style?: React.CSSProperties;
    /**
     * A props object that will be passed to the underlying HTML table.
     */
    tableProps?: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
    columnMenu?: React.ComponentType<any>;
    columnMenuFilter?: CompositeFilterDescriptor[];
    onColumnMenuFilterChange?: (event: TreeListColumnMenuFilterChangeEvent) => void;
    /**
     * The pager component that the TreeList will render.
     */
    pager?: React.ComponentType<any>;
    /**
     * The number of records that will be skipped.
     */
    skip?: number;
    /**
     * The number of records that will be taken.
     */
    take?: number;
    /**
     * The TreeList row component.
     */
    row?: React.ComponentType<TreeListRowProps>;
    /**
     * If set to `true`, the user can use dedicated shortcuts to interact with the TreeList.
     * By default, navigation is disabled and the TreeList content is accessible in the normal tab sequence.
     */
    navigatable?: boolean;
    /**
     * Fires when the page of the TreeList is changed.
     */
    onPageChange?: (event: TreeListPageChangeEvent) => void;
    /**
     * Fires when the data state of the TreeList is changed.
     */
    onDataStateChange?: (event: TreeListDataStateChangeEvent) => void;
    /**
     * Fires when a column is resized.
     */
    onColumnResize?: (event: TreeListColumnResizeEvent) => void;
    /**
     * Fires when the columns are reordered.
     */
    onColumnReorder?: (event: TreeListColumnReorderEvent) => void;
    /**
     * Fires when a row is dragged.
     */
    onRowDrag?: (event: TreeListRowDragEvent) => void;
    /**
     * Fires when a row is dragged and dropped.
     */
    onRowDrop?: (event: TreeListRowDragEvent) => void;
    /**
     * Fires when a row is about to be rendered. Useful for overriding the default rendering of the row.
     */
    rowRender?: (row: React.ReactElement<HTMLTableRowElement>, props: TreeListRowProps) => React.ReactNode;
    /**
     * Fires when a cell is about to be rendered. Useful for overriding the default rendering of the cell.
     */
    cellRender?: (defaultRendering: React.ReactElement<HTMLTableCellElement> | null, props: TreeListCellProps) => React.ReactElement<HTMLTableCellElement> | null;
    /**
     * Fires when a header cell is about to be rendered. Useful for overriding the default rendering of the header cell.
     */
    headerCellRender?: (defaultRendering: React.ReactNode | null, props: TreeListHeaderCellProps) => React.ReactNode;
}
