"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeListCell = void 0;
var React = require("react");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var utils_1 = require("../utils");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var constants_1 = require("../constants");
var TreeListCell = function (props) {
    var _a, _b, _c;
    var hasChildren = props.hasChildren, _d = props.level, level = _d === void 0 ? [0] : _d, expanded = props.expanded, dataItem = props.dataItem, format = props.format, id = props.id, ariaColumnIndex = props.ariaColumnIndex, isSelected = props.isSelected;
    var data = (0, utils_1.getNestedValue)(props.field, dataItem);
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(id);
    var dataAsString = '';
    var onKeyDownHandler = React.useCallback(function (event) {
        if (event.isDefaultPrevented()) {
            return;
        }
        if (event.keyCode === kendo_react_common_1.Keys.enter && props.expandable) {
            event.preventDefault();
            props.onExpandChange(event, dataItem, level);
        }
    }, [props.expandable, dataItem, level]);
    if (data !== undefined && data !== null) {
        dataAsString = format ?
            intl.format(format, data) :
            data.toString();
    }
    var icons = [];
    if (props.expandable) {
        icons.push.apply(icons, level.slice(1).map(function (_x, i) { return (React.createElement(kendo_react_common_1.IconWrap, { name: "none", key: i })); }));
        if (hasChildren) {
            icons.push(React.createElement(kendo_react_common_1.IconWrap, __assign({ name: expanded ? 'caret-alt-down' : 'caret-alt-right', icon: expanded ? kendo_svg_icons_1.caretAltDownIcon : kendo_svg_icons_1.caretAltRightIcon, key: "expand-collapse", onClick: function (event) { return props.onExpandChange(event.syntheticEvent || event, dataItem, level); } }, (_a = {}, _a[constants_1.TREELIST_PREVENT_SELECTION_ELEMENT] = true, _a))));
        }
        else {
            icons.push(React.createElement(kendo_react_common_1.IconWrap, { name: "none", key: icons.length }));
        }
    }
    var defaultRendering = (React.createElement("td", __assign({ style: props.style, className: (0, kendo_react_common_1.classNames)('k-table-td', props.className, (_b = {},
            _b['k-text-nowrap'] = props.expandable,
            _b['k-selected'] = isSelected,
            _b)), colSpan: props.colSpan, "aria-colindex": ariaColumnIndex, "aria-expanded": hasChildren ? expanded : undefined, "aria-selected": isSelected, role: 'gridcell', onKeyDown: onKeyDownHandler }, (_c = {}, _c[constants_1.TREELIST_COL_INDEX_ATTRIBUTE] = props.colIndex, _c), navigationAttributes),
        icons,
        dataAsString));
    return props.render ?
        props.render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.TreeListCell = TreeListCell;
exports.TreeListCell.displayName = 'KendoReactTreeListCell';
