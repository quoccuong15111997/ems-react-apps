"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeListBooleanEditor = void 0;
var React = require("react");
var utils_1 = require("../../utils");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var constants_1 = require("../../constants");
var TreeListBooleanEditor = function (props) {
    var _a, _b;
    var onChange = React.useCallback(function (event) {
        if (props.onChange) {
            props.onChange({
                dataItem: props.dataItem,
                level: props.level,
                field: props.field,
                syntheticEvent: event,
                value: event.target.checked
            });
        }
    }, [props.onChange, props.dataItem, props.level, props.field]);
    var inputId = React.useMemo(function () { return (0, kendo_react_common_1.guid)(); }, []);
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(props.id);
    var editCellClasses = (0, kendo_react_common_1.classNames)((_a = {},
        _a['k-selected'] = props.isSelected,
        _a), props.className);
    var defaultRendering = (React.createElement("td", __assign({ style: props.style, className: editCellClasses, "aria-colindex": props.ariaColumnIndex, "aria-selected": props.isSelected, role: 'gridcell' }, navigationAttributes, (_b = {}, _b[constants_1.TREELIST_COL_INDEX_ATTRIBUTE] = props.colIndex, _b)),
        React.createElement("input", { checked: (0, utils_1.getNestedValue)(props.field, props.dataItem) || false, id: inputId, type: "checkbox", className: "k-checkbox k-checkbox-md k-rounded-md", onChange: onChange }),
        React.createElement("label", { className: "k-checkbox-label", htmlFor: inputId })));
    return props.render ?
        props.render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.TreeListBooleanEditor = TreeListBooleanEditor;
exports.TreeListBooleanEditor.displayName = 'KendoReactTreeListBooleanEditor';
