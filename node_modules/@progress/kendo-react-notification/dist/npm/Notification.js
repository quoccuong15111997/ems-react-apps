"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notification = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var licensing = require("@progress/kendo-licensing");
var package_metadata_1 = require("./package-metadata");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var buttonTitle = 'Close';
var fontIconsNames = {
    'success': 'check-outline',
    'error': 'x-outline',
    'info': 'info-circle',
    'warning': 'exclamation-circle'
};
var svgIcons = {
    'success': kendo_svg_icons_1.checkOutlineIcon,
    'error': kendo_svg_icons_1.xOutlineIcon,
    'info': kendo_svg_icons_1.infoCircleIcon,
    'warning': kendo_svg_icons_1.exclamationCircleIcon
};
/**
 * Represents the [KendoReact Notification component]({% slug overview_notification %}).
 */
var Notification = /** @class */ (function (_super) {
    __extends(Notification, _super);
    function Notification(props) {
        var _this = _super.call(this, props) || this;
        if (typeof licensing !== 'undefined') {
            licensing.validatePackage(package_metadata_1.packageMetadata);
        }
        else {
            var message = "License activation failed for ".concat(package_metadata_1.packageMetadata.name, "\n");
            message += 'The @progress/kendo-licensing script is not loaded.\n';
            message += "See ".concat(package_metadata_1.packageMetadata.licensingDocsUrl, " for more information.\n");
            console.warn(message);
        }
        return _this;
    }
    /**
     * @hidden
     */
    Notification.prototype.render = function () {
        var _this = this;
        var _a = this.props, onClose = _a.onClose, className = _a.className, _b = _a.closable, closable = _b === void 0 ? Notification.defaultProps.closable : _b, _c = _a.type, type = _c === void 0 ? Notification.defaultProps.type : _c;
        return (React.createElement("div", { dir: this.props.dir, className: "k-notification-container" },
            React.createElement("div", { className: 'k-notification' +
                    (className ? " ".concat(className) : '') +
                    (type.style === 'none' ? '' : " k-notification-".concat(type.style)) +
                    (closable ? ' k-notification-closable' : ''), style: this.props.style },
                type.icon &&
                    React.createElement(kendo_react_common_1.IconWrap, { className: 'k-notification-status', name: fontIconsNames[type.style], icon: svgIcons[type.style] }),
                React.createElement("div", { className: "k-notification-content" }, this.props.children),
                React.createElement("span", { className: "k-notification-actions" }, closable && (React.createElement("span", __assign({ className: "k-notification-action k-notification-close-action", title: buttonTitle, onClick: function (event) {
                        if (onClose) {
                            onClose.call(undefined, {
                                target: _this,
                                syntheticEvent: event,
                                nativeEvent: event.nativeEvent
                            });
                        }
                    } }, (typeof closable !== 'boolean' ? closable : {})),
                    React.createElement(kendo_react_common_1.IconWrap, { name: "x", icon: kendo_svg_icons_1.xIcon })))))));
    };
    /**
     * @hidden
     */
    Notification.propTypes = {
        className: PropTypes.string,
        closable: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
        dir: PropTypes.string,
        style: PropTypes.object,
        type: PropTypes.shape({
            style: PropTypes.oneOf(['none', 'success', 'error', 'warning', 'info']),
            icon: PropTypes.bool
        }),
        onClose: PropTypes.func
    };
    /**
     * @hidden
     */
    Notification.defaultProps = {
        closable: false,
        type: {
            style: 'none',
            icon: true
        }
    };
    return Notification;
}(React.Component));
exports.Notification = Notification;
