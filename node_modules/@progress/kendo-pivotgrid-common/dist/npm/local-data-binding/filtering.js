"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_data_query_1 = require("@progress/kendo-data-query");
function forEachDesc(desc, callbackfn) {
    if ('filters' in desc) {
        desc.filters.map(function (child) { return forEachDesc(child, callbackfn); });
    }
    else {
        callbackfn(desc);
    }
}
var filterFields = function (filter, callback) {
    var descriptors = Array.isArray(filter) ? filter : filter.filters;
    descriptors.forEach(function (desc) { return forEachDesc(desc, callback); });
};
/** @hidden */
exports.initializeFiltering = function (rows, columns, filter) {
    var compositeFilter = filter ?
        (Array.isArray(filter) ? { logic: 'and', filters: filter } : filter) : undefined;
    var predicate = compositeFilter ? kendo_data_query_1.compileFilter(compositeFilter) : function () { return true; };
    var axes = rows.concat(columns);
    var fieldValues = [];
    filterFields(filter || [], function (desc) {
        if ('field' in desc && desc.field) {
            fieldValues.push(desc.field);
        }
    });
    var result = { hasFilter: false, predicate: predicate, filteringAxes: [] };
    if (fieldValues.some(function (f) { return typeof f === 'function'; })) {
        result.filteringAxes = axes.slice();
    }
    else if (fieldValues.length > 0) {
        var filteringFields_1 = Array.from(new Set(fieldValues).values());
        var filteringAxes = axes.filter(function (a) { return filteringFields_1.indexOf(a.key) >= 0; });
        result.filteringAxes = filteringAxes;
    }
    result.hasFilter = result.filteringAxes.length > 0;
    return result;
};
