import { SortDescriptor } from "@progress/kendo-data-query";
import { AxisDescriptor } from "../models/axisDescriptor";
/**
 * Represents the PivotGrid aggregate object. Applicable for local data binding.
 *
 * @example
 * ```
 * const sumAggregate: Aggregate = {
 *     init: (data) => { data.sum = ('sum' in data) ? data.sum : 0; },
 *     accumulate: (data, value) => { data.sum += value; },
 *     merge: (src, dest) => { dest.sum += src.sum; },
 *     result: data => data.sum,
 *     format: (value: number) => value.toFixed(2)
 * };
 * ```
 */
export interface Aggregate {
    /**
     * The `init` function initializes the variable where the aggregated data will be stored and returns it in the passed `data` object.
     * The `init` function will be called every time before calling `accumulate` and `merge` functions.
     *
     * @param data - The `data` object where the aggregated data will be stored.
     */
    init: (data: any) => void;
    /**
     * The `accumulate` function will be called for every value that needs to be aggregated.
     *
     * @param data - The aggregated `data` so far.
     * @param value - The `value` that needs be aggregated in `data` object.
     */
    accumulate: (data: any, value: any) => void;
    /**
     * The `merge` function will be called when two aggregated `data` objects needs to be merged into one.
     *
     * @param src - The source aggregated `data` object.
     * @param dest - The destination aggregated `data` object.
     */
    merge: (src: any, dest: any) => void;
    /**
     * The `result` function will be called when the aggregated value needs to be extracted from the `data` object.
     *
     * @param data - The aggregated `data` object.
     *
     * @returns - The aggregated value.
     */
    result: (data: any) => any;
    /**
     * The `format` function will be called when the value returned from the `result` function needs to be formatted.
     *
     * @param value - The aggregated value.
     *
     * @returns - The formatted value.
     */
    format: (value: any) => string;
}
/**
 * Represents the PivotGrid measure object. Applicable for local data binding.
 *
 * @example
 *
 * ```
 * const sumMeasure = {
 *     name: 'Total Price',
 *     value: item => item.Price,
 *     aggregate: sumAggregate
 * };
 * ```
 */
export interface Measure {
    /**
     * The name of the measure. Must be unique in the measures collection.
     */
    name: string | string[];
    /**
     * A function which returns the measuring value from the passed data item.
     *
     * @param item - The data item.
     *
     * @returns - The measuring value.
     */
    value: (item: any) => any;
    /**
     * The measure aggregate.
     */
    aggregate: Aggregate;
}
/**
 * Represents the PivotGrid dimension object. Applicable for local data binding.
 */
export interface Dimension {
    /**
     * The caption of the dimension.
     */
    caption: string;
    /**
     * A function returning the value which will be rendered in the PivotGrid from the passed data item.
     *
     * @param item - The data item.
     *
     * @returns {string} - The rendering(dimension) value.
     */
    displayValue: (item: any) => string;
    /**
     * A function returning the value which will be used for sorting.
     *
     * @param {string} displayValue - The string result from `displayValue` function.
     *
     * @returns - The sorting value.
     */
    sortValue: (displayValue: string) => any;
}
/** @hidden */
export interface Fields {
    dataField: string;
    columnsData: string;
}
/** @hidden */
export interface AxisSettings {
    displayValue: (item: any) => string;
    sortValue: (value: string) => any;
    key: string;
    caption: string;
}
/** @hidden */
export interface LocalDataStateArgs {
    dataTree: Map<string, any>;
    rowSettings: AxisSettings[];
    columnSettings: AxisSettings[];
    rowAxes: AxisDescriptor[];
    columnAxes: AxisDescriptor[];
    measures: Measure[];
    sort: SortDescriptor[];
    fields: Fields;
}
/** @hidden */
export interface Dimensions {
    [key: string]: Dimension;
}
