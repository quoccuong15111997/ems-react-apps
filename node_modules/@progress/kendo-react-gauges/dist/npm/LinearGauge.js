"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinearGauge = void 0;
var React = require("react");
var BaseGauge_1 = require("./BaseGauge");
var kendo_charts_1 = require("@progress/kendo-charts");
var kendo_drawing_1 = require("@progress/kendo-drawing");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var LinearGauge = /** @class */ (function (_super) {
    __extends(LinearGauge, _super);
    function LinearGauge() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._baseGauge = null;
        _this.getTarget = function () {
            return _this;
        };
        _this.deriveOptionsFromParent = function (options) {
            var _a = _this.props, pointer = _a.pointer, scale = _a.scale;
            return Object.assign({}, options, {
                pointer: pointer,
                scale: scale
            });
        };
        return _this;
    }
    Object.defineProperty(LinearGauge.prototype, "gaugeInstance", {
        /**
         * @hidden
         */
        get: function () {
            if (this._baseGauge !== null) {
                return this._baseGauge.gaugeInstance;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LinearGauge.prototype, "surface", {
        /**
         * The Drawing `Surface` of the Gauge.
         */
        get: function () {
            if (this._baseGauge !== null) {
                return this._baseGauge.surface;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LinearGauge.prototype, "element", {
        /**
         * The DOM element of the Gauge.
         */
        get: function () {
            if (this._baseGauge !== null) {
                return this._baseGauge.element;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    LinearGauge.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, className = _a.className, baseGaugeProps = __rest(_a, ["children", "className"]);
        return (React.createElement(BaseGauge_1.BaseGauge, __assign({}, baseGaugeProps, { deriveOptionsFromParent: this.deriveOptionsFromParent, ref: function (baseGauge) { return _this._baseGauge = baseGauge; }, gaugeConstructor: kendo_charts_1.LinearGauge, getTarget: this.getTarget, className: (0, kendo_react_common_1.classNames)('k-gauge', className) }), children));
    };
    /**
     * Exports a Gauge component as a Drawing `Scene`.
     *
     * @param {any} options - The parameters for the export operation.
     * @returns {Promise<Group>} - A promise that returns the root `Group` of the scene.
     */
    LinearGauge.prototype.exportVisual = function (options) {
        if (this.gaugeInstance !== null) {
            return Promise.resolve(this.gaugeInstance.exportVisual(options));
        }
        return Promise.resolve(new kendo_drawing_1.Group());
    };
    return LinearGauge;
}(React.Component));
exports.LinearGauge = LinearGauge;
