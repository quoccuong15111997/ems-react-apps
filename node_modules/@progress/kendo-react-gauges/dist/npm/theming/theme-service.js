"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTheme = void 0;
var kendo_charts_1 = require("@progress/kendo-charts");
var template = "\n    <div class=\"k-var--gauge-pointer\"></div>\n    <div class=\"k-var--gauge-track\"></div>\n    <div class=\"k-var--normal-text-color\"></div>\n";
/**
 * @hidden
 */
var ThemeService = /** @class */ (function () {
    function ThemeService(store) {
        this.store = store;
    }
    ThemeService.prototype.setStyle = function (field, value) {
        this.store.dispatch({ type: 'set', payload: { field: field, value: value } });
    };
    ThemeService.prototype.setColors = function () {
        this.mapColor('pointer.color', 'gauge-pointer');
        this.mapColor('scale.rangePlaceholderColor', 'gauge-track');
        this.mapColor('scale.labels.color', 'normal-text-color');
        this.mapColor('scale.minorTicks.color', 'normal-text-color');
        this.mapColor('scale.majorTicks.color', 'normal-text-color');
        this.mapColor('scale.line.color', 'normal-text-color');
    };
    ThemeService.prototype.mapColor = function (key, varName) {
        this.setStyle(key, this.queryStyle(varName).backgroundColor);
    };
    ThemeService.prototype.queryStyle = function (varName) {
        var element = this.element;
        return window.getComputedStyle(element.querySelector(".k-var--".concat(varName)));
    };
    return ThemeService;
}());
/**
 * @hidden
 */
var loadTheme = function (store, done, doc) {
    var service = new ThemeService(store);
    if (typeof doc === 'undefined') {
        store.dispatch({ type: 'push', payload: (0, kendo_charts_1.chartBaseTheme)() });
        return;
    }
    var container = service.element = doc.createElement('div');
    container.style.display = 'none';
    container.innerHTML = template;
    doc.body.appendChild(container);
    try {
        store.dispatch({ type: 'push', payload: (0, kendo_charts_1.chartBaseTheme)() });
        service.setColors();
    }
    finally {
        doc.body.removeChild(service.element);
        delete service.element;
        done();
    }
};
exports.loadTheme = loadTheme;
