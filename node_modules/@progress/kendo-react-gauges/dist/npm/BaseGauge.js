"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseGauge = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var theme_service_1 = require("./theming/theme-service");
var store_1 = require("./store/store");
var reducer_1 = require("./store/reducer");
var common_1 = require("./utils/common");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var GaugeContext_1 = require("./GaugeContext");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("./package-metadata");
/**
 * @hidden
 */
var BaseGauge = /** @class */ (function (_super) {
    __extends(BaseGauge, _super);
    function BaseGauge(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.gaugeInstance = null;
        /**
         * @hidden
         */
        _this.surface = null;
        _this._element = null;
        _this.themeStore = {};
        _this.themeUnsubscriber = Function.prototype;
        _this.observersStore = {};
        /* DOM event handlers */
        /**
         * @hidden
         */
        _this.onWindowResize = function () {
            if (_this.gaugeInstance !== null) {
                _this.gaugeInstance.resize();
                _this.trigger('render', { sender: _this });
            }
        };
        (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
        _this.themeStore = (0, store_1.default)(reducer_1.themeReducer);
        _this.observersStore = (0, store_1.default)(reducer_1.observersReducer);
        _this.contextValue = {
            observersStore: _this.observersStore
        };
        return _this;
    }
    Object.defineProperty(BaseGauge.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    BaseGauge.prototype.componentDidMount = function () {
        var _a;
        var doc = ((_a = this._element) === null || _a === void 0 ? void 0 : _a.ownerDocument) || document;
        (0, theme_service_1.loadTheme)(this.themeStore, this.instantiateCoreGauge.bind(this), doc);
        this.themeUnsubscriber = this.themeStore.subscribe(this.refresh.bind(this));
        window.addEventListener('resize', this.onWindowResize);
        this.trigger('render', { sender: this });
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, dir = _a.dir, children = _a.children, deriveOptionsFromParent = _a.deriveOptionsFromParent, getTarget = _a.getTarget, gaugeConstructor = _a.gaugeConstructor, className = _a.className, renderAs = _a.renderAs, currentOthers = __rest(_a, ["dir", "children", "deriveOptionsFromParent", "getTarget", "gaugeConstructor", "className", "renderAs"]);
        var prevDir = prevProps.dir, prevChildren = prevProps.children, prevDeriveOptionsFromParent = prevProps.deriveOptionsFromParent, prevGetTarget = prevProps.getTarget, prevGaugeConstructor = prevProps.gaugeConstructor, prevClassName = prevProps.className, prevRenderAs = prevProps.renderAs, prevOthers = __rest(prevProps, ["dir", "children", "deriveOptionsFromParent", "getTarget", "gaugeConstructor", "className", "renderAs"]);
        if (this.gaugeInstance !== null) {
            var currentIntlService = (0, kendo_react_intl_1.provideIntlService)(this);
            var gaugeService = this.gaugeInstance.contextService;
            var localeChanged = currentIntlService.locale !== gaugeService._intlService.locale;
            var optionsChanged = (0, common_1.isOptionsChanged)(prevOthers, currentOthers);
            var typedCurrentOthers = currentOthers;
            if (localeChanged) {
                this.gaugeInstance.contextService._intlService = currentIntlService;
                this.gaugeInstance.contextService.format._intlService = currentIntlService;
                if (!optionsChanged) {
                    this.gaugeInstance.noTransitionsRedraw();
                }
            }
            if (optionsChanged ||
                (renderAs || 'svg') !== (prevRenderAs || 'svg')) {
                this.refresh();
            }
            else {
                if (Object.keys(currentOthers).indexOf('pointer') > -1) {
                    var isPointerArray = Array.isArray(typedCurrentOthers.pointer);
                    if (isPointerArray) {
                        this.refreshAllValues(typedCurrentOthers.pointer.map(function (item) { return item.value; }));
                    }
                    else {
                        this.refreshValue((typedCurrentOthers.pointer || {}).value);
                    }
                }
                else {
                    this.refreshValue(typedCurrentOthers.value);
                }
            }
            if (prevProps.dir !== dir) {
                this.gaugeInstance.setDirection(this.getDirection(dir));
            }
            this.trigger('render', { sender: this });
        }
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.componentWillUnmount = function () {
        this.themeUnsubscriber();
        var surfaceElement = this.gaugeInstance && this.gaugeInstance.surfaceElement;
        if (surfaceElement && surfaceElement.parentNode) {
            surfaceElement.parentNode.removeChild(surfaceElement);
        }
        if (this.gaugeInstance !== null) {
            this.gaugeInstance.destroy();
            this.gaugeInstance = null;
        }
        window.removeEventListener('resize', this.onWindowResize);
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.style, style = _b === void 0 ? {} : _b, className = _a.className, children = _a.children;
        var gaugeStyles = Object.assign({}, style, { position: 'relative' });
        return (React.createElement(GaugeContext_1.GaugeContext.Provider, { value: this.contextValue },
            React.createElement("div", { style: gaugeStyles, ref: function (el) { return _this._element = el; }, className: className }, children)));
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.instantiateCoreGauge = function () {
        var _a = this.props, dir = _a.dir, gaugeConstructor = _a.gaugeConstructor;
        var gaugeOptions = this.getGaugeOptions();
        this.gaugeInstance = new gaugeConstructor(this.element, gaugeOptions, this.themeStore.getState(), {
            rtl: this.getDirection(dir),
            intlService: (0, kendo_react_intl_1.provideIntlService)(this),
            sender: this
        });
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.refresh = function () {
        if (this.gaugeInstance !== null) {
            var themeOptions = this.themeStore.getState();
            var gaugeOptions = this.getGaugeOptions();
            this.gaugeInstance.setOptions(gaugeOptions, themeOptions);
        }
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.refreshValue = function (value) {
        this.gaugeInstance.value(value);
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.refreshAllValues = function (values) {
        this.gaugeInstance.allValues(values);
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.getDirection = function (dir) {
        var _this = this;
        var directionFromWindow = function () { return kendo_react_common_1.canUseDOM && window.getComputedStyle(_this.element).direction; };
        var direction = dir !== undefined ? dir : (directionFromWindow() || 'ltr');
        return direction === 'rtl';
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.getGaugeOptions = function () {
        var _a = this.props, renderAs = _a.renderAs, transitions = _a.transitions, deriveOptionsFromParent = _a.deriveOptionsFromParent;
        var gaugeOptions = Object.assign({
            renderAs: renderAs,
            transitions: transitions
        });
        if (deriveOptionsFromParent) {
            // Add options from parent - required by TS
            gaugeOptions = deriveOptionsFromParent(gaugeOptions);
        }
        return gaugeOptions;
    };
    /**
     * @hidden
     */
    BaseGauge.prototype.trigger = function (name, e) {
        var observers = this.observersStore.getState();
        for (var idx = 0; idx < observers.length; idx++) {
            observers[idx].trigger(name, e);
        }
    };
    /**
     * @hidden
     */
    BaseGauge.propTypes = {
        dir: PropTypes.string,
        renderAs: PropTypes.oneOf(['svg', 'canvas'])
    };
    /**
     * @hidden
     */
    BaseGauge.defaultProps = {
        renderAs: 'svg'
    };
    return BaseGauge;
}(React.Component));
exports.BaseGauge = BaseGauge;
(0, kendo_react_intl_1.registerForIntl)(BaseGauge);
