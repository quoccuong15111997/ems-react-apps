var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { InstanceObserver } from '@progress/kendo-charts';
import { GaugeContext } from './GaugeContext';
/**
 * @hidden
 */
var ArcCenter = /** @class */ (function (_super) {
    __extends(ArcCenter, _super);
    function ArcCenter(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            arcCenterStyles: null,
            arcCenterValue: {
                value: 0,
                color: ''
            }
        };
        _this._element = null;
        _this.gaugeObserver = new InstanceObserver(_this, {
            render: 'onRender'
        });
        context.observersStore.dispatch({
            type: 'add',
            payload: _this.gaugeObserver
        });
        return _this;
    }
    ArcCenter.prototype.render = function () {
        var _this = this;
        var render = this.props.render;
        var _a = this.state, arcCenterStyles = _a.arcCenterStyles, arcCenterValue = _a.arcCenterValue;
        var divStyle = arcCenterStyles ? arcCenterStyles : { zIndex: -1 };
        var renderer = null;
        if (render) {
            renderer = (React.createElement("div", { className: "k-arcgauge-label", ref: function (element) { return _this._element = element; }, style: divStyle }, render(arcCenterValue.value, arcCenterValue.color)));
        }
        return renderer;
    };
    ArcCenter.prototype.onRender = function (e) {
        if (!this._element) {
            return;
        }
        var gaugeInstance = e.sender.gaugeInstance;
        var width = this._element.offsetWidth;
        var height = this._element.offsetHeight;
        var position = gaugeInstance.centerLabelPosition(width, height);
        this.setState({
            arcCenterStyles: {
                left: position.left,
                top: position.top
            },
            arcCenterValue: {
                value: gaugeInstance.value(),
                color: gaugeInstance.currentColor()
            }
        });
    };
    ArcCenter.contextType = GaugeContext;
    return ArcCenter;
}(React.Component));
export { ArcCenter };
