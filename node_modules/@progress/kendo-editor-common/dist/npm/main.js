"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expandToWordWrap = exports.expandSelection = exports.selectedLineTextOnly = exports.getNodeFromSelection = exports.getSelectionText = exports.hasSameMarkup = exports.liftBlockquote = exports.blockquote = exports.listStyle = exports.toggleList = exports.toggleUnorderedList = exports.toggleOrderedList = exports.indentBlocks = exports.canBeIndented = exports.isIndented = exports.canOutdentAsListItem = exports.outdent = exports.canIndentAsListItem = exports.indent = exports.selectionMarks = exports.cleanMarks = exports.removeAllMarks = exports.getActiveMarks = exports.getMark = exports.hasMark = exports.cleanTextBlockFormatting = exports.blockNodes = exports.changeTextBlock = exports.parentBlockFormat = exports.getBlockFormats = exports.formatBlockElements = exports.activeNode = exports.hasNode = exports.cleanFormatting = exports.isAligned = exports.alignBlocks = exports.insertImage = exports.insertText = exports.removeLink = exports.applyLink = exports.toggleInlineFormat = exports.getInlineStyles = exports.applyInlineStyle = exports.pmDocToFragment = exports.domToPmDoc = exports.htmlToFragment = exports.trimWhitespace = exports.parseContent = exports.setHtml = exports.getHtml = void 0;
exports.tableEditingKey = exports.tableEditing = exports.TableMap = exports.tableRowResizeKey = exports.tableColumnResizeKey = exports.tableResizeKey = exports.tableResizing = exports.caretColorKey = exports.caretColor = exports.imageResizeKey = exports.imageResizing = exports.textHighlightKey = exports.textHighlight = exports.spacesFix = exports.placeholder = exports.replaceAll = exports.replace = exports.findAll = exports.findAt = exports.find = exports.convertMsLists = exports.replaceImageSourcesFromRtf = exports.removeAttribute = exports.sanitizeStyleAttr = exports.sanitizeClassAttr = exports.pasteCleanup = exports.removeTag = exports.removeComments = exports.sanitize = exports.link = exports.superscript = exports.subscript = exports.strikethrough = exports.underline = exports.italic = exports.bold = exports.buildListKeymap = exports.buildKeymap = exports.marks = exports.nodes = exports.outdentRules = exports.indentRules = exports.alignRemoveRules = exports.alignJustifyRules = exports.alignRightRules = exports.alignCenterRules = exports.alignLeftRules = exports.indentHtml = exports.insertNode = exports.canInsert = void 0;
exports.pmDeleteColumn = exports.pmAddRowBefore = exports.pmAddRowAfter = exports.pmAddColumnAfter = exports.pmAddColumnBefore = exports.deleteColumn = exports.addColumnAfter = exports.addColumnBefore = exports.addRowBefore = exports.addRowAfter = exports.createTable = exports.nextCell = exports.moveCellForward = exports.removeColSpan = exports.findCell = exports.cellAround = exports.updateColumnsOnResize = exports.columnResizingPluginKey = exports.columnResizing = exports.columnIsHeader = exports.colCount = exports.addColumn = exports.addColSpan = exports.addRow = exports.rowIsHeader = exports.deleteRow = exports.mergeCells = exports.splitCellWithType = exports.splitCell = exports.toggleHeaderRow = exports.toggleHeaderColumn = exports.toggleHeaderCell = exports.toggleHeader = exports.goToNextCell = exports.setCellAttr = exports.selectionCell = exports.selectedRect = exports.CellSelection = exports.inSameTable = exports.deleteTable = exports.isInTable = exports.fixTablesKey = exports.fixTables = exports.tableNodes = exports.tableNodeTypes = void 0;
var tslib_1 = require("tslib");
var source_1 = require("./source");
Object.defineProperty(exports, "getHtml", { enumerable: true, get: function () { return source_1.getHtml; } });
Object.defineProperty(exports, "setHtml", { enumerable: true, get: function () { return source_1.setHtml; } });
Object.defineProperty(exports, "parseContent", { enumerable: true, get: function () { return source_1.parseContent; } });
Object.defineProperty(exports, "trimWhitespace", { enumerable: true, get: function () { return source_1.trimWhitespace; } });
Object.defineProperty(exports, "htmlToFragment", { enumerable: true, get: function () { return source_1.htmlToFragment; } });
Object.defineProperty(exports, "domToPmDoc", { enumerable: true, get: function () { return source_1.domToPmDoc; } });
Object.defineProperty(exports, "pmDocToFragment", { enumerable: true, get: function () { return source_1.pmDocToFragment; } });
var inline_style_1 = require("./inline-style");
Object.defineProperty(exports, "applyInlineStyle", { enumerable: true, get: function () { return inline_style_1.applyInlineStyle; } });
Object.defineProperty(exports, "getInlineStyles", { enumerable: true, get: function () { return inline_style_1.getInlineStyles; } });
Object.defineProperty(exports, "toggleInlineFormat", { enumerable: true, get: function () { return inline_style_1.toggleInlineFormat; } });
var link_1 = require("./link");
Object.defineProperty(exports, "applyLink", { enumerable: true, get: function () { return link_1.applyLink; } });
Object.defineProperty(exports, "removeLink", { enumerable: true, get: function () { return link_1.removeLink; } });
var text_1 = require("./text");
Object.defineProperty(exports, "insertText", { enumerable: true, get: function () { return text_1.insertText; } });
var image_1 = require("./image");
Object.defineProperty(exports, "insertImage", { enumerable: true, get: function () { return image_1.insertImage; } });
var align_1 = require("./align");
Object.defineProperty(exports, "alignBlocks", { enumerable: true, get: function () { return align_1.alignBlocks; } });
Object.defineProperty(exports, "isAligned", { enumerable: true, get: function () { return align_1.isAligned; } });
var cleanFormatting_1 = require("./cleanFormatting");
Object.defineProperty(exports, "cleanFormatting", { enumerable: true, get: function () { return cleanFormatting_1.cleanFormatting; } });
var blockNode_1 = require("./blockNode");
Object.defineProperty(exports, "hasNode", { enumerable: true, get: function () { return blockNode_1.hasNode; } });
Object.defineProperty(exports, "activeNode", { enumerable: true, get: function () { return blockNode_1.activeNode; } });
Object.defineProperty(exports, "formatBlockElements", { enumerable: true, get: function () { return blockNode_1.formatBlockElements; } });
Object.defineProperty(exports, "getBlockFormats", { enumerable: true, get: function () { return blockNode_1.getBlockFormats; } });
Object.defineProperty(exports, "parentBlockFormat", { enumerable: true, get: function () { return blockNode_1.parentBlockFormat; } });
Object.defineProperty(exports, "changeTextBlock", { enumerable: true, get: function () { return blockNode_1.changeTextBlock; } });
Object.defineProperty(exports, "blockNodes", { enumerable: true, get: function () { return blockNode_1.blockNodes; } });
Object.defineProperty(exports, "cleanTextBlockFormatting", { enumerable: true, get: function () { return blockNode_1.cleanTextBlockFormatting; } });
var mark_1 = require("./mark");
Object.defineProperty(exports, "hasMark", { enumerable: true, get: function () { return mark_1.hasMark; } });
Object.defineProperty(exports, "getMark", { enumerable: true, get: function () { return mark_1.getMark; } });
Object.defineProperty(exports, "getActiveMarks", { enumerable: true, get: function () { return mark_1.getActiveMarks; } });
Object.defineProperty(exports, "removeAllMarks", { enumerable: true, get: function () { return mark_1.removeAllMarks; } });
Object.defineProperty(exports, "cleanMarks", { enumerable: true, get: function () { return mark_1.cleanMarks; } });
Object.defineProperty(exports, "selectionMarks", { enumerable: true, get: function () { return mark_1.selectionMarks; } });
var indent_1 = require("./indent");
Object.defineProperty(exports, "indent", { enumerable: true, get: function () { return indent_1.indent; } });
Object.defineProperty(exports, "canIndentAsListItem", { enumerable: true, get: function () { return indent_1.canIndentAsListItem; } });
Object.defineProperty(exports, "outdent", { enumerable: true, get: function () { return indent_1.outdent; } });
Object.defineProperty(exports, "canOutdentAsListItem", { enumerable: true, get: function () { return indent_1.canOutdentAsListItem; } });
Object.defineProperty(exports, "isIndented", { enumerable: true, get: function () { return indent_1.isIndented; } });
Object.defineProperty(exports, "canBeIndented", { enumerable: true, get: function () { return indent_1.canBeIndented; } });
Object.defineProperty(exports, "indentBlocks", { enumerable: true, get: function () { return indent_1.indentBlocks; } });
var lists_1 = require("./lists");
Object.defineProperty(exports, "toggleOrderedList", { enumerable: true, get: function () { return lists_1.toggleOrderedList; } });
Object.defineProperty(exports, "toggleUnorderedList", { enumerable: true, get: function () { return lists_1.toggleUnorderedList; } });
Object.defineProperty(exports, "toggleList", { enumerable: true, get: function () { return lists_1.toggleList; } });
Object.defineProperty(exports, "listStyle", { enumerable: true, get: function () { return lists_1.listStyle; } });
var blockquote_1 = require("./blockquote");
Object.defineProperty(exports, "blockquote", { enumerable: true, get: function () { return blockquote_1.blockquote; } });
Object.defineProperty(exports, "liftBlockquote", { enumerable: true, get: function () { return blockquote_1.liftBlockquote; } });
var utils_1 = require("./utils");
Object.defineProperty(exports, "hasSameMarkup", { enumerable: true, get: function () { return utils_1.hasSameMarkup; } });
Object.defineProperty(exports, "getSelectionText", { enumerable: true, get: function () { return utils_1.getSelectionText; } });
Object.defineProperty(exports, "getNodeFromSelection", { enumerable: true, get: function () { return utils_1.getNodeFromSelection; } });
Object.defineProperty(exports, "selectedLineTextOnly", { enumerable: true, get: function () { return utils_1.selectedLineTextOnly; } });
Object.defineProperty(exports, "expandSelection", { enumerable: true, get: function () { return utils_1.expandSelection; } });
Object.defineProperty(exports, "expandToWordWrap", { enumerable: true, get: function () { return utils_1.expandToWordWrap; } });
Object.defineProperty(exports, "canInsert", { enumerable: true, get: function () { return utils_1.canInsert; } });
Object.defineProperty(exports, "insertNode", { enumerable: true, get: function () { return utils_1.insertNode; } });
Object.defineProperty(exports, "indentHtml", { enumerable: true, get: function () { return utils_1.indentHtml; } });
var align_rules_1 = require("./config/align-rules");
Object.defineProperty(exports, "alignLeftRules", { enumerable: true, get: function () { return align_rules_1.alignLeftRules; } });
Object.defineProperty(exports, "alignCenterRules", { enumerable: true, get: function () { return align_rules_1.alignCenterRules; } });
Object.defineProperty(exports, "alignRightRules", { enumerable: true, get: function () { return align_rules_1.alignRightRules; } });
Object.defineProperty(exports, "alignJustifyRules", { enumerable: true, get: function () { return align_rules_1.alignJustifyRules; } });
Object.defineProperty(exports, "alignRemoveRules", { enumerable: true, get: function () { return align_rules_1.alignRemoveRules; } });
var indent_rules_1 = require("./config/indent-rules");
Object.defineProperty(exports, "indentRules", { enumerable: true, get: function () { return indent_rules_1.indentRules; } });
Object.defineProperty(exports, "outdentRules", { enumerable: true, get: function () { return indent_rules_1.outdentRules; } });
var schema_1 = require("./config/schema");
Object.defineProperty(exports, "nodes", { enumerable: true, get: function () { return schema_1.nodes; } });
Object.defineProperty(exports, "marks", { enumerable: true, get: function () { return schema_1.marks; } });
var keymap_1 = require("./config/keymap");
Object.defineProperty(exports, "buildKeymap", { enumerable: true, get: function () { return keymap_1.buildKeymap; } });
Object.defineProperty(exports, "buildListKeymap", { enumerable: true, get: function () { return keymap_1.buildListKeymap; } });
var commands_1 = require("./config/commands");
Object.defineProperty(exports, "bold", { enumerable: true, get: function () { return commands_1.bold; } });
Object.defineProperty(exports, "italic", { enumerable: true, get: function () { return commands_1.italic; } });
Object.defineProperty(exports, "underline", { enumerable: true, get: function () { return commands_1.underline; } });
Object.defineProperty(exports, "strikethrough", { enumerable: true, get: function () { return commands_1.strikethrough; } });
Object.defineProperty(exports, "subscript", { enumerable: true, get: function () { return commands_1.subscript; } });
Object.defineProperty(exports, "superscript", { enumerable: true, get: function () { return commands_1.superscript; } });
Object.defineProperty(exports, "link", { enumerable: true, get: function () { return commands_1.link; } });
var paste_1 = require("./paste");
Object.defineProperty(exports, "sanitize", { enumerable: true, get: function () { return paste_1.sanitize; } });
Object.defineProperty(exports, "removeComments", { enumerable: true, get: function () { return paste_1.removeComments; } });
Object.defineProperty(exports, "removeTag", { enumerable: true, get: function () { return paste_1.removeTag; } });
Object.defineProperty(exports, "pasteCleanup", { enumerable: true, get: function () { return paste_1.pasteCleanup; } });
Object.defineProperty(exports, "sanitizeClassAttr", { enumerable: true, get: function () { return paste_1.sanitizeClassAttr; } });
Object.defineProperty(exports, "sanitizeStyleAttr", { enumerable: true, get: function () { return paste_1.sanitizeStyleAttr; } });
Object.defineProperty(exports, "removeAttribute", { enumerable: true, get: function () { return paste_1.removeAttribute; } });
Object.defineProperty(exports, "replaceImageSourcesFromRtf", { enumerable: true, get: function () { return paste_1.replaceImageSourcesFromRtf; } });
var listConvert_1 = require("./listConvert");
Object.defineProperty(exports, "convertMsLists", { enumerable: true, get: function () { return listConvert_1.convertMsLists; } });
var find_replace_1 = require("./find-replace");
Object.defineProperty(exports, "find", { enumerable: true, get: function () { return find_replace_1.find; } });
Object.defineProperty(exports, "findAt", { enumerable: true, get: function () { return find_replace_1.findAt; } });
Object.defineProperty(exports, "findAll", { enumerable: true, get: function () { return find_replace_1.findAll; } });
Object.defineProperty(exports, "replace", { enumerable: true, get: function () { return find_replace_1.replace; } });
Object.defineProperty(exports, "replaceAll", { enumerable: true, get: function () { return find_replace_1.replaceAll; } });
var placeholder_1 = require("./plugins/placeholder");
Object.defineProperty(exports, "placeholder", { enumerable: true, get: function () { return placeholder_1.placeholder; } });
var spaces_fix_1 = require("./plugins/spaces-fix");
Object.defineProperty(exports, "spacesFix", { enumerable: true, get: function () { return spaces_fix_1.spacesFix; } });
var highlight_1 = require("./plugins/highlight");
Object.defineProperty(exports, "textHighlight", { enumerable: true, get: function () { return highlight_1.textHighlight; } });
Object.defineProperty(exports, "textHighlightKey", { enumerable: true, get: function () { return highlight_1.textHighlightKey; } });
var image_resize_1 = require("./plugins/image-resize");
Object.defineProperty(exports, "imageResizing", { enumerable: true, get: function () { return image_resize_1.imageResizing; } });
Object.defineProperty(exports, "imageResizeKey", { enumerable: true, get: function () { return image_resize_1.imageResizeKey; } });
var caret_color_1 = require("./plugins/caret-color");
Object.defineProperty(exports, "caretColor", { enumerable: true, get: function () { return caret_color_1.caretColor; } });
Object.defineProperty(exports, "caretColorKey", { enumerable: true, get: function () { return caret_color_1.caretColorKey; } });
var table_resize_1 = require("./plugins/table-resize");
Object.defineProperty(exports, "tableResizing", { enumerable: true, get: function () { return table_resize_1.tableResizing; } });
Object.defineProperty(exports, "tableResizeKey", { enumerable: true, get: function () { return table_resize_1.tableResizeKey; } });
Object.defineProperty(exports, "tableColumnResizeKey", { enumerable: true, get: function () { return table_resize_1.tableColumnResizeKey; } });
Object.defineProperty(exports, "tableRowResizeKey", { enumerable: true, get: function () { return table_resize_1.tableRowResizeKey; } });
// ProseMirror re-exports
tslib_1.__exportStar(require("prosemirror-commands"), exports);
tslib_1.__exportStar(require("prosemirror-dropcursor"), exports);
tslib_1.__exportStar(require("prosemirror-gapcursor"), exports);
tslib_1.__exportStar(require("prosemirror-history"), exports);
tslib_1.__exportStar(require("prosemirror-inputrules"), exports);
tslib_1.__exportStar(require("prosemirror-keymap"), exports);
tslib_1.__exportStar(require("prosemirror-model"), exports);
tslib_1.__exportStar(require("prosemirror-schema-list"), exports);
tslib_1.__exportStar(require("prosemirror-state"), exports);
// Fixes an error related to setting over the addRowAfter and addRowBefore exports from the PM tables module
var prosemirror_tables_1 = require("prosemirror-tables");
Object.defineProperty(exports, "TableMap", { enumerable: true, get: function () { return prosemirror_tables_1.TableMap; } });
Object.defineProperty(exports, "tableEditing", { enumerable: true, get: function () { return prosemirror_tables_1.tableEditing; } });
Object.defineProperty(exports, "tableEditingKey", { enumerable: true, get: function () { return prosemirror_tables_1.tableEditingKey; } });
Object.defineProperty(exports, "tableNodeTypes", { enumerable: true, get: function () { return prosemirror_tables_1.tableNodeTypes; } });
Object.defineProperty(exports, "tableNodes", { enumerable: true, get: function () { return prosemirror_tables_1.tableNodes; } });
Object.defineProperty(exports, "fixTables", { enumerable: true, get: function () { return prosemirror_tables_1.fixTables; } });
Object.defineProperty(exports, "fixTablesKey", { enumerable: true, get: function () { return prosemirror_tables_1.fixTablesKey; } });
Object.defineProperty(exports, "isInTable", { enumerable: true, get: function () { return prosemirror_tables_1.isInTable; } });
Object.defineProperty(exports, "deleteTable", { enumerable: true, get: function () { return prosemirror_tables_1.deleteTable; } });
Object.defineProperty(exports, "inSameTable", { enumerable: true, get: function () { return prosemirror_tables_1.inSameTable; } });
Object.defineProperty(exports, "CellSelection", { enumerable: true, get: function () { return prosemirror_tables_1.CellSelection; } });
Object.defineProperty(exports, "selectedRect", { enumerable: true, get: function () { return prosemirror_tables_1.selectedRect; } });
Object.defineProperty(exports, "selectionCell", { enumerable: true, get: function () { return prosemirror_tables_1.selectionCell; } });
Object.defineProperty(exports, "setCellAttr", { enumerable: true, get: function () { return prosemirror_tables_1.setCellAttr; } });
Object.defineProperty(exports, "goToNextCell", { enumerable: true, get: function () { return prosemirror_tables_1.goToNextCell; } });
Object.defineProperty(exports, "toggleHeader", { enumerable: true, get: function () { return prosemirror_tables_1.toggleHeader; } });
Object.defineProperty(exports, "toggleHeaderCell", { enumerable: true, get: function () { return prosemirror_tables_1.toggleHeaderCell; } });
Object.defineProperty(exports, "toggleHeaderColumn", { enumerable: true, get: function () { return prosemirror_tables_1.toggleHeaderColumn; } });
Object.defineProperty(exports, "toggleHeaderRow", { enumerable: true, get: function () { return prosemirror_tables_1.toggleHeaderRow; } });
Object.defineProperty(exports, "splitCell", { enumerable: true, get: function () { return prosemirror_tables_1.splitCell; } });
Object.defineProperty(exports, "splitCellWithType", { enumerable: true, get: function () { return prosemirror_tables_1.splitCellWithType; } });
Object.defineProperty(exports, "mergeCells", { enumerable: true, get: function () { return prosemirror_tables_1.mergeCells; } });
Object.defineProperty(exports, "deleteRow", { enumerable: true, get: function () { return prosemirror_tables_1.deleteRow; } });
Object.defineProperty(exports, "rowIsHeader", { enumerable: true, get: function () { return prosemirror_tables_1.rowIsHeader; } });
Object.defineProperty(exports, "addRow", { enumerable: true, get: function () { return prosemirror_tables_1.addRow; } });
Object.defineProperty(exports, "addColSpan", { enumerable: true, get: function () { return prosemirror_tables_1.addColSpan; } });
Object.defineProperty(exports, "addColumn", { enumerable: true, get: function () { return prosemirror_tables_1.addColumn; } });
Object.defineProperty(exports, "colCount", { enumerable: true, get: function () { return prosemirror_tables_1.colCount; } });
Object.defineProperty(exports, "columnIsHeader", { enumerable: true, get: function () { return prosemirror_tables_1.columnIsHeader; } });
Object.defineProperty(exports, "columnResizing", { enumerable: true, get: function () { return prosemirror_tables_1.columnResizing; } });
Object.defineProperty(exports, "columnResizingPluginKey", { enumerable: true, get: function () { return prosemirror_tables_1.columnResizingPluginKey; } });
Object.defineProperty(exports, "updateColumnsOnResize", { enumerable: true, get: function () { return prosemirror_tables_1.updateColumnsOnResize; } });
Object.defineProperty(exports, "cellAround", { enumerable: true, get: function () { return prosemirror_tables_1.cellAround; } });
Object.defineProperty(exports, "findCell", { enumerable: true, get: function () { return prosemirror_tables_1.findCell; } });
Object.defineProperty(exports, "removeColSpan", { enumerable: true, get: function () { return prosemirror_tables_1.removeColSpan; } });
Object.defineProperty(exports, "moveCellForward", { enumerable: true, get: function () { return prosemirror_tables_1.moveCellForward; } });
Object.defineProperty(exports, "nextCell", { enumerable: true, get: function () { return prosemirror_tables_1.nextCell; } });
tslib_1.__exportStar(require("prosemirror-transform"), exports);
tslib_1.__exportStar(require("prosemirror-view"), exports);
var table_1 = require("./table");
Object.defineProperty(exports, "createTable", { enumerable: true, get: function () { return table_1.createTable; } });
Object.defineProperty(exports, "addRowAfter", { enumerable: true, get: function () { return table_1.addRowAfter; } });
Object.defineProperty(exports, "addRowBefore", { enumerable: true, get: function () { return table_1.addRowBefore; } });
Object.defineProperty(exports, "addColumnBefore", { enumerable: true, get: function () { return table_1.addColumnBefore; } });
Object.defineProperty(exports, "addColumnAfter", { enumerable: true, get: function () { return table_1.addColumnAfter; } });
Object.defineProperty(exports, "deleteColumn", { enumerable: true, get: function () { return table_1.deleteColumn; } });
Object.defineProperty(exports, "pmAddColumnBefore", { enumerable: true, get: function () { return table_1.pmAddColumnBefore; } });
Object.defineProperty(exports, "pmAddColumnAfter", { enumerable: true, get: function () { return table_1.pmAddColumnAfter; } });
Object.defineProperty(exports, "pmAddRowAfter", { enumerable: true, get: function () { return table_1.pmAddRowAfter; } });
Object.defineProperty(exports, "pmAddRowBefore", { enumerable: true, get: function () { return table_1.pmAddRowBefore; } });
Object.defineProperty(exports, "pmDeleteColumn", { enumerable: true, get: function () { return table_1.pmDeleteColumn; } });
