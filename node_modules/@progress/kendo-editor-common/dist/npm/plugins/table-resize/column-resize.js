"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.columnResizing = void 0;
var tslib_1 = require("tslib");
var prosemirror_state_1 = require("prosemirror-state");
var prosemirror_tables_1 = require("prosemirror-tables");
var prosemirror_view_1 = require("prosemirror-view");
var constants_1 = require("../../config/constants");
var table_view_1 = require("./table-view");
var utils_1 = require("./utils");
function columnResizing() {
    // tslint:disable-next-line:variable-name
    var View = table_view_1.TableView, handleWidth = 5, cellMinWidth = 25;
    var plugin = new prosemirror_state_1.Plugin({
        key: utils_1.tableColumnResizeKey,
        state: {
            init: function (_, state) {
                this.spec.props.nodeViews[prosemirror_tables_1.tableNodeTypes(state.schema).table.name] = function (node, view) { return new View(node, view); };
                return new ResizeState(-1, null);
            },
            apply: function (tr, prev) {
                return prev.apply(tr);
            }
        },
        props: {
            attributes: function (state) {
                if (utils_1.otherResizeHandle(utils_1.tableColumnResizeKey, state)) {
                    return null;
                }
                var pluginState = utils_1.tableColumnResizeKey.getState(state);
                return pluginState.activeHandle > -1 ? { class: 'resize-cursor' } : null;
            },
            handleDOMEvents: {
                mousemove: function (view, event) {
                    if (!utils_1.otherResizing(utils_1.tableColumnResizeKey, view.state)) {
                        handleMouseMove(view, event, handleWidth);
                    }
                    return false;
                },
                mouseleave: function (view) {
                    handleMouseLeave(view);
                    return false;
                },
                mousedown: function (view, event) {
                    return handleMouseDown(view, event, cellMinWidth);
                }
            },
            decorations: function (state) {
                if (!utils_1.otherResizing(utils_1.tableColumnResizeKey, state)) {
                    var pluginState = utils_1.tableColumnResizeKey.getState(state);
                    if (pluginState.activeHandle > -1) {
                        return handleDecorations(state, pluginState.activeHandle);
                    }
                }
                return prosemirror_view_1.DecorationSet.empty;
            },
            nodeViews: {}
        }
    });
    return plugin;
}
exports.columnResizing = columnResizing;
function pointsAtCell($pos) {
    return Boolean($pos.parent.type.spec.tableRole === 'row' && $pos.nodeAfter);
}
var ResizeState = /** @class */ (function () {
    function ResizeState(activeHandle, dragging) {
        this.activeHandle = activeHandle;
        this.dragging = dragging;
    }
    ResizeState.prototype.apply = function (tr) {
        var state = this, action = tr.getMeta(utils_1.tableColumnResizeKey);
        if (action && action.setHandle != null) {
            return new ResizeState(action.setHandle, null);
        }
        if (action && action.setDragging !== undefined) {
            return new ResizeState(state.activeHandle, action.setDragging);
        }
        if (state.activeHandle > -1 && tr.docChanged) {
            var handle = tr.mapping.map(state.activeHandle, -1);
            if (!pointsAtCell(tr.doc.resolve(handle))) {
                handle = -1;
            }
            state = new ResizeState(handle, state.dragging);
        }
        return state;
    };
    return ResizeState;
}());
function handleMouseMove(view, event, handleWidth) {
    var pluginState = utils_1.tableColumnResizeKey.getState(view.state);
    if (!pluginState.dragging) {
        var target = utils_1.domCellAround(event.target), cell = -1;
        if (target) {
            var indexes = utils_1.cellIndexes(target);
            var _a = target.getBoundingClientRect(), left = _a.left, right = _a.right;
            if (Math.abs(event.clientX - left) <= handleWidth && indexes.cellIndex > 0) {
                indexes.cellIndex -= target.colSpan;
                cell = utils_1.edgeCell(view, event, indexes);
            }
            else if (right - event.clientX > 0 && right - event.clientX <= handleWidth) {
                cell = utils_1.edgeCell(view, event, indexes);
            }
        }
        if (cell !== pluginState.activeHandle) {
            updateHandle(view, cell);
        }
    }
}
function handleMouseLeave(view) {
    var pluginState = utils_1.tableColumnResizeKey.getState(view.state);
    if (pluginState.activeHandle > -1 && !pluginState.dragging) {
        updateHandle(view, -1);
    }
}
function handleMouseDown(view, event, cellMinWidth) {
    var _a;
    var pluginState = utils_1.tableColumnResizeKey.getState(view.state);
    if (pluginState.activeHandle === -1 || pluginState.dragging) {
        return false;
    }
    var $cell = view.state.doc.resolve(pluginState.activeHandle);
    var row = $cell.parent;
    var cellIndex = $cell.index();
    var colSpan = 0;
    for (var i = 0; i <= cellIndex; i++) {
        colSpan += row.child(i).attrs.colspan;
    }
    var tableNode = $cell.node($cell.depth - 1);
    var dom = view.domAtPos(pluginState.activeHandle);
    var domCell = dom.node.childNodes[dom.offset];
    var tableDom = domCell.closest('table');
    var col, tableAttrs;
    if (tableNode.attrs[constants_1.colgroupAttr]) {
        var colgroup = tableDom.firstChild;
        col = colgroup.children[colSpan - 1];
        if (!col.style.width) {
            col.style.width = col.offsetWidth + 'px';
        }
    }
    else {
        var total = 0;
        for (var i = 0; i < row.childCount; i++) {
            total += row.child(i).attrs.colspan;
        }
        var colgroup = document.createElement('colgroup');
        var cols = new Array(total);
        for (var i = 0; i < total; i++) {
            cols[i] = document.createElement('col');
            colgroup.appendChild(cols[i]);
        }
        tableDom.insertBefore(colgroup, tableDom.firstChild);
        col = cols[cellIndex];
        col.style.width = col.offsetWidth + 'px';
        tableAttrs = tslib_1.__assign(tslib_1.__assign({}, tableNode.attrs), (_a = {}, _a[constants_1.colgroupAttr] = '<colgroup>' + cols.reduce(function (acc, cur) { return acc + cur.outerHTML; }, '') + '</colgroup>', _a));
    }
    var width = parseFloat(col.style.width);
    var tr = view.state.tr.setMeta(utils_1.tableColumnResizeKey, { setDragging: { startX: event.clientX, startWidth: width } });
    if (!tableDom.style.width) {
        var widths = Array.from(col.parentNode.children).map(function (c) { return c.style.width; });
        if (widths.every(Boolean)) {
            var sum = widths.reduce(function (acc, cur) { return acc + parseFloat(cur); }, 0);
            tableAttrs = utils_1.setNodeStyle(tableAttrs || tableNode.attrs, 'width', sum + 'px');
        }
    }
    if (tableAttrs) {
        var tablePos = $cell.posAtIndex(0, $cell.depth - 1) - 1;
        tr.setNodeMarkup(tablePos, null, tableAttrs);
    }
    view.dispatch(tr);
    function finish(ev) {
        ev.view.removeEventListener('mouseup', finish);
        ev.view.removeEventListener('mousemove', move);
        var curPluginState = utils_1.tableColumnResizeKey.getState(view.state);
        if (curPluginState.dragging) {
            var transaction = view.state.tr;
            updateColumnWidth(view, transaction, curPluginState.activeHandle, draggedWidth(curPluginState.dragging, ev, cellMinWidth));
            view.dispatch(transaction.setMeta(utils_1.tableColumnResizeKey, { setDragging: null }));
        }
    }
    function move(ev) {
        if (!ev.which) {
            return finish(ev);
        }
        var curPluginState = utils_1.tableColumnResizeKey.getState(view.state);
        var dragged = draggedWidth(curPluginState.dragging, ev, cellMinWidth);
        displayColumnWidth(view, curPluginState.activeHandle, dragged, cellMinWidth);
    }
    event.view.addEventListener('mouseup', finish);
    event.view.addEventListener('mousemove', move);
    event.preventDefault();
    return true;
}
function draggedWidth(dragging, event, cellMinWidth) {
    var offset = event.clientX - dragging.startX;
    return Math.max(cellMinWidth, dragging.startWidth + offset);
}
function updateHandle(view, value) {
    var tr = view.state.tr;
    tr.setMeta('addToHistory', false);
    tr.setMeta(utils_1.tableColumnResizeKey, { setHandle: value });
    view.dispatch(tr);
}
function updateColumnWidth(view, tr, cell, _width) {
    var _a;
    var $cell = view.state.doc.resolve(cell);
    var tableNode = $cell.node(-1), start = $cell.start(-1);
    var tablePos = $cell.posAtIndex(0, $cell.depth - 1) - 1;
    var tableDom = view.nodeDOM(start).closest('table');
    var attrs = tableNode.attrs;
    if (tableNode && attrs[constants_1.colgroupAttr]) {
        var colgroup = tableDom.firstChild;
        attrs = tslib_1.__assign(tslib_1.__assign({}, attrs), (_a = {}, _a[constants_1.colgroupAttr] = colgroup.outerHTML, _a));
    }
    var tableDomWidth = tableDom.style.width;
    if (tableDom && tableDomWidth && utils_1.parseStyle(attrs.style).width !== tableDomWidth) {
        attrs = utils_1.setNodeStyle(attrs, 'width', tableDomWidth);
    }
    tr.setNodeMarkup(tablePos, null, attrs);
}
function displayColumnWidth(view, cell, width, _cellMinWidth) {
    var $cell = view.state.doc.resolve(cell);
    var table = $cell.node(-1), start = $cell.start(-1);
    var col = prosemirror_tables_1.TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
    var dom = view.domAtPos($cell.start(-1)).node;
    if (dom.nodeName !== 'TABLE') {
        dom = dom.closest('table');
    }
    var tableDom = dom;
    var colgroup = tableDom.firstChild;
    var cols = Array.from(colgroup.children);
    cols[col].style.width = width + 'px';
    if (tableDom.style.width) {
        var widths = cols.map(function (c) { return c.style.width; });
        if (widths.every(Boolean)) {
            var sum = widths.reduce(function (acc, cur) { return acc + parseFloat(cur); }, 0);
            tableDom.style.width = sum + 'px';
        }
    }
}
function handleDecorations(state, cell) {
    var decorations = [];
    var $cell = state.doc.resolve(cell);
    var table = $cell.node(-1), map = prosemirror_tables_1.TableMap.get(table), start = $cell.start(-1);
    var cellsPositions = [];
    var cellPos = cell - start;
    var column = -1;
    for (var i = 0; i < map.height; i++) {
        cellsPositions.push(map.map.slice(i * map.width, (i * map.width) + map.width));
        if (column === -1) {
            column = cellsPositions[i].lastIndexOf(cellPos);
        }
    }
    var cells = [];
    cellsPositions.forEach(function (row) {
        var c = row[column];
        if (row[column] !== row[column + 1]) {
            cells.push(c);
        }
    });
    cells.forEach((function (cPos) {
        var pos = start + cPos + table.nodeAt(cPos).nodeSize - 1;
        var dom = document.createElement('div');
        dom.className = 'column-resize-handle';
        decorations.push(prosemirror_view_1.Decoration.widget(pos, dom));
    }));
    return prosemirror_view_1.DecorationSet.create(state.doc, decorations);
}
