import { NodeType, Node } from 'prosemirror-model';
import { EditorState, Transaction, Selection } from 'prosemirror-state';
import { CleanFormattingOptions } from './cleanFormatting';
/**
 * Changes the type or the attributes of the passed node.
 *
 * @example
 * See `cleanTextBlockFormatting` or `formatBlockElements` function.
 */
export declare const changeTextBlock: (tr: Transaction, node: Node, nodeType: NodeType, attrs?: {
    [key: string]: any;
}) => boolean;
/**
 * Traverses the selection and returns the block nodes in it.
 *
 * @example
 * See `cleanTextBlockFormatting` function.
 */
export declare const blockNodes: (state: EditorState | {
    doc: Node;
    selection: Selection;
}, options?: {
    blocksInSelection: boolean;
}) => Array<Node>;
export declare const formatBlockElements: (value: 'p' | 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6', commandName?: string) => (state: any, dispatch: any) => any;
/**
 * Removes the style and class attributes of text block elements.
 * Requires to dispatch the transaction.
 *
 * @example
 * See `cleanFormatting` function.
 */
export declare const cleanTextBlockFormatting: (tr: Transaction, options?: CleanFormattingOptions) => void;
export declare const getBlockFormats: (state: EditorState) => Array<string>;
export declare const addStyles: (node: Node, stylesToApply: Array<{
    name: string;
    value: string;
}>) => {};
export declare const hasNode: (state: EditorState, nodeType: NodeType) => boolean;
export declare const parentBlockFormat: (state: EditorState) => string | null;
/**
 * **Deprecated.** Use `parentBlockFormat` function instead.
 */
export declare const activeNode: (state: EditorState) => {
    tag: string;
};
