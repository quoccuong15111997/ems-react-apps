var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { classNames, IconWrap } from '@progress/kendo-react-common';
import { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';
import { messages, headerStatusUploading, headerStatusUploaded } from './messages';
import { checkIcon, exclamationCircleIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var UploadStatus = /** @class */ (function (_super) {
    __extends(UploadStatus, _super);
    function UploadStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UploadStatus.prototype.render = function () {
        var _a = this.props, isUploading = _a.isUploading, isUploaded = _a.isUploaded, isUploadFailed = _a.isUploadFailed;
        var className = classNames('k-upload-status');
        var statusName = (!isUploading && !isUploadFailed && isUploaded) ? 'check' :
            (!isUploading && isUploadFailed ? 'exclamation-circle' : (isUploading ? 'upload' : ''));
        var svgIcon = (!isUploading && !isUploadFailed && isUploaded) ? { icon: checkIcon } :
            (!isUploading && isUploadFailed ? { icon: exclamationCircleIcon } : {}); // (isUploading ? 'loading' : ''));
        var statusText = '';
        var localizationService = provideLocalizationService(this);
        if (isUploading) {
            statusText = localizationService
                .toLanguageString(headerStatusUploading, messages[headerStatusUploading]);
        }
        else if (isUploaded || isUploadFailed) {
            statusText = localizationService
                .toLanguageString(headerStatusUploaded, messages[headerStatusUploaded]);
        }
        return (React.createElement("div", { className: className },
            React.createElement(IconWrap, __assign({ name: statusName }, svgIcon)),
            statusText));
    };
    return UploadStatus;
}(React.Component));
export { UploadStatus };
registerForLocalization(UploadStatus);
