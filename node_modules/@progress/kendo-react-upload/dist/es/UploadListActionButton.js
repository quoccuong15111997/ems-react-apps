var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { classNames } from '@progress/kendo-react-common';
import { Button } from '@progress/kendo-react-buttons';
import { cancelIcon, xIcon, arrowRotateCwSmallIcon } from '@progress/kendo-svg-icons';
import { UploadFileStatus } from './interfaces/UploadFileStatus';
import { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';
import { messages, cancel, retry, remove } from './messages';
/**
 * @hidden
 */
var UploadListActionButton = /** @class */ (function (_super) {
    __extends(UploadListActionButton, _super);
    function UploadListActionButton(props) {
        var _this = _super.call(this, props) || this;
        _this.buttonClassNames = function (type) {
            var _a = _this.state, actionFocused = _a.actionFocused, retryFocused = _a.retryFocused;
            return classNames('k-icon-button k-upload-action', _this.props.disabled ? 'k-disabled' : '', (actionFocused && type === 'action') || (retryFocused && type === 'retry') ? 'k-focus' : '');
        };
        _this.onRetryFocus = function () {
            _this.setState({
                retryFocused: true
            });
        };
        _this.onRetryBlur = function () {
            _this.setState({
                retryFocused: false
            });
        };
        _this.onActionFocus = function () {
            _this.setState({
                actionFocused: true
            });
        };
        _this.onActionBlur = function () {
            _this.setState({
                actionFocused: false
            });
        };
        _this.onActionClick = function () {
            var _a = _this.props, status = _a.status, uid = _a.uid, disabled = _a.disabled, onCancel = _a.onCancel, onRemove = _a.onRemove;
            if (disabled || status === UploadFileStatus.Removing) {
                return;
            }
            if (status === UploadFileStatus.Uploading) {
                onCancel.call(undefined, uid);
            }
            else {
                onRemove.call(undefined, uid);
            }
        };
        _this.onRetryClick = function () {
            var _a = _this.props, uid = _a.uid, disabled = _a.disabled, onRetry = _a.onRetry;
            if (disabled) {
                return;
            }
            onRetry.call(undefined, uid);
        };
        _this.state = {
            retryFocused: false,
            actionFocused: false
        };
        return _this;
    }
    UploadListActionButton.prototype.actionButtonTitle = function (status, localizationService) {
        if (status === UploadFileStatus.Uploading) {
            return localizationService.toLanguageString(cancel, messages[cancel]);
        }
        return localizationService.toLanguageString(remove, messages[remove]);
    };
    UploadListActionButton.prototype.retryButtonTitle = function (localizationService) {
        return localizationService.toLanguageString(retry, messages[retry]);
    };
    UploadListActionButton.prototype.render = function () {
        var _a = this.props, status = _a.status, progress = _a.progress;
        var isRetryVisible = status === UploadFileStatus.UploadFailed;
        var isProgressVisible = status === UploadFileStatus.Uploading;
        var isActionHidden = (status === UploadFileStatus.Uploaded || status === UploadFileStatus.Initial) &&
            !this.props.async.removeUrl;
        var localizationService = provideLocalizationService(this);
        var percent = '%';
        return (React.createElement("span", { className: 'k-upload-actions' },
            isProgressVisible ?
                React.createElement("span", { className: 'k-upload-pct' },
                    progress,
                    percent) :
                undefined,
            isRetryVisible ?
                (React.createElement(Button, { type: "button", themeColor: 'base', fillMode: 'flat', tabIndex: -1, className: this.buttonClassNames('retry'), onFocus: this.onRetryFocus, onBlur: this.onRetryBlur, onClick: this.onRetryClick, "aria-label": this.retryButtonTitle(localizationService), title: this.retryButtonTitle(localizationService), icon: 'arrow-rotate-cw-small', svgIcon: arrowRotateCwSmallIcon })) :
                undefined,
            !isActionHidden ?
                (React.createElement(Button, { type: "button", themeColor: 'base', fillMode: 'flat', tabIndex: -1, className: this.buttonClassNames('action'), onFocus: this.onActionFocus, onBlur: this.onActionBlur, onClick: this.onActionClick, "aria-label": this.actionButtonTitle(status, localizationService), title: this.actionButtonTitle(status, localizationService), icon: status === UploadFileStatus.Uploading ? 'cancel' : 'x', svgIcon: status === UploadFileStatus.Uploading ? cancelIcon : xIcon })) :
                undefined));
    };
    return UploadListActionButton;
}(React.Component));
export { UploadListActionButton };
registerForLocalization(UploadListActionButton);
