var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { useExpansion, EXPANSION_ACTION } from './useExpansion';
import { compareFields } from '../utils';
import { PIVOT_CONFIGURATOR_ACTION as COMMON_CONFIGURATOR_ACTION, configuratorReducer } from '@progress/kendo-pivotgrid-common';
var EXTENDED_CONFIGURATOR_ACTION;
(function (EXTENDED_CONFIGURATOR_ACTION) {
    EXTENDED_CONFIGURATOR_ACTION["toggleExpansion"] = "PIVOT_CONFIGURATOR_ACTION_TOGGLE_EXPANSION";
})(EXTENDED_CONFIGURATOR_ACTION || (EXTENDED_CONFIGURATOR_ACTION = {}));
;
/**
 * @hidden
 */
export var PIVOT_CONFIGURATOR_ACTION = __assign(__assign({}, COMMON_CONFIGURATOR_ACTION), EXTENDED_CONFIGURATOR_ACTION);
;
/**
 * @hidden
 */
export var usePivotConfiguratorEditor = function (props, target) {
    var rowAxes = props.valueGetter('rowAxes');
    var columnAxes = props.valueGetter('columnAxes');
    var measureAxes = props.valueGetter('measureAxes');
    var sort = props.valueGetter('sort');
    var filter = props.valueGetter('filter');
    var _a = useExpansion([], undefined, target, compareFields), expanded = _a[0], dispatchExpansion = _a[1];
    var _b = React.useState(null), dragItem = _b[0], setDragItem = _b[1];
    var _c = React.useState(null), dropZone = _c[0], setDropZone = _c[1];
    var _d = React.useState(null), dropTarget = _d[0], setDropTarget = _d[1];
    var _e = React.useState(null), dropDirection = _e[0], setDropDirection = _e[1];
    var handlePivotConfiguratorEditorAction = function (action, syntheticEvent) {
        switch (action.type) {
            case PIVOT_CONFIGURATOR_ACTION.toggleExpansion: {
                dispatchExpansion({ type: EXPANSION_ACTION.toggle, payload: action.payload }, syntheticEvent);
                break;
            }
            default:
                var newState = configuratorReducer({
                    filter: (action.override && action.override.filter !== undefined) ? action.override.filter : filter,
                    sort: (action.override && action.override.sort !== undefined) ? action.override.sort : sort,
                    rowAxes: (action.override && action.override.rowAxes !== undefined) ? action.override.rowAxes : rowAxes,
                    columnAxes: (action.override && action.override.columnAxes !== undefined) ? action.override.columnAxes : columnAxes,
                    measureAxes: (action.override && action.override.measureAxes !== undefined) ? action.override.measureAxes : measureAxes,
                    dragItem: (action.override && action.override.dragItem !== undefined) ? action.override.dragItem : dragItem,
                    dropDirection: (action.override && action.override.dropDirection !== undefined) ? action.override.dropDirection : dropDirection,
                    dropTarget: (action.override && action.override.dropTarget !== undefined) ? action.override.dropTarget : dropTarget,
                    dropZone: (action.override && action.override.dropZone !== undefined) ? action.override.dropZone : dropZone
                }, action);
                if (newState.columnAxes !== undefined) {
                    props.onChange('columnAxes', { value: newState.columnAxes });
                }
                if (newState.rowAxes !== undefined) {
                    props.onChange('rowAxes', { value: newState.rowAxes });
                }
                if (newState.measureAxes !== undefined) {
                    props.onChange('measureAxes', { value: newState.measureAxes });
                }
                if (newState.sort !== undefined) {
                    props.onChange('sort', { value: newState.sort });
                }
                if (newState.filter !== undefined) {
                    props.onChange('filter', { value: newState.filter });
                }
                if (newState.dropDirection !== undefined) {
                    setDropDirection(newState.dropDirection);
                }
                if (newState.dropTarget !== undefined) {
                    setDropTarget(newState.dropTarget);
                }
                if (newState.dropZone !== undefined) {
                    setDropZone(newState.dropZone);
                }
                if (newState.dragItem !== undefined) {
                    setDragItem(newState.dragItem);
                }
                break;
        }
    };
    return [
        {
            dragItem: dragItem,
            dropTarget: dropTarget,
            dropZone: dropZone,
            dropDirection: dropDirection,
            columnAxes: columnAxes,
            rowAxes: rowAxes,
            measureAxes: measureAxes,
            sort: sort,
            filter: filter,
            expanded: expanded
        },
        handlePivotConfiguratorEditorAction
    ];
};
