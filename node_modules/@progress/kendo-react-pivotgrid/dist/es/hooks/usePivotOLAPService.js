var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* eslint-disable max-len */
import * as React from 'react';
import { fetchData, createDataState, fetchDiscover, addKPI, buildKPIMeasures } from '@progress/kendo-pivotgrid-common';
import { clone } from '@progress/kendo-react-common';
;
/**
 * A [custom React hook](https://reactjs.org/docs/hooks-custom.html) which provides data-binding to an OLAP service.
 */
export var usePivotOLAPService = function (args) {
    var _a = React.useState(true), loading = _a[0], setLoading = _a[1];
    var _b = React.useState({ data: [], columns: [], rows: [] }), dataState = _b[0], setDataState = _b[1];
    var _c = React.useState([]), fields = _c[0], setFields = _c[1];
    var _d = React.useState(args.defaultColumnAxes || []), columnAxes = _d[0], setColumnAxes = _d[1];
    var _e = React.useState(args.defaultRowAxes || []), rowAxes = _e[0], setRowAxes = _e[1];
    var _f = React.useState(args.defaultMeasureAxes || []), measureAxes = _f[0], setMeasureAxes = _f[1];
    var _g = React.useState(args.defaultSort || []), sort = _g[0], setSort = _g[1];
    var _h = React.useState(args.defaultFilter || []), filter = _h[0], setFilter = _h[1];
    var handleRowAxesChange = function (event) {
        setRowAxes(event.value);
    };
    var handleColumnAxesChange = function (event) {
        setColumnAxes(event.value);
    };
    var handleMeasureAxesChange = function (event) {
        setMeasureAxes(event.value);
    };
    var handleSortChange = function (event) {
        setSort(event.value);
    };
    var handleFilterChange = function (event) {
        setFilter(event.value);
    };
    React.useEffect(function () {
        setLoading(true);
        var options = {
            connection: {
                catalog: args.catalog,
                cube: args.cube
            },
            columnAxes: columnAxes.slice(),
            rowAxes: rowAxes.slice(),
            measureAxes: measureAxes,
            sort: sort,
            filter: filter
        };
        setTimeout(function () {
            fetchData({ url: args.url }, clone(options))
                .then(createDataState)
                .then(function (newDataState) {
                setDataState(newDataState);
                setLoading(false);
            });
        });
    }, [columnAxes, rowAxes, measureAxes, filter, sort, args.cube, args.catalog, args.url]);
    React.useEffect(function () {
        setLoading(true);
        var options = {
            connection: {
                catalog: args.catalog,
                cube: args.cube
            },
            restrictions: {
                catalogName: args.catalog,
                cubeName: args.cube
            },
            command: 'schemaDimensions'
        };
        fetchDiscover({ url: args.url }, options)
            .then(function (newFields) {
            addKPI(newFields);
            setFields(newFields);
            setLoading(false);
        });
    }, [args.catalog, args.cube, args.url]);
    var getAxis = function (nodes, target) {
        if (nodes === void 0) { nodes = []; }
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (String(node.name) === String(target.name)) {
                return node;
            }
        }
        return null;
    };
    var getField = function (nodes, target) {
        if (nodes === void 0) { nodes = []; }
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.uniqueName === target.uniqueName) {
                return node;
            }
            var result = getField(node.children, target);
            if (result !== null) {
                return result;
            }
        }
        return null;
    };
    var loadAxisFields = function (axis) { return __awaiter(void 0, void 0, void 0, function () {
        var command, dimensionUniqueName, hierarchyUniqueName, levelUniqueName, memberUniqueName, treeOp, options;
        return __generator(this, function (_a) {
            if (axis.name) {
                command = 'schemaMembers';
                levelUniqueName = "".concat(String(axis.name), ".[(ALL)]");
            }
            options = {
                connection: {
                    catalog: args.catalog,
                    cube: args.cube
                },
                restrictions: {
                    catalogName: args.catalog,
                    cubeName: args.cube,
                    hierarchyUniqueName: hierarchyUniqueName,
                    dimensionUniqueName: dimensionUniqueName,
                    levelUniqueName: levelUniqueName,
                    memberUniqueName: memberUniqueName,
                    treeOp: treeOp
                },
                command: command
            };
            return [2 /*return*/, fetchDiscover({ url: args.url }, options)];
        });
    }); };
    var loadSubFields = function (axis) { return __awaiter(void 0, void 0, void 0, function () {
        var command, dimensionUniqueName, hierarchyUniqueName, levelUniqueName, memberUniqueName, treeOp, options;
        return __generator(this, function (_a) {
            if (axis.uniqueName) {
                command = 'schemaMembers';
                memberUniqueName = axis.uniqueName.replace(/\&/g, '&amp;');
                treeOp = 1;
            }
            options = {
                connection: {
                    catalog: args.catalog,
                    cube: args.cube
                },
                restrictions: {
                    catalogName: args.catalog,
                    cubeName: args.cube,
                    hierarchyUniqueName: hierarchyUniqueName,
                    dimensionUniqueName: dimensionUniqueName,
                    levelUniqueName: levelUniqueName,
                    memberUniqueName: memberUniqueName,
                    treeOp: treeOp
                },
                command: command
            };
            return [2 /*return*/, fetchDiscover({ url: args.url }, options)];
        });
    }); };
    var loadFields = function (field) { return __awaiter(void 0, void 0, void 0, function () {
        var command, dimensionUniqueName, hierarchyUniqueName, levelUniqueName, memberUniqueName, treeOp, options;
        return __generator(this, function (_a) {
            if (field.type === 2) {
                command = 'schemaMeasures';
            }
            else if (field.dimensionUniqueName) {
                command = 'schemaLevels';
                hierarchyUniqueName = field.uniqueName;
            }
            else {
                command = 'schemaHierarchies';
                dimensionUniqueName = field.uniqueName;
            }
            options = {
                connection: {
                    catalog: args.catalog,
                    cube: args.cube
                },
                restrictions: {
                    catalogName: args.catalog,
                    cubeName: args.cube,
                    hierarchyUniqueName: hierarchyUniqueName,
                    dimensionUniqueName: dimensionUniqueName,
                    levelUniqueName: levelUniqueName,
                    memberUniqueName: memberUniqueName,
                    treeOp: treeOp
                },
                command: command
            };
            return [2 /*return*/, fetchDiscover({ url: args.url }, options)];
        });
    }); };
    var loadKPIs = function () { return __awaiter(void 0, void 0, void 0, function () {
        var options;
        return __generator(this, function (_a) {
            options = {
                connection: {
                    catalog: args.catalog,
                    cube: args.cube
                },
                restrictions: {
                    catalogName: args.catalog,
                    cubeName: args.cube
                },
                command: 'schemaKPIs'
            };
            return [2 /*return*/, fetchDiscover({ url: args.url }, options)];
        });
    }); };
    var handleFieldExpand = function (event) { return __awaiter(void 0, void 0, void 0, function () {
        var newFields, field, KPIs, _a, additionalFields;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    newFields = fields.slice();
                    field = getField(newFields, event.value);
                    if (!(field && field.uniqueName === '[KPIs]')) return [3 /*break*/, 2];
                    _a = normalizeKPIs;
                    return [4 /*yield*/, loadKPIs()];
                case 1:
                    KPIs = _a.apply(void 0, [_b.sent()]);
                    field.children = KPIs;
                    return [3 /*break*/, 5];
                case 2:
                    if (!(field && field.type === 'kpi')) return [3 /*break*/, 3];
                    field.children = buildKPIMeasures(field);
                    return [3 /*break*/, 5];
                case 3:
                    if (!(field && !field.children)) return [3 /*break*/, 5];
                    return [4 /*yield*/, loadFields(field)];
                case 4:
                    additionalFields = _b.sent();
                    field.children = additionalFields;
                    _b.label = 5;
                case 5:
                    setFields(newFields);
                    return [2 /*return*/];
            }
        });
    }); };
    var handleAxisFilterFieldsExpandChange = function (event) { return __awaiter(void 0, void 0, void 0, function () {
        var map, _a, axes, setter, newAxes, axis, axisFields;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!event) {
                        return [2 /*return*/];
                    }
                    map = {
                        rowAxes: [rowAxes, setRowAxes],
                        columnAxes: [columnAxes, setColumnAxes],
                        measureAxes: [measureAxes, setMeasureAxes]
                    };
                    _a = map[event.target.props.axes], axes = _a[0], setter = _a[1];
                    newAxes = axes.slice();
                    axis = getAxis(newAxes, event.target.props.dataItem);
                    if (!(axis && !axis.fields)) return [3 /*break*/, 2];
                    return [4 /*yield*/, loadAxisFields(axis)];
                case 1:
                    axisFields = _b.sent();
                    axis.fields = axisFields;
                    setter(newAxes);
                    _b.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); };
    var handleAxisFilterFieldExpand = function (event) { return __awaiter(void 0, void 0, void 0, function () {
        var map, _a, axes, setter, newAxes, axis, newFields, field, axisFilterFieldChildren;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!event) {
                        return [2 /*return*/];
                    }
                    map = {
                        rowAxes: [rowAxes, setRowAxes],
                        columnAxes: [columnAxes, setColumnAxes],
                        measureAxes: [measureAxes, setMeasureAxes]
                    };
                    _a = map[event.target.props.axes], axes = _a[0], setter = _a[1];
                    newAxes = axes.slice();
                    axis = getAxis(newAxes, event.target.props.dataItem);
                    if (!axis) return [3 /*break*/, 2];
                    newFields = (axis.fields || []).slice();
                    field = getField(newFields, event.value);
                    if (!(field && (!field.children || !field.children.length))) return [3 /*break*/, 2];
                    return [4 /*yield*/, loadSubFields(field)];
                case 1:
                    axisFilterFieldChildren = _b.sent();
                    field.children = axisFilterFieldChildren;
                    axis.fields = newFields;
                    setter(newAxes);
                    _b.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); };
    return {
        pivotProps: {
            rowAxes: rowAxes,
            columnAxes: columnAxes,
            data: dataState.data,
            rows: dataState.rows,
            columns: dataState.columns,
            onRowAxesChange: handleRowAxesChange,
            onColumnAxesChange: handleColumnAxesChange
        },
        configuratorProps: {
            sort: sort,
            onSortChange: handleSortChange,
            filter: filter,
            onFilterChange: handleFilterChange,
            data: fields,
            rowAxes: rowAxes,
            columnAxes: columnAxes,
            measureAxes: measureAxes,
            onRowAxesChange: handleRowAxesChange,
            onColumnAxesChange: handleColumnAxesChange,
            onMeasureAxesChange: handleMeasureAxesChange,
            onFieldsEditorFieldExpand: handleFieldExpand,
            onAxisFilterFieldExpand: handleAxisFilterFieldExpand,
            onAxisFilterFieldsExpandChange: handleAxisFilterFieldsExpandChange
        },
        state: {
            loading: loading
        }
    };
};
/**
 * A [React higher-order component](https://reactjs.org/docs/higher-order-components.html) which provides data-binding to an OLAP service.
 */
export var PivotOLAPService = function (props) {
    var args = usePivotOLAPService(props);
    return props.children(args);
};
var normalizeKPIs = function (data) {
    for (var idx = 0, length_1 = data.length; idx < length_1; idx++) {
        data[idx].uniqueName = data[idx].name;
        data[idx].type = 'kpi';
    }
    return data;
};
