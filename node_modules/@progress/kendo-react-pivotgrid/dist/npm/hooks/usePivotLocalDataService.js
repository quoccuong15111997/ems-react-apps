"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PivotLocalDataService = exports.usePivotLocalDataService = void 0;
/* eslint-disable max-len */
var React = require("react");
var kendo_pivotgrid_common_1 = require("@progress/kendo-pivotgrid-common");
;
var dataField = 'aggregate';
var columnsData = 'columns';
var bindingFields = { dataField: dataField, columnsData: columnsData };
var stringSeparator = '&';
/**
 * A [custom React hook](https://reactjs.org/docs/hooks-custom.html) which provides data-binding to local data.
 */
var usePivotLocalDataService = function (args) {
    var _a = React.useState(true), loading = _a[0], setLoading = _a[1];
    var _b = React.useState(args.defaultColumnAxes || []), columnAxes = _b[0], setColumnAxes = _b[1];
    var _c = React.useState(args.defaultRowAxes || []), rowAxes = _c[0], setRowAxes = _c[1];
    var _d = React.useState(args.defaultMeasureAxes || []), measureAxes = _d[0], setMeasureAxes = _d[1];
    var _e = React.useState(args.defaultSort || []), sort = _e[0], setSort = _e[1];
    var _f = React.useState(args.defaultFilter || []), filter = _f[0], setFilter = _f[1];
    var _g = React.useState(new Map()), dataTree = _g[0], setDataTree = _g[1];
    var handleRowAxesChange = React.useCallback(function (event) {
        setRowAxes(event.value);
    }, []);
    var handleColumnAxesChange = React.useCallback(function (event) {
        setColumnAxes(event.value);
    }, []);
    var handleMeasureAxesChange = function (event) {
        setMeasureAxes(event.value);
    };
    var handleSortChange = function (event) {
        setSort(event.value);
    };
    var handleFilterChange = function (event) {
        setFilter(event.value);
    };
    var rootColumnAxes = React.useMemo(function () { return Array.from((0, kendo_pivotgrid_common_1.rootFields)(columnAxes).keys()).join(stringSeparator); }, [columnAxes]);
    var rootRowAxes = React.useMemo(function () { return Array.from((0, kendo_pivotgrid_common_1.rootFields)(rowAxes).keys()).join(stringSeparator); }, [rowAxes]);
    var createAxisSettings = React.useCallback(function (key) { return (__assign({ key: key }, args.dimensions[key])); }, [args.dimensions]);
    var columnSettings = React.useMemo(function () { return rootColumnAxes.split(stringSeparator).map(createAxisSettings); }, [rootColumnAxes, createAxisSettings]);
    var rowSettings = React.useMemo(function () { return rootRowAxes.split(stringSeparator).map(createAxisSettings); }, [rootRowAxes, createAxisSettings]);
    var measuresSettings = React.useMemo(function () { return measureAxes.map(function (m) { return args.measures.find(function (meas) { return String(meas.name) === String(m.name); }); }).filter(Boolean); }, [measureAxes, args.measures]);
    React.useEffect(function () {
        setLoading(true);
        setTimeout(function () {
            var result = (0, kendo_pivotgrid_common_1.createDataTree)(args.data, rowSettings, columnSettings, measuresSettings, bindingFields, filter);
            setDataTree(result);
            setLoading(false);
        }, 0);
    }, [args.data, rowSettings, columnSettings, measuresSettings, filter]);
    var configuratorData = React.useMemo(function () { return (0, kendo_pivotgrid_common_1.createFlatSchemaDimensions)(args.dimensions, args.measures); }, [args.dimensions, args.measures]);
    var dataState = React.useMemo(function () { return (0, kendo_pivotgrid_common_1.createLocalDataState)({
        dataTree: dataTree,
        rowSettings: rowSettings,
        columnSettings: columnSettings,
        rowAxes: rowAxes,
        columnAxes: columnAxes,
        measures: measuresSettings,
        sort: sort,
        fields: bindingFields
    }); }, [columnAxes, columnSettings, dataTree, rowAxes, rowSettings, sort]);
    return {
        pivotProps: {
            rowAxes: rowAxes,
            columnAxes: columnAxes,
            data: dataState.data,
            rows: dataState.rows,
            columns: dataState.columns,
            onRowAxesChange: handleRowAxesChange,
            onColumnAxesChange: handleColumnAxesChange
        },
        configuratorProps: {
            sort: sort,
            onSortChange: handleSortChange,
            filter: filter,
            onFilterChange: handleFilterChange,
            data: configuratorData,
            rowAxes: rowAxes,
            columnAxes: columnAxes,
            measureAxes: measureAxes,
            onRowAxesChange: handleRowAxesChange,
            onColumnAxesChange: handleColumnAxesChange,
            onMeasureAxesChange: handleMeasureAxesChange
        },
        state: {
            loading: loading
        }
    };
};
exports.usePivotLocalDataService = usePivotLocalDataService;
/**
 * A [React higher-order component](https://reactjs.org/docs/higher-order-components.html) which provides data-binding to local data.
 */
var PivotLocalDataService = function (props) {
    var args = (0, exports.usePivotLocalDataService)(props);
    return props.children(args);
};
exports.PivotLocalDataService = PivotLocalDataService;
