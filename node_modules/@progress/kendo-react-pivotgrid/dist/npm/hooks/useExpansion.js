"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useExpansion = exports.EXPANSION_ACTION = void 0;
var React = require("react");
/**
 * @hidden
 */
var EXPANSION_ACTION;
(function (EXPANSION_ACTION) {
    EXPANSION_ACTION["toggle"] = "EXPAND_TOGGLE";
    EXPANSION_ACTION["expand"] = "EXPAND_EXPAND";
    EXPANSION_ACTION["collapse"] = "EXPAND_COLLAPSE";
})(EXPANSION_ACTION = exports.EXPANSION_ACTION || (exports.EXPANSION_ACTION = {}));
/**
 * @hidden
 */
var expansionReducer = function (state, action, compare) {
    switch (action.type) {
        case EXPANSION_ACTION.toggle:
            if (Array.isArray(state)) {
                if (state.find(function (s) { return compare(s, action.payload); })) {
                    return __spreadArray([], state.filter(function (s) { return !compare(s, action.payload); }), true);
                }
                else {
                    return __spreadArray(__spreadArray([], state, true), [action.payload], false);
                }
            }
            else {
                if (compare(state, action.payload)) {
                    return null;
                }
                else {
                    return action.payload;
                }
            }
        case EXPANSION_ACTION.expand:
            if (Array.isArray(state)) {
                if (!state.find(function (s) { return compare(s, action.payload); })) {
                    return __spreadArray(__spreadArray([], state, true), [action.payload], false);
                }
            }
            else {
                if (!compare(state, action.payload)) {
                    return action.payload;
                }
            }
            break;
        case EXPANSION_ACTION.collapse:
            if (Array.isArray(state)) {
                if (state.find(function (s) { return compare(s, action.payload); })) {
                    return __spreadArray([], state.filter(function (s) { return !compare(s, action.payload); }), true);
                }
            }
            else {
                if (compare(state, action.payload)) {
                    null;
                }
            }
            break;
        default:
            return state;
    }
};
/**
 * @hidden
 */
var useExpansion = function (defaultValue, callback, target, compare) {
    if (defaultValue === void 0) { defaultValue = []; }
    if (compare === void 0) { compare = function (a, b) { return a === b; }; }
    var _a = React.useState(defaultValue), expanded = _a[0], setExpanded = _a[1];
    var handleExpandAction = function (action, syntheticEvent) {
        var newState = expansionReducer(expanded, action, compare);
        if (callback) {
            callback.call(undefined, {
                value: newState,
                target: target.current,
                syntheticEvent: syntheticEvent
            });
        }
        setExpanded(newState);
    };
    return [expanded, handleExpandAction];
};
exports.useExpansion = useExpansion;
