"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PivotGridConfigurator = void 0;
var React = require("react");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_form_1 = require("@progress/kendo-react-form");
var ConfiguratorEditor_1 = require("./ConfiguratorEditor");
var messages_1 = require("../messages");
/**
 * Represents the [KendoReact PivotGridConfigurator component]({% slug api_pivotgrid_pivotgridconfiguratorprops %}).
 */
exports.PivotGridConfigurator = React.forwardRef(function (props, ref) {
    var _a = __assign(__assign({}, defaultProps), props), horizontal = _a.horizontal, data = _a.data, rowAxes = _a.rowAxes, columnAxes = _a.columnAxes, measureAxes = _a.measureAxes;
    var element = React.useRef(null);
    var target = React.useRef(null);
    var form = React.useRef(null);
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var _b = (0, kendo_react_common_1.useCustomComponent)(props.editor || defaultProps.editor), EditorComponent = _b[0], EditorProps = _b[1];
    var _c = (0, kendo_react_common_1.useCustomComponent)(props.form || defaultProps.form), FormComponent = _c[0], FormProps = _c[1];
    var _d = (0, kendo_react_common_1.useCustomComponent)(props.formElement || defaultProps.formElement), FormElementComponent = _d[0], FormElementProps = _d[1];
    React.useImperativeHandle(target, function () { return ({ props: props, element: element.current }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleFormSubmit = function (newDataItem, syntheticEvent) {
        if (props.onRowAxesChange) {
            props.onRowAxesChange({
                target: target.current,
                value: newDataItem.rowAxes,
                syntheticEvent: syntheticEvent
            });
        }
        if (props.onColumnAxesChange) {
            props.onColumnAxesChange({
                target: target.current,
                value: newDataItem.columnAxes,
                syntheticEvent: syntheticEvent
            });
        }
        if (props.onMeasureAxesChange) {
            props.onMeasureAxesChange({
                target: target.current,
                value: newDataItem.measureAxes,
                syntheticEvent: syntheticEvent
            });
        }
        if (props.onSortChange) {
            props.onSortChange({
                target: target.current,
                value: newDataItem.sort,
                syntheticEvent: syntheticEvent
            });
        }
        if (props.onFilterChange) {
            props.onFilterChange({
                target: target.current,
                value: newDataItem.filter,
                syntheticEvent: syntheticEvent
            });
        }
    };
    var initialValues = {
        rowAxes: rowAxes,
        columnAxes: columnAxes,
        measureAxes: measureAxes,
        sort: props.sort,
        filter: props.filter
    };
    React.useEffect(function () { if (form.current) {
        form.current.onChange('rowAxes', { value: rowAxes });
    } }, [rowAxes]);
    React.useEffect(function () { if (form.current) {
        form.current.onChange('columnAxes', { value: columnAxes });
    } }, [columnAxes]);
    React.useEffect(function () { if (form.current) {
        form.current.onChange('measureAxes', { value: measureAxes });
    } }, [measureAxes]);
    React.useEffect(function () { if (form.current) {
        form.current.onChange('sort', { value: props.sort });
    } }, [props.sort]);
    React.useEffect(function () { if (form.current) {
        form.current.onChange('filter', { value: props.filter });
    } }, [props.filter]);
    return (React.createElement("div", { ref: element, id: props.id, tabIndex: props.tabIndex, style: props.style, className: (0, kendo_react_common_1.classNames)('k-pivotgrid-configurator', props.className) },
        React.createElement("div", { className: (0, kendo_react_common_1.classNames)('k-pivotgrid-configurator-panel', 'k-pivotgrid-configurator-push', {
                'k-pivotgrid-configurator-horizontal': horizontal,
                'k-pivotgrid-configurator-vertical': !horizontal
            }) },
            React.createElement("div", { className: "k-pivotgrid-configurator-header" },
                React.createElement("div", { className: "k-pivotgrid-configurator-header-text" }, localization.toLanguageString(messages_1.configuratorTitle, messages_1.messages[messages_1.configuratorTitle]))),
            React.createElement(FormComponent, __assign({ ref: (0, kendo_react_common_1.canUseRef)(FormComponent) ? form : undefined, initialValues: initialValues, onSubmit: handleFormSubmit, render: function (renderProps) { return (React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "k-pivotgrid-configurator-content" },
                        React.createElement(FormElementComponent, __assign({ horizontal: horizontal }, FormElementProps),
                            React.createElement(EditorComponent, __assign({}, renderProps, { horizontal: props.horizontal, onFieldsEditorFieldExpand: props.onFieldsEditorFieldExpand, onFieldsEditorFieldCheck: props.onFieldsEditorFieldCheck, onAxisFilterFieldExpand: props.onAxisFilterFieldExpand, onAxisFilterFieldsExpandChange: props.onAxisFilterFieldsExpandChange, data: data }, EditorProps)))),
                    React.createElement("div", { className: "k-pivotgrid-configurator-actions k-actions k-hstack k-justify-content-end" },
                        React.createElement(kendo_react_buttons_1.Button, { type: "submit", onClick: renderProps.onFormReset }, localization.toLanguageString(messages_1.configuratorCancel, messages_1.messages[messages_1.configuratorCancel])),
                        React.createElement(kendo_react_buttons_1.Button, { themeColor: 'primary', type: "submit", onClick: renderProps.onSubmit }, localization.toLanguageString(messages_1.configuratorApply, messages_1.messages[messages_1.configuratorApply]))))); } }, FormProps)))));
});
var defaultProps = {
    form: kendo_react_form_1.Form,
    formElement: kendo_react_form_1.FormElement,
    editor: ConfiguratorEditor_1.PivotGridConfiguratorEditor,
    horizontal: false,
    data: [],
    columnAxes: [],
    rowAxes: [],
    measureAxes: []
};
exports.PivotGridConfigurator.defaultProps = defaultProps;
exports.PivotGridConfigurator.displayName = 'KendoReactPivotGridConfigurator';
