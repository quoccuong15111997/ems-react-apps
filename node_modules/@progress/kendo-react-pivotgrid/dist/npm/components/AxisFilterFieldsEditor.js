"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PivotGridAxisFilterFieldsEditor = void 0;
var React = require("react");
var kendo_react_treeview_1 = require("@progress/kendo-react-treeview");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_react_indicators_1 = require("@progress/kendo-react-indicators");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var utils_1 = require("../utils");
var messages_1 = require("../messages");
var hooks_1 = require("../hooks");
var shared_1 = require("../shared");
/* eslint-enable max-len */
/**
 * Represents the [KendoReact PivotGridAxisFilterFieldsEditor component]({% slug api_pivotgrid_pivotgridaxisfilterfieldseditorprops %}).
 */
exports.PivotGridAxisFilterFieldsEditor = React.forwardRef(function (props, ref) {
    var _a = __assign(__assign({}, defaultProps), props), data = _a.data, dataItem = _a.dataItem, defaultFilter = _a.defaultFilter;
    var element = React.useRef(null);
    var target = React.useRef(null);
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var _b = (0, kendo_react_common_1.useCustomComponent)(props.columnMenuItem || defaultProps.columnMenuItem), ColumnMenuItemComponent = _b[0], ColumnMenuItemProps = _b[1];
    var _c = (0, kendo_react_common_1.useCustomComponent)(props.columnMenuForm || defaultProps.columnMenuForm), ColumnMenuFormComponent = _c[0], ColumnMenuFormProps = _c[1];
    var _d = (0, kendo_react_common_1.useCustomComponent)(props.resetButton || defaultProps.resetButton), ResetButtonComponent = _d[0], ResetButtonProps = _d[1];
    var _e = (0, kendo_react_common_1.useCustomComponent)(props.applyButton || defaultProps.applyButton), ApplyButtonComponent = _e[0], ApplyButtonProps = _e[1];
    var _f = (0, kendo_react_common_1.useCustomComponent)(props.treeView || defaultProps.treeView), TreeViewComponent = _f[0], TreeViewProps = _f[1];
    var _g = (0, kendo_react_common_1.useCustomComponent)(props.noData || defaultProps.noData), NoDataComponent = _g[0], NoDataProps = _g[1];
    React.useImperativeHandle(target, function () { return ({ props: props, element: element.current }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var _h = React.useState(false), show = _h[0], setShow = _h[1];
    var _j = React.useContext(shared_1.PivotGridConfiguratorEditorEventsContext), onAxisFilterFieldsExpandChange = _j.onAxisFilterFieldsExpandChange, onAxisFilterFieldExpand = _j.onAxisFilterFieldExpand;
    var _k = React.useContext(shared_1.PivotGridConfiguratorEditorStateContext), dispatchState = _k[1];
    var _l = React.useState(defaultFilter), filter = _l[0], setFilter = _l[1];
    var selected = filter ? filter.value.split(',') : [];
    var _m = (0, hooks_1.useExpansion)([], undefined, target, utils_1.compareFields), expanded = _m[0], dispatchExpansion = _m[1];
    var map = {
        caption: function (node) { return node.dataItem.caption; },
        id: function (node) { return node.dataItem.uniqueName; },
        parent: function (_, parent) { return parent && parent.value; },
        value: function (node) { return (node.dataItem.defaultHierarchy || node.dataItem.uniqueName); },
        expanded: function (node) { return expanded.some(function (e) { return e.uniqueName === node.id; }); },
        checked: function (node) { return !selected.length || (selected || []).some(function (f) { return f === node.dataItem.uniqueName; }); },
        hasChildren: function (node) { return parseInt(node.dataItem.childrenCardinality, 10) > 0; },
        children: function (node) { return (0, utils_1.recursiveMap)(node.dataItem.children, map, node); },
        checkIndeterminate: function (node) {
            var everyChildChecked = (node.children || []).length && node.children.every(function (c) { return c.checked; });
            if (everyChildChecked) {
                node.checked = true;
            }
            return (node.children || []).some(function (c) { return c.checked; }) && !everyChildChecked;
        }
    };
    var fields = (0, utils_1.recursiveMap)(data, map);
    var dataFlatMap = (0, utils_1.flatMap)(fields);
    var handleClick = function (syntheticEvent) {
        setShow(!show);
        if (onAxisFilterFieldsExpandChange) {
            onAxisFilterFieldsExpandChange({
                value: !show,
                target: target.current,
                syntheticEvent: syntheticEvent
            });
        }
    };
    var handleFieldExpand = function (event) {
        dispatchExpansion({ type: hooks_1.EXPANSION_ACTION.toggle, payload: event.item.dataItem }, event.syntheticEvent);
        if (onAxisFilterFieldExpand) {
            onAxisFilterFieldExpand({
                value: event.item.dataItem,
                target: target.current,
                syntheticEvent: event.syntheticEvent
            });
        }
    };
    var handleFieldCheck = function (event) {
        var newFilter;
        if (event.item.checked) {
            newFilter = {
                field: String(dataItem.name),
                operator: 'in',
                value: dataFlatMap
                    .filter(function (i) { return i.checked; })
                    .map(function (c) { return String(c.value); })
                    .filter(function (i) { return i !== event.item.value && i !== event.item.parent; })
                    .join(',')
            };
        }
        else {
            newFilter = {
                field: String(dataItem.name),
                operator: 'in',
                value: dataFlatMap
                    .filter(function (i) { return i.checked; })
                    .map(function (c) { return String(c.value); })
                    .concat([event.item.value])
                    .join(',')
            };
        }
        setFilter(newFilter);
    };
    var handleResetClick = function (syntheticEvent) {
        setShow(false);
        if (filter) {
            dispatchState({
                type: hooks_1.PIVOT_CONFIGURATOR_ACTION.removeFilter,
                payload: filter
            }, syntheticEvent);
        }
    };
    var handleApplyClick = function (syntheticEvent) {
        setShow(false);
        if (filter) {
            dispatchState({
                type: defaultFilter
                    ? hooks_1.PIVOT_CONFIGURATOR_ACTION.changeFilter
                    : hooks_1.PIVOT_CONFIGURATOR_ACTION.addFilter,
                payload: filter
            }, syntheticEvent);
        }
    };
    return (React.createElement("div", { ref: element, id: props.id, tabIndex: props.tabIndex, style: props.style, className: (0, kendo_react_common_1.classNames)('k-columnmenu-item-wrapper', props.className) },
        React.createElement(ColumnMenuItemComponent, __assign({}, ColumnMenuItemProps, { title: "Include Fields", iconClass: "k-i-grid-layout", svgIcon: kendo_svg_icons_1.gridLayoutIcon, onClick: handleClick })),
        React.createElement(ColumnMenuFormComponent, __assign({ show: show, actions: (React.createElement(React.Fragment, null,
                React.createElement(ResetButtonComponent, __assign({ type: "reset", onClick: handleResetClick }, ResetButtonProps), localization.toLanguageString(messages_1.fieldMenuReset, messages_1.messages[messages_1.fieldMenuReset])),
                React.createElement(ApplyButtonComponent, __assign({ themeColor: 'primary', onClick: handleApplyClick }, ApplyButtonProps), localization.toLanguageString(messages_1.fieldMenuApply, messages_1.messages[messages_1.fieldMenuApply])))) }, ColumnMenuFormProps), (fields && fields.length)
            ? (React.createElement(TreeViewComponent, __assign({ data: fields, checkboxes: true, onExpandChange: handleFieldExpand, onCheckChange: handleFieldCheck, textField: 'caption', expandIcons: true, hasChildrenField: "hasChildren", checkIndeterminateField: "checkIndeterminate", childrenField: "children" }, TreeViewProps)))
            : (React.createElement(NoDataComponent, __assign({}, NoDataProps))))));
});
var defaultProps = {
    data: [],
    resetButton: kendo_react_buttons_1.Button,
    applyButton: kendo_react_buttons_1.Button,
    treeView: kendo_react_treeview_1.TreeView,
    noData: function () { return React.createElement(kendo_react_indicators_1.Skeleton, { shape: 'rectangle', style: { height: '20px', width: 'calc(100% - 16px)', margin: 8 } }); },
    columnMenuItem: kendo_react_data_tools_1.ColumnMenuItem,
    columnMenuForm: kendo_react_data_tools_1.ColumnMenuForm
};
exports.PivotGridAxisFilterFieldsEditor.defaultProps = defaultProps;
exports.PivotGridAxisFilterFieldsEditor.displayName = 'KendoReactPivotGridAxisFilterFieldsEditor';
