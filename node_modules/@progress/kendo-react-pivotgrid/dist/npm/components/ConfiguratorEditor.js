"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PivotGridConfiguratorEditor = void 0;
var React = require("react");
var kendo_react_form_1 = require("@progress/kendo-react-form");
var kendo_react_labels_1 = require("@progress/kendo-react-labels");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var AxesEditor_1 = require("./AxesEditor");
var FieldsEditor_1 = require("./FieldsEditor");
var hooks_1 = require("../hooks");
var shared_1 = require("../shared");
var messages_1 = require("../messages");
/**
 * Represents the [KendoReact PivotGridConfiguratorEditor component]({% slug api_pivotgrid_pivotgridconfiguratoreditorprops %}).
 */
exports.PivotGridConfiguratorEditor = React.forwardRef(function (props, ref) {
    var onFieldsEditorFieldCheck = props.onFieldsEditorFieldCheck, onFieldsEditorFieldCheckAction = props.onFieldsEditorFieldCheckAction, onFieldsEditorFieldExpand = props.onFieldsEditorFieldExpand, onFieldsEditorFieldExpandAction = props.onFieldsEditorFieldExpandAction, onAxisFilterFieldExpand = props.onAxisFilterFieldExpand, onAxisFilterFieldsExpandChange = props.onAxisFilterFieldsExpandChange;
    var _a = (0, kendo_react_common_1.useCustomComponent)(props.fieldsLabel || defaultProps.fieldsLabel), FieldsLabelComponent = _a[0], FieldsLabelProps = _a[1];
    var _b = (0, kendo_react_common_1.useCustomComponent)(props.fieldsEditor || defaultProps.fieldsEditor), FieldsEditorComponent = _b[0], FieldsEditorProps = _b[1];
    var _c = (0, kendo_react_common_1.useCustomComponent)(props.columnAxesLabel || defaultProps.columnAxesLabel), ColumnAxesLabelComponent = _c[0], ColumnAxesLabelProps = _c[1];
    var _d = (0, kendo_react_common_1.useCustomComponent)((props.columnAxesEditor || defaultProps.columnAxesEditor)), ColumnAxesEditorComponent = _d[0], ColumnAxesEditorProps = _d[1];
    var _e = (0, kendo_react_common_1.useCustomComponent)(props.rowAxesLabel || defaultProps.rowAxesLabel), RowAxesLabelComponent = _e[0], RowAxesLabelProps = _e[1];
    var _f = (0, kendo_react_common_1.useCustomComponent)((props.rowAxesEditor || defaultProps.rowAxesEditor)), RowAxesEditorComponent = _f[0], RowAxesEditorProps = _f[1];
    var _g = (0, kendo_react_common_1.useCustomComponent)(props.measureAxesLabel || defaultProps.measureAxesLabel), MeasureAxesLabelComponent = _g[0], MeasureAxesLabelProps = _g[1];
    var _h = (0, kendo_react_common_1.useCustomComponent)((props.measureAxesEditor || defaultProps.measureAxesEditor)), MeasureAxesEditorComponent = _h[0], MeasureAxesEditorProps = _h[1];
    var element = React.useRef(null);
    var target = React.useRef(null);
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var _j = (0, hooks_1.usePivotConfiguratorEditor)(props, target), state = _j[0], dispatchState = _j[1];
    React.useImperativeHandle(target, function () { return ({
        element: element.current,
        props: props,
        state: state
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleColumnsMouseEnter = function () {
        if (state.dragItem) {
            dispatchState({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.setDropZone, payload: 'columnAxes' });
        }
    };
    var handleColumnsMouseLeave = function () {
        if (state.dragItem) {
            dispatchState({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.setDropZone, payload: null });
        }
    };
    var handleRowsMouseEnter = function () {
        if (state.dragItem) {
            dispatchState({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.setDropZone, payload: 'rowAxes' });
        }
    };
    var handleRowsMouseLeave = function () {
        if (state.dragItem) {
            dispatchState({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.setDropZone, payload: null });
        }
    };
    var handleMeasuresMouseEnter = function () {
        if (state.dragItem) {
            dispatchState({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.setDropZone, payload: 'measureAxes' });
        }
    };
    var handleMeasuresMouseLeave = function () {
        if (state.dragItem) {
            dispatchState({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.setDropZone, payload: null });
        }
    };
    var handleFieldsEditorFieldExpand = function (event) {
        var eventArgs = {
            target: event.target,
            currentTarget: target.current,
            value: event.value,
            syntheticEvent: event.syntheticEvent
        };
        if (onFieldsEditorFieldExpandAction) {
            var actions = onFieldsEditorFieldExpandAction(eventArgs, props, state);
            if (actions) {
                Array.isArray(actions)
                    ? actions.filter(Boolean).map(function (action) { return action && dispatchState(__assign({}, action), event.syntheticEvent); })
                    : dispatchState(__assign({}, actions), event.syntheticEvent);
            }
        }
        if (onFieldsEditorFieldExpand) {
            onFieldsEditorFieldExpand({
                target: event.target,
                currentTarget: target.current,
                value: event.value,
                syntheticEvent: event.syntheticEvent
            });
        }
    };
    var handleFieldsEditorFieldCheck = function (event) {
        var eventArgs = {
            target: event.target,
            currentTarget: target.current,
            value: event.value,
            syntheticEvent: event.syntheticEvent
        };
        if (onFieldsEditorFieldCheckAction) {
            var actions = onFieldsEditorFieldCheckAction(eventArgs, props, state);
            if (actions) {
                Array.isArray(actions)
                    ? actions.filter(Boolean).map(function (action) { return action && dispatchState(__assign({}, action), event.syntheticEvent); })
                    : dispatchState(__assign({}, actions), event.syntheticEvent);
            }
        }
        if (onFieldsEditorFieldCheck) {
            onFieldsEditorFieldCheck(eventArgs);
        }
    };
    var handleAxisFilterFieldExpand = function (event) {
        var eventArgs = {
            target: event.target,
            currentTarget: target.current,
            value: event.value,
            syntheticEvent: event.syntheticEvent
        };
        if (onAxisFilterFieldExpand) {
            onAxisFilterFieldExpand(eventArgs);
        }
    };
    var handleAxisFilterFieldsExpandChange = function (event) {
        var eventArgs = {
            target: event.target,
            currentTarget: target.current,
            value: event.value,
            syntheticEvent: event.syntheticEvent
        };
        if (onAxisFilterFieldsExpandChange) {
            onAxisFilterFieldsExpandChange(eventArgs);
        }
    };
    var Container = props.horizontal ? 'div' : React.Fragment;
    var ContainerProps = props.horizontal ? { className: 'k-form-field-wrapper' } : {};
    return (React.createElement(shared_1.PivotGridConfiguratorEditorEventsContext.Provider, { value: {
            onAxisFilterFieldExpand: handleAxisFilterFieldExpand,
            onAxisFilterFieldsExpandChange: handleAxisFilterFieldsExpandChange
        } },
        React.createElement(shared_1.PivotGridConfiguratorEditorStateContext.Provider, { value: [state, dispatchState] },
            React.createElement(Container, __assign({}, ContainerProps),
                React.createElement("div", { className: "k-form-field" },
                    React.createElement(FieldsLabelComponent, __assign({ name: "", component: kendo_react_labels_1.Label }, FieldsLabelProps), localization.toLanguageString(messages_1.configuratorEditorSearchTitle, messages_1.messages[messages_1.configuratorEditorSearchTitle]))),
                React.createElement("div", { className: "k-form-field" },
                    React.createElement("div", { className: "k-fields-list-wrapper" },
                        React.createElement(FieldsEditorComponent, __assign({ data: props.data, onExpand: handleFieldsEditorFieldExpand, onCheck: handleFieldsEditorFieldCheck, columnAxes: state.columnAxes, rowAxes: state.rowAxes, measureAxes: state.measureAxes }, FieldsEditorProps))))),
            React.createElement(Container, __assign({}, ContainerProps),
                React.createElement("div", { className: "k-form-field", onMouseEnter: handleColumnsMouseEnter, onMouseLeave: handleColumnsMouseLeave },
                    React.createElement(kendo_react_form_1.Field, __assign({ name: "columnAxes", field: "columnAxes", component: ColumnAxesLabelComponent }, ColumnAxesLabelProps), localization.toLanguageString(messages_1.configuratorColumnsTitle, messages_1.messages[messages_1.configuratorColumnsTitle]))),
                props.valueGetter('columnAxes').length
                    ? (React.createElement(kendo_react_form_1.Field, __assign({ name: "columnAxes", field: "columnAxes", component: ColumnAxesEditorComponent, onMouseEnter: handleColumnsMouseEnter, onMouseLeave: handleColumnsMouseLeave, className: "k-column-fields" }, ColumnAxesEditorProps)))
                    : (React.createElement("div", { className: "k-settings-description", onMouseEnter: handleColumnsMouseEnter, onMouseLeave: handleColumnsMouseLeave }, localization.toLanguageString(messages_1.configuratorMissingFields, messages_1.messages[messages_1.configuratorMissingFields]))),
                React.createElement("div", { className: "k-form-field", onMouseEnter: handleRowsMouseEnter, onMouseLeave: handleRowsMouseLeave },
                    React.createElement(kendo_react_form_1.Field, __assign({ name: "rowAxes", field: "rowAxes", component: RowAxesLabelComponent }, RowAxesLabelProps), localization.toLanguageString(messages_1.configuratorRowsTitle, messages_1.messages[messages_1.configuratorRowsTitle]))),
                props.valueGetter('rowAxes').length
                    ? (React.createElement(kendo_react_form_1.Field, __assign({ name: "rowAxes", field: "rowAxes", component: RowAxesEditorComponent, onMouseEnter: handleRowsMouseEnter, onMouseLeave: handleRowsMouseLeave, className: "k-column-fields" }, RowAxesEditorProps)))
                    : (React.createElement("div", { className: "k-settings-description", onMouseEnter: handleRowsMouseEnter, onMouseLeave: handleRowsMouseLeave }, localization.toLanguageString(messages_1.configuratorMissingFields, messages_1.messages[messages_1.configuratorMissingFields])))),
            React.createElement(Container, __assign({}, ContainerProps),
                React.createElement("div", { className: "k-form-field", onMouseEnter: handleMeasuresMouseEnter, onMouseLeave: handleMeasuresMouseLeave },
                    React.createElement(kendo_react_form_1.Field, __assign({ name: "measureAxes", field: "measureAxes", component: MeasureAxesLabelComponent }, MeasureAxesLabelProps), localization.toLanguageString(messages_1.configuratorMeasuresTitle, messages_1.messages[messages_1.configuratorMeasuresTitle]))),
                props.valueGetter('measureAxes').length
                    ? (React.createElement(kendo_react_form_1.Field, __assign({ name: "measureAxes", field: "measureAxes", component: MeasureAxesEditorComponent, onMouseEnter: handleMeasuresMouseEnter, onMouseLeave: handleMeasuresMouseLeave, className: "k-column-fields" }, MeasureAxesEditorProps)))
                    : (React.createElement("div", { className: "k-settings-description", onMouseEnter: handleMeasuresMouseEnter, onMouseLeave: handleMeasuresMouseLeave }, localization.toLanguageString(messages_1.configuratorMissingFields, messages_1.messages[messages_1.configuratorMissingFields])))))));
});
var defaultProps = {
    data: [],
    horizontal: false,
    fieldsLabel: kendo_react_labels_1.Label,
    fieldsEditor: FieldsEditor_1.PivotGridFieldsEditor,
    columnAxesLabel: kendo_react_labels_1.Label,
    columnAxesEditor: AxesEditor_1.PivotGridAxesEditor,
    rowAxesLabel: kendo_react_labels_1.Label,
    rowAxesEditor: AxesEditor_1.PivotGridAxesEditor,
    measureAxesLabel: kendo_react_labels_1.Label,
    measureAxesEditor: AxesEditor_1.PivotGridAxesEditor,
    axesEditor: AxesEditor_1.PivotGridAxesEditor,
    onFieldsEditorFieldCheckAction: function (event) {
        return ({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.toggleSelection, payload: event.value });
    },
    onFieldsEditorFieldExpandAction: function (event) {
        return ({ type: hooks_1.PIVOT_CONFIGURATOR_ACTION.toggleExpansion, payload: event.value });
    }
};
exports.PivotGridConfiguratorEditor.defaultProps = defaultProps;
exports.PivotGridConfiguratorEditor.displayName = 'KendoReactPivotGridConfiguratorEditor';
