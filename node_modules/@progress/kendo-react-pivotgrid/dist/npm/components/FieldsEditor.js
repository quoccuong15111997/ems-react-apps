"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PivotGridFieldsEditor = void 0;
var React = require("react");
var kendo_react_treeview_1 = require("@progress/kendo-react-treeview");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var shared_1 = require("../shared");
var utils_1 = require("../utils");
/**
 * Represents the [KendoReact PivotGridFieldsEditor component]({% slug api_pivotgrid_pivotgridfieldseditorprops %}).
 */
exports.PivotGridFieldsEditor = React.forwardRef(function (props, ref) {
    var _a = __assign(__assign({}, defaultProps), props), data = _a.data, rowAxes = _a.rowAxes, columnAxes = _a.columnAxes, measureAxes = _a.measureAxes, onExpand = _a.onExpand, onCheck = _a.onCheck;
    var treeView = React.useRef(null);
    var target = React.useRef(null);
    var _b = (0, kendo_react_common_1.useCustomComponent)(props.treeView || defaultProps.treeView), TreeViewComponent = _b[0], TreeViewProps = _b[1];
    var _c = (0, kendo_react_common_1.useCustomComponent)(props.noData || defaultProps.noData), NoDataComponent = _c[0], NoDataProps = _c[1];
    React.useImperativeHandle(target, function () { return ({ props: props, element: treeView.current && treeView.current.element }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var state = React.useContext(shared_1.PivotGridConfiguratorEditorStateContext)[0];
    var columnHierarchies = (0, utils_1.extractDefaultFields)(columnAxes);
    var rowHierarchies = (0, utils_1.extractDefaultFields)(rowAxes);
    var measureHierarchies = (0, utils_1.extractDefaultFields)(measureAxes);
    var fieldsFlatMap = (0, utils_1.flatMap)(data);
    var checked = fieldsFlatMap.filter(function (f) { return __spreadArray(__spreadArray(__spreadArray([], columnHierarchies, true), rowHierarchies, true), measureHierarchies, true).some(function (h) { return (h === f.uniqueName || h === f.defaultHierarchy); }); });
    var map = {
        caption: function (node) { return node.dataItem.caption; },
        id: function (node) { return node.dataItem.uniqueName; },
        value: function (node) { return (node.dataItem.defaultHierarchy || node.dataItem.uniqueName); },
        expanded: function (node) { return state.expanded.some(function (e) { return e.uniqueName === node.dataItem.uniqueName; }); },
        hasChildren: function (node) { return !('hierarchyUniqueName' in node.dataItem) && !('aggregator' in node.dataItem); },
        selectable: function (node) { return !Boolean((!node.hasChildren && !node.dataItem.aggregator && !node.dataItem.measure)
            || (node.dataItem.type === 2)
            || node.dataItem.uniqueName === '[KPIs]'); },
        children: function (node) { return (0, utils_1.recursiveMap)(node.dataItem.children, map, node); },
        checked: function (node) { return checked.some(function (s) { return node.dataItem.defaultHierarchy
            ? s.defaultHierarchy === node.dataItem.defaultHierarchy
            : s.uniqueName === node.dataItem.uniqueName; })
            || (node.children.length && node.children.every(function (c) { return c.checked; })); }
    };
    var handleExpand = function (event) {
        if (onExpand) {
            onExpand({
                value: event.item.dataItem,
                target: target.current,
                syntheticEvent: event.syntheticEvent
            });
        }
    };
    var handleCheck = function (event) {
        if (onCheck) {
            onCheck({
                value: event.item.dataItem,
                target: target.current,
                syntheticEvent: event.syntheticEvent
            });
        }
    };
    var fields = (0, utils_1.recursiveMap)(props.data, map);
    return (React.createElement(kendo_react_treeview_1.TreeViewItemPropsContext.Provider, { value: function (p) { return (__assign(__assign({}, p), { checkboxes: p.item.selectable })); } }, (fields && fields.length)
        ? React.createElement(TreeViewComponent, __assign({ ref: (0, kendo_react_common_1.canUseRef)(TreeViewComponent) ? treeView : undefined, data: fields, checkboxes: true, onExpandChange: handleExpand, onCheckChange: handleCheck, textField: 'caption', expandIcons: true, hasChildrenField: "hasChildren", checkIndeterminateField: "checkIndeterminate", childrenField: "children" }, TreeViewProps))
        : (React.createElement(NoDataComponent, __assign({}, NoDataProps)))));
});
var defaultProps = {
    data: [],
    rowAxes: [],
    columnAxes: [],
    measureAxes: [],
    treeView: kendo_react_treeview_1.TreeView,
    noData: function () { return React.createElement("div", null, "NO DATA"); }
};
exports.PivotGridFieldsEditor.defaultProps = defaultProps;
exports.PivotGridFieldsEditor.displayName = 'KendoReactPivotGridFieldsEditor';
