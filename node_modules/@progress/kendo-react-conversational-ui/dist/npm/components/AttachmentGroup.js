"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var Attachment_1 = require("./Attachment");
var SelectableItemsContainer_1 = require("./base/SelectableItemsContainer");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
/**
 * @hidden
 */
var AttachmentGroup = /** @class */ (function (_super) {
    __extends(AttachmentGroup, _super);
    function AttachmentGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttachmentGroup.prototype.render = function () {
        var _this = this;
        var isCardDeckLayout = this.isCardDeckLayout(this.props);
        var viewWithoutScrollButtons = (React.createElement("div", { className: this.getClassNames(), onKeyDown: isCardDeckLayout ? undefined : this.onKeyDown }, this.props.group.attachments.map(function (item, index) {
            return (React.createElement(Attachment_1.default, { item: item, template: _this.props.itemTemplate, selected: index === _this.state.selectedItemIndex, tabbable: _this.props.isLastGroup && index === _this.state.selectedItemIndex, isFirstItemInGroup: index === 0, isLastItemInGroup: index === _this.getLastItemIndex(), onClick: function () { return _this.onAttachmentClick(index); }, key: index }));
        })));
        if (isCardDeckLayout) {
            return (React.createElement("div", { className: "k-card-deck-scrollwrap", onKeyDown: this.onKeyDown },
                this.getLeftScrollBtn(),
                viewWithoutScrollButtons,
                this.getRightScrollBtn()));
        }
        else {
            return viewWithoutScrollButtons;
        }
    };
    Object.defineProperty(AttachmentGroup.prototype, "isKeyboardNavigationLeftRight", {
        // Overriding the default navigation.
        get: function () {
            return this.isCardDeckLayout(this.props);
        },
        enumerable: false,
        configurable: true
    });
    AttachmentGroup.prototype.getLastItemIndex = function () {
        return this.props.group.attachments.length - 1;
    };
    AttachmentGroup.prototype.getLeftScrollBtn = function () {
        var _this = this;
        var result = null;
        if (this.isCardDeckLayout(this.props) && this.state.selectedItemIndex) {
            result = (React.createElement(kendo_react_buttons_1.Button, { icon: "chevron-left", onClick: function () { return _this.onNavigateBtnClick(false); }, svgIcon: kendo_svg_icons_1.chevronLeftIcon }));
        }
        return result;
    };
    AttachmentGroup.prototype.getRightScrollBtn = function () {
        var _this = this;
        var result = null;
        if (this.isCardDeckLayout(this.props) && this.state.selectedItemIndex !== this.getLastItemIndex()) {
            result = (React.createElement(kendo_react_buttons_1.Button, { icon: "chevron-right", onClick: function () { return _this.onNavigateBtnClick(true); }, svgIcon: kendo_svg_icons_1.chevronRightIcon }));
        }
        return result;
    };
    AttachmentGroup.prototype.onAttachmentClick = function (attachmentIndex) {
        this.onRequestContainerSelection();
        this.setState({ selectedItemIndex: attachmentIndex });
    };
    AttachmentGroup.prototype.onNavigateBtnClick = function (incrementSelection) {
        this.onRequestContainerSelection();
        this.navigate(incrementSelection, 1);
    };
    AttachmentGroup.prototype.isCardDeckLayout = function (props) {
        return props.group.attachmentLayout !== 'list';
    };
    AttachmentGroup.prototype.getClassNames = function () {
        return (0, kendo_react_common_1.classNames)({ 'k-card-deck': this.isCardDeckLayout(this.props) });
    };
    return AttachmentGroup;
}(SelectableItemsContainer_1.SelectableItemsContainer));
exports.default = AttachmentGroup;
