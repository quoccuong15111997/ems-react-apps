"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var FocusableUponSelection_1 = require("./base/FocusableUponSelection");
/**
 * @hidden
 */
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onKeyDown = function (event) {
            if (event.keyCode === kendo_react_common_1.Keys.enter) {
                _this.props.onActionExecute(_this.props.item, event);
            }
        };
        return _this;
    }
    Action.prototype.render = function () {
        var _this = this;
        return (React.createElement("span", { role: 'button', className: this.getClassNames(), onClick: function (event) { return _this.props.onActionExecute(_this.props.item, event); }, ref: function (el) { return _this.elementToFocus = el; }, onKeyDown: this.onKeyDown, tabIndex: 0 }, this.props.item.title || this.props.item.value));
    };
    Action.prototype.getClassNames = function () {
        return (0, kendo_react_common_2.classNames)('k-quick-reply', { 'k-first': this.props.isFirstItemInGroup }, { 'k-last': this.props.isLastItemInGroup }, { 'k-selected': this.props.selected }, { 'k-focus': this.props.selected });
    };
    return Action;
}(FocusableUponSelection_1.FocusableUponSelection));
exports.default = Action;
