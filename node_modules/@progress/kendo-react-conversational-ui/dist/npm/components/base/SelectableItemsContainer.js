"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectableItemsContainer = void 0;
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * @hidden
 */
var SelectableItemsContainer = /** @class */ (function (_super) {
    __extends(SelectableItemsContainer, _super);
    function SelectableItemsContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = { selectedItemIndex: null };
        _this.onRequestContainerSelection = function () { return _this.props.onRequestSelection(_this.props.group.selectionIndex); };
        _this.onKeyDown = function (event) {
            var newSelectedItemIndex = null;
            var decrementKeyCode;
            var incrementKeyCode;
            if (_this.isKeyboardNavigationLeftRight) {
                decrementKeyCode = kendo_react_common_1.Keys.left;
                incrementKeyCode = kendo_react_common_1.Keys.right;
            }
            else {
                decrementKeyCode = kendo_react_common_1.Keys.up;
                incrementKeyCode = kendo_react_common_1.Keys.down;
            }
            if (event.keyCode === decrementKeyCode) {
                newSelectedItemIndex = _this.navigate(false);
            }
            else if (event.keyCode === incrementKeyCode) {
                newSelectedItemIndex = _this.navigate(true);
            }
            if (newSelectedItemIndex !== null) {
                // Prevent the default behaviour of moving of the scrollbar
                // because scrolling is achieved through item focusing.
                event.preventDefault();
                // Stop propagation to remove the collision with the up/down
                // keyboard navigation of the message list.
                event.stopPropagation();
            }
        };
        return _this;
    }
    SelectableItemsContainer.getDerivedStateFromProps = function (props, state) {
        if (!props.selected && state.selectedItemIndex !== null) {
            // Moving away from a selected group.
            return { selectedItemIndex: null };
        }
        else if (props.selected && state.selectedItemIndex === null) {
            // Entering a group w/o directly choosing (e.g. clicking) a subitem.
            return { selectedItemIndex: 0 };
        }
        return null;
    };
    SelectableItemsContainer.prototype.navigate = function (incrementSelection, newSelectedItemIndexUponFirstIncrement) {
        if (newSelectedItemIndexUponFirstIncrement === void 0) { newSelectedItemIndexUponFirstIncrement = 0; }
        var result = null;
        var currentlySelectedItemIndex = this.state.selectedItemIndex;
        if (incrementSelection) {
            if (currentlySelectedItemIndex === null) {
                result = newSelectedItemIndexUponFirstIncrement;
            }
            else if (currentlySelectedItemIndex < this.getLastSelectionIndex()) {
                result = currentlySelectedItemIndex + 1;
            }
        }
        else {
            if (currentlySelectedItemIndex === null) {
                result = 0;
            }
            else if (currentlySelectedItemIndex > 0) {
                result = currentlySelectedItemIndex - 1;
            }
        }
        if (result !== null) {
            this.setState({ selectedItemIndex: result });
        }
        return result;
    };
    Object.defineProperty(SelectableItemsContainer.prototype, "isKeyboardNavigationLeftRight", {
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    SelectableItemsContainer.prototype.getLastSelectionIndex = function () {
        var result = -1;
        if (this.props.group.type === 'action-group') {
            var actionGroup = this.props.group;
            result = actionGroup.actions ? actionGroup.actions.length - 1 : -1;
        }
        else if (this.props.group.type === 'attachment-group') {
            var attachmentGroup = this.props.group;
            result = attachmentGroup.attachments ? attachmentGroup.attachments.length - 1 : -1;
        }
        return result;
    };
    return SelectableItemsContainer;
}(React.Component));
exports.SelectableItemsContainer = SelectableItemsContainer;
