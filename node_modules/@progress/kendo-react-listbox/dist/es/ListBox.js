var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, guid, dispatchEvent, kendoThemeMaps } from '@progress/kendo-react-common';
import { toolbarPosition } from './interfaces/Enums';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from './package-metadata';
var ListBox = /** @class */ (function (_super) {
    __extends(ListBox, _super);
    function ListBox(props) {
        var _this = _super.call(this, props) || this;
        _this.setSelected = function (item) {
            if (_this.props.selectedField) {
                return item[_this.props.selectedField] ? true : false;
            }
        };
        _this.renderItem = function (item) {
            return _this.props.textField ? item[_this.props.textField] : item.toString();
        };
        _this.handleKeyDown = function (event) {
            if (_this.props.onKeyDown) {
                dispatchEvent(_this.props.onKeyDown, event, _this, undefined);
            }
            ;
        };
        _this.handleContainerDrop = function (event) {
            var targetElement = event.target;
            var isTargetContainer = targetElement.classList.contains('k-list-scroller');
            if (isTargetContainer) {
                _this.props.data.length > 0 ?
                    dispatchEvent(_this.props.onDrop, event, _this, { dataItem: _this.props.data[_this.props.data.length - 1] }) :
                    dispatchEvent(_this.props.onDrop, event, _this, { dataItem: null });
            }
        };
        _this.setToolbarPosition = function () {
            if (_this.props.toolbarPosition === toolbarPosition.NONE || _this.props.toolbar === undefined) {
                return '';
            }
            return "k-listbox-actions-".concat(_this.props.toolbarPosition);
        };
        _this.handleOnDragLeave = function (event) {
            if (_this.props.onDragLeave && event.target.classList.contains('k-list-scroller')) {
                dispatchEvent(_this.props.onDragLeave, event, _this, undefined);
            }
        };
        validatePackage(packageMetadata);
        return _this;
    }
    /**
     * @hidden
     */
    ListBox.prototype.render = function () {
        var _a;
        var _this = this;
        return (React.createElement("div", { className: classNames(this.props.className, 'k-listbox', this.setToolbarPosition()), style: this.props.style, unselectable: "on" },
            this.props.toolbar && this.props.toolbarPosition !== 'bottom' && React.createElement(this.props.toolbar, null),
            React.createElement("div", { className: 'k-list-scroller k-selectable', "data-role": 'selectable', onDragOver: function (e) { return e.preventDefault(); }, onDrop: this.handleContainerDrop, onDragLeave: this.handleOnDragLeave },
                React.createElement("div", { className: classNames('k-list', (_a = {},
                        _a["k-list-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size,
                        _a)) },
                    React.createElement("div", { className: 'k-list-content' },
                        React.createElement("ul", { className: 'k-list-ul', role: 'listbox', "aria-label": 'listbox-container', tabIndex: 0, onKeyDown: this.handleKeyDown }, this.props.data.map(function (item, index) {
                            var selectedValue = _this.setSelected(item);
                            var itemGuid = guid();
                            var itemOptions = {
                                className: classNames('k-list-item', {
                                    'k-selected': selectedValue
                                }),
                                role: 'option',
                                'aria-selected': selectedValue,
                                key: index,
                                id: itemGuid + index,
                                'data-uid': itemGuid + index,
                                draggable: _this.props.draggable,
                                onDragStart: function (event) { return dispatchEvent(_this.props.onDragStart, event, _this, { dataItem: item }); },
                                onDragOver: function (event) {
                                    event.preventDefault();
                                    dispatchEvent(_this.props.onDragOver, event, _this, { dataItem: item });
                                },
                                onDrop: function (event) { return dispatchEvent(_this.props.onDrop, event, _this, { dataItem: item }); },
                                onClick: function (event) { return dispatchEvent(_this.props.onItemClick, event, _this, { dataItem: item }); }
                            };
                            return (_this.props.item
                                ? React.createElement(_this.props.item, __assign({ selected: selectedValue, dataItem: item }, itemOptions),
                                    React.createElement("span", { className: 'k-list-item-text' }, item.name))
                                : React.createElement("li", __assign({}, itemOptions),
                                    React.createElement("span", { className: 'k-list-item-text' }, _this.renderItem(item))));
                        }))))),
            this.props.toolbar && this.props.toolbarPosition === 'bottom' && React.createElement(this.props.toolbar, null),
            React.createElement("select", { style: { display: 'none' }, multiple: true, "data-role": "listbox" }, this.props.data.map(function (item, index) {
                var value = item[_this.props.valueField || _this.props.textField];
                return React.createElement("option", { key: index, value: value }, value);
            }))));
    };
    /**
     * @hidden
     */
    ListBox.propTypes = {
        size: PropTypes.oneOf([null, 'small', 'medium', 'large']),
        toolbarPosition: PropTypes.oneOf(['none', 'top', 'bottom', 'left', 'right']),
        textField: PropTypes.string,
        valueField: PropTypes.string,
        selectedField: PropTypes.string,
        data: PropTypes.array
    };
    /**
     * @hidden
     */
    ListBox.defaultProps = {
        toolbarPosition: toolbarPosition.RIGHT,
        draggable: true,
        size: 'medium'
    };
    return ListBox;
}(React.PureComponent));
export { ListBox };
