"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processListBoxDragAndDrop = exports.moveItem = exports.processListBoxData = void 0;
/**
 * Process the data collection/s based on the clicked ListBoxToolbar tool.
 *
 * @param {T[]} listBoxOneData - The first data collection.
 * @param {T[]} listBoxTwoData - The second data collection. Pass an empty array if there is only one ListBox.
 * @param {string} toolName - The tool that was clicked.
 * @param {string} selectedField - The field that contains the selected information in the data object.
 * @returns {{listBoxOneData: T[], listBoxTwoData: t[]}} - The object that contains the new data collections.
 */
// tslint:disable-next-line: max-line-length
var processListBoxData = function (listBoxOneData, listBoxTwoData, toolName, selectedField) {
    if (listBoxOneData === void 0) { listBoxOneData = []; }
    if (listBoxTwoData === void 0) { listBoxTwoData = []; }
    var newFirstData = [];
    var itemsForTransfer = [];
    var newSecondData = [];
    var result = {
        listBoxOneData: listBoxOneData,
        listBoxTwoData: listBoxTwoData
    };
    switch (toolName) {
        case 'moveUp':
            newFirstData = __spreadArray([], listBoxOneData, true);
            newFirstData.forEach(function (item, index) {
                if (item[selectedField]) {
                    newFirstData = (0, exports.moveItem)(index, index - 1, newFirstData);
                }
            });
            newSecondData = __spreadArray([], listBoxTwoData, true);
            newSecondData.forEach(function (item, index) {
                if (item[selectedField]) {
                    newSecondData = (0, exports.moveItem)(index, index - 1, newSecondData);
                }
            });
            result.listBoxOneData = newFirstData;
            result.listBoxTwoData = newSecondData;
            break;
        case 'moveDown':
            newFirstData = listBoxOneData.reverse();
            newFirstData.forEach(function (item, index) {
                if (item[selectedField]) {
                    newFirstData = (0, exports.moveItem)(index, index - 1, newFirstData);
                }
            });
            newSecondData = listBoxTwoData.reverse();
            newSecondData.forEach(function (item, index) {
                if (item[selectedField]) {
                    newSecondData = (0, exports.moveItem)(index, index - 1, newSecondData);
                }
            });
            result.listBoxOneData = __spreadArray([], newFirstData, true).reverse();
            result.listBoxTwoData = __spreadArray([], newSecondData, true).reverse();
            break;
        case 'transferTo':
            newFirstData = listBoxOneData.filter(function (item) { return !item[selectedField]; });
            itemsForTransfer = listBoxOneData.filter(function (item) { return item[selectedField]; });
            newSecondData = listBoxTwoData.concat(itemsForTransfer);
            result.listBoxOneData = newFirstData;
            result.listBoxTwoData = newSecondData;
            break;
        case 'transferFrom':
            newSecondData = listBoxTwoData.filter(function (item) { return !item[selectedField]; });
            itemsForTransfer = listBoxTwoData.filter(function (item) { return item[selectedField]; });
            newFirstData = listBoxOneData.concat(itemsForTransfer);
            result.listBoxOneData = newFirstData;
            result.listBoxTwoData = newSecondData;
            break;
        case 'transferAllTo':
            result.listBoxOneData = [];
            result.listBoxTwoData = listBoxTwoData.concat(listBoxOneData);
            break;
        case 'transferAllFrom':
            result.listBoxOneData = listBoxTwoData.concat(listBoxOneData);
            result.listBoxTwoData = [];
            break;
        case 'remove':
            newSecondData = listBoxTwoData.filter(function (item) { return !item[selectedField]; });
            newFirstData = listBoxOneData.filter(function (item) { return !item[selectedField]; });
            result.listBoxOneData = newFirstData;
            result.listBoxTwoData = newSecondData;
            break;
        default:
    }
    return result;
};
exports.processListBoxData = processListBoxData;
/**
 * @hidden
 */
var moveItem = function (from, to, data) {
    var f = data.splice(from, 1)[0];
    data.splice(to, 0, f);
    return data;
};
exports.moveItem = moveItem;
/**
 * Process the data collection/s based on the dragged and drop item.
 *
 * @param {T[]} listBoxOneData - The first data collection.
 * @param {T[]} listBoxTwoData - The second data collection. Pass an empty array if there is only one ListBox.
 * @param {any} dragItem - The item that was dragged.
 * @param {any} dropItem - The drop target item.
 * @param {string} valueField - The field which points to the unique value of each data item.
 * @returns {{listBoxOneData: T[], listBoxTwoData: t[]}} - The object that contains the new data collections.
 */
// tslint:disable-next-line: max-line-length
var processListBoxDragAndDrop = function (listBoxOneData, listBoxTwoData, dragItem, dropItem, valueField) {
    if (listBoxOneData === void 0) { listBoxOneData = []; }
    if (listBoxTwoData === void 0) { listBoxTwoData = []; }
    var dragItemIndexInFirstList = listBoxOneData.findIndex(function (item) { return item[valueField] === dragItem[valueField]; });
    var dragItemIndexInSecondList = listBoxTwoData.findIndex(function (item) { return item[valueField] === dragItem[valueField]; });
    var dropItemIndexInFirstList = dropItem !== null ? listBoxOneData.findIndex(function (item) { return item[valueField] === dropItem[valueField]; }) : -1;
    var dropItemIndexInSecondList = dropItem !== null ? listBoxTwoData.findIndex(function (item) { return item[valueField] === dropItem[valueField]; }) : -1;
    var isDragItemInFirstList = dragItemIndexInFirstList >= 0 ? true : false;
    var isDragItemInSecondList = dragItemIndexInSecondList >= 0 ? true : false;
    var isDropItemInFirstList = dropItemIndexInFirstList >= 0 ? true : false;
    var isDropItemInSecondList = dropItemIndexInSecondList >= 0 ? true : false;
    var firstDataSet = __spreadArray([], listBoxOneData, true);
    var secondDataSet = __spreadArray([], listBoxTwoData, true);
    if (isDragItemInFirstList && isDropItemInFirstList) {
        return {
            listBoxOneData: (0, exports.moveItem)(dragItemIndexInFirstList, dropItemIndexInFirstList, listBoxOneData),
            listBoxTwoData: listBoxTwoData
        };
    }
    if (isDragItemInSecondList && isDropItemInSecondList) {
        return {
            listBoxOneData: listBoxOneData,
            listBoxTwoData: (0, exports.moveItem)(dragItemIndexInSecondList, dropItemIndexInSecondList, listBoxTwoData)
        };
    }
    if (isDragItemInFirstList && (isDropItemInSecondList || dropItem === null)) {
        if (dropItem === null) {
            secondDataSet.push(listBoxOneData[dragItemIndexInFirstList]);
        }
        else {
            secondDataSet.splice(dropItemIndexInSecondList + 1, 0, listBoxOneData[dragItemIndexInFirstList]);
        }
        firstDataSet.splice(dragItemIndexInFirstList, 1);
        return {
            listBoxOneData: firstDataSet,
            listBoxTwoData: secondDataSet
        };
    }
    if (isDragItemInSecondList && (isDropItemInFirstList || dropItem === null)) {
        if (dropItem === null) {
            firstDataSet.push(listBoxTwoData[dragItemIndexInSecondList]);
        }
        else {
            firstDataSet.splice(dropItemIndexInFirstList + 1, 0, listBoxTwoData[dragItemIndexInSecondList]);
        }
        secondDataSet.splice(dragItemIndexInSecondList, 1);
        return {
            listBoxOneData: firstDataSet,
            listBoxTwoData: secondDataSet
        };
    }
    return {
        listBoxOneData: listBoxOneData,
        listBoxTwoData: listBoxTwoData
    };
};
exports.processListBoxDragAndDrop = processListBoxDragAndDrop;
