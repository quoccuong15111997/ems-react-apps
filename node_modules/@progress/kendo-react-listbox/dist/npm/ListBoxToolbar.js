"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListBoxToolbar = void 0;
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./messages");
var PropTypes = require("prop-types");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var tools = [
    { name: 'moveUp', iconName: 'caret-alt-up', svgIcon: kendo_svg_icons_1.caretAltUpIcon },
    { name: 'moveDown', iconName: 'caret-alt-down', svgIcon: kendo_svg_icons_1.caretAltDownIcon },
    { name: 'transferTo', iconName: 'caret-alt-right', svgIcon: kendo_svg_icons_1.caretAltRightIcon },
    { name: 'transferFrom', iconName: 'caret-alt-left', svgIcon: kendo_svg_icons_1.caretAltLeftIcon },
    { name: 'transferAllTo', iconName: 'caret-double-alt-right', svgIcon: kendo_svg_icons_1.caretDoubleAltRightIcon },
    { name: 'transferAllFrom', iconName: 'caret-double-alt-left', svgIcon: kendo_svg_icons_1.caretDoubleAltLeftIcon },
    { name: 'remove', iconName: 'x', svgIcon: kendo_svg_icons_1.xIcon }
];
var ListBoxToolbar = /** @class */ (function (_super) {
    __extends(ListBoxToolbar, _super);
    function ListBoxToolbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleToolClick = function (event, name) {
            (0, kendo_react_common_1.dispatchEvent)(_this.props.onToolClick, event, _this, { toolName: name });
        };
        _this.isItemDisabled = function (tool) {
            var disabled = true;
            var selectedField = _this.props.selectedField || 'selected';
            var dataLength = _this.props.data.length;
            var dataConnectedLength = _this.props.dataConnected.length;
            var hasSelected = _this.props.data.findIndex(function (item) { return item[selectedField] === true; }) >= 0;
            var hasSelectedTwo = _this.props.dataConnected.findIndex(function (item) { return item[selectedField] === true; }) >= 0;
            switch (tool) {
                case 'moveUp':
                    if (hasSelected) {
                        disabled = _this.props.data.length > 0 ? _this.props.data[0].selected : true;
                    }
                    else if (hasSelectedTwo) {
                        disabled = _this.props.dataConnected.length > 0 ? _this.props.dataConnected[0].selected : true;
                    }
                    else {
                        disabled = true;
                    }
                    break;
                case 'moveDown':
                    if (hasSelected) {
                        disabled = _this.props.data[dataLength - 1] ? _this.props.data[dataLength - 1].selected : true;
                    }
                    else if (hasSelectedTwo) {
                        disabled = _this.props.dataConnected.length > 0 ?
                            _this.props.dataConnected[dataConnectedLength - 1].selected :
                            true;
                    }
                    else {
                        disabled = true;
                    }
                    break;
                case 'transferTo':
                    disabled = !(_this.props.dataConnected && hasSelected);
                    break;
                case 'transferFrom':
                    if (_this.props.dataConnected) {
                        disabled = !(_this.props.dataConnected && hasSelectedTwo);
                    }
                    else {
                        disabled = true;
                    }
                    break;
                case 'transferAllTo':
                    disabled = !(_this.props.dataConnected && _this.props.data.length > 0);
                    break;
                case 'transferAllFrom':
                    disabled = !(_this.props.dataConnected && _this.props.dataConnected.length > 0);
                    break;
                case 'remove':
                    disabled = !(hasSelected || hasSelectedTwo);
                    break;
                default:
            }
            return disabled;
        };
        return _this;
    }
    /**
     * @hidden
     */
    ListBoxToolbar.prototype.render = function () {
        var _this = this;
        var localizationService = (0, kendo_react_intl_1.provideLocalizationService)(this);
        return (React.createElement("div", { className: (0, kendo_react_common_1.classNames)('k-listbox-actions') }, this.props.tools && this.props.tools.map(function (tool, index) {
            var indexOfTool = tools.findIndex(function (x) { return x.name === tool; });
            var currentTool = tools[indexOfTool];
            var isDisabled = _this.isItemDisabled(currentTool.name);
            var toolKey = "listbox.".concat(currentTool.name);
            var title = localizationService.toLanguageString(toolKey, messages_1.messages[toolKey]);
            return (React.createElement(kendo_react_buttons_1.Button, { key: index, disabled: isDisabled, "data-command": currentTool.name, title: title, "aria-label": title, icon: currentTool.iconName, svgIcon: currentTool.svgIcon, onClick: function (e) {
                    e.preventDefault();
                    _this.handleToolClick(e, currentTool.name || null);
                } }));
        })));
    };
    /**
     * @hidden
     */
    ListBoxToolbar.propTypes = {
        data: PropTypes.array,
        dataConnected: PropTypes.array,
        tools: PropTypes.array,
        selectedField: PropTypes.string
    };
    /**
     * @hidden
     */
    ListBoxToolbar.defaultProps = {
        data: [],
        dataConnected: [],
        selectedField: 'selected'
    };
    return ListBoxToolbar;
}(React.PureComponent));
exports.ListBoxToolbar = ListBoxToolbar;
(0, kendo_react_intl_1.registerForLocalization)(ListBoxToolbar);
