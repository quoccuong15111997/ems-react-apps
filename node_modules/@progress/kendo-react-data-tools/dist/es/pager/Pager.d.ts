import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * A Pager target event.
 */
export interface PagerTargetEvent {
    [key: string]: any;
    /**
     * An event target.
     */
    target?: any;
    /**
     * An event value.
     */
    value?: any;
}
/**
 * Represents the base object of the `onPageChange` event. It is usually used
 * in custom pager scenarios in cases when we don't need any of the events or the target.
 */
export interface BasePageChangeEvent {
    /**
     * The number of records that will be skipped.
     */
    skip: number;
    /**
     * The number of records that will be taken.
     */
    take: number;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent?: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent?: any;
    /**
     * A target change event.
     */
    targetEvent?: PagerTargetEvent;
}
/**
 * Represents the object of the `onPageChange` event.
 */
export interface PageChangeEvent extends BasePageChangeEvent {
    /**
     * An event target.
     */
    target: Pager;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
    /**
     * A target change event.
     */
    targetEvent: PagerTargetEvent;
}
export interface PagerProps {
    /**
     * The total number of records.
     */
    total: number;
    /**
     * The number of records that will be skipped.
     */
    skip: number;
    /**
     * The number of records that will be taken.
     */
    take: number;
    /**
     * Sets additional classes to the Pager.
     */
    className?: string;
    /**
     * The styles that are applied to the Pager.
     */
    style?: React.CSSProperties;
    /**
     * Sets the maximum numeric buttons count before the buttons are collapsed.
     */
    buttonCount?: number;
    /**
     * Toggles the information about the current page and the total number of records.
     */
    info?: boolean;
    /**
     * Defines the type of the pager.
     * * (Default) `numeric` — Renders buttons with numbers.
     * * `input` — Renders an input field for typing the page number.
     */
    type?: 'numeric' | 'input';
    /**
     * Displays a menu for selecting the page size.
     */
    pageSizes?: Array<number> | Array<number | string>;
    /**
     * Sets the selected value of the page size Dropdownlist.
     * It is useful when the selected value could also be a string not only a number.
     */
    pageSizeValue?: string | number;
    /**
     * Toggles the **Previous** and **Next** buttons.
     */
    previousNext?: boolean;
    /**
     * Defines if the pager will be responsive. Defaults to `true`.
     */
    responsive?: boolean;
    /**
     * Configures the `size` of the Pager.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Fires when the page of the Pager is changed. You have to handle the event yourself and page the data.
     */
    onPageChange?: ((event: PageChangeEvent) => void) | ((event: BasePageChangeEvent) => void);
    /**
     * Useful for modifying the Pager messages.
     */
    messagesMap?: (messageKey: string) => ({
        messageKey: string;
        defaultMessage: string;
    });
}
export declare class Pager extends React.Component<PagerProps> {
    /**
     * @hidden
     */
    static propTypes: {
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        total: PropTypes.Validator<number>;
        skip: PropTypes.Validator<number>;
        take: PropTypes.Validator<number>;
        buttonCount: PropTypes.Requireable<number>;
        info: PropTypes.Requireable<boolean>;
        type: PropTypes.Requireable<string>;
        pageSizes: PropTypes.Requireable<(NonNullable<string | number | null | undefined> | null | undefined)[]>;
        previousNext: PropTypes.Requireable<boolean>;
        onPageChange: PropTypes.Requireable<(...args: any[]) => any>;
        messagesMap: PropTypes.Requireable<(...args: any[]) => any>;
        size: PropTypes.Requireable<string | null>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        buttonCount: number;
        info: boolean;
        type: string;
        size: string;
    };
    private _element;
    /**
     * Returns the HTML element of the Pager component.
     */
    get element(): HTMLDivElement | null;
    constructor(props: PagerProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private onPageChange;
    private renderButton;
    private get totalPages();
    private changePage;
    private onWindowResize;
}
