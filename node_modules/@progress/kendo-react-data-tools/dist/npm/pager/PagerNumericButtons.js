"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagerNumericButtons = void 0;
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var messages_1 = require("../messages");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
/**
 * @hidden
 */
var PagerNumericButtons = /** @class */ (function (_super) {
    __extends(PagerNumericButtons, _super);
    function PagerNumericButtons() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handlePageChange = function (e, page) {
            e.preventDefault();
            _this.props.pageChange(page, e);
        };
        _this.handleSelectPageChange = function (e) {
            e.preventDefault();
            _this.props.pageChange(e.target.value, e);
        };
        return _this;
    }
    PagerNumericButtons.prototype.render = function () {
        var _a;
        var _this = this;
        var localizationService = (0, kendo_react_intl_1.provideLocalizationService)(this);
        var mobileSelectMessage = this.props.messagesMap ? this.props.messagesMap(messages_1.pagerMobileSelect) :
            ({ messageKey: messages_1.pagerMobileSelect, defaultMessage: messages_1.messages[messages_1.pagerMobileSelect] });
        var pageNumberLabelMessage = this.props.messagesMap ? this.props.messagesMap(messages_1.pagerPageNumberLabel) :
            ({ messageKey: messages_1.pagerPageNumberLabel, defaultMessage: messages_1.messages[messages_1.pagerPageNumberLabel] });
        var buttons = [];
        for (var idx = this.start; idx <= this.end; idx++) {
            buttons.push(idx);
        }
        var numerics = buttons.map(function (page) { return (React.createElement(kendo_react_buttons_1.Button, { className: (0, kendo_react_common_1.classNames)({ 'k-selected': _this.props.currentPage === page }), key: page, fillMode: 'flat', themeColor: 'primary', size: _this.props.size, rounded: null, role: "button", "aria-label": localizationService.toLanguageString(pageNumberLabelMessage.messageKey, pageNumberLabelMessage.defaultMessage) + ' ' + page, "aria-current": _this.props.currentPage === page ? true : undefined, onClick: function (e) { return _this.handlePageChange(e, page); } }, page)); });
        var options = buttons.map(function (page) { return (React.createElement("option", { key: page }, page)); });
        return (React.createElement(React.Fragment, null,
            React.createElement("select", { className: (0, kendo_react_common_1.classNames)('k-picker k-dropdown-list k-dropdown k-rounded-md', (_a = {},
                    _a["k-picker-".concat(kendo_react_common_1.kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size,
                    _a)), "aria-label": localizationService.toLanguageString(mobileSelectMessage.messageKey, mobileSelectMessage.defaultMessage), value: this.props.currentPage, onChange: function (e) { return _this.handleSelectPageChange(e); } }, options),
            React.createElement("div", { className: "k-pager-numbers" }, numerics)));
    };
    Object.defineProperty(PagerNumericButtons.prototype, "end", {
        get: function () {
            return Math.min((this.start + this.props.buttonCount) - 1, this.props.totalPages);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PagerNumericButtons.prototype, "start", {
        get: function () {
            var page = this.props.currentPage;
            var buttonCount = this.props.buttonCount;
            if (page > buttonCount) {
                var reminder = (page % buttonCount);
                return (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
            }
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    return PagerNumericButtons;
}(React.Component));
exports.PagerNumericButtons = PagerNumericButtons;
