var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { useLocalization } from '@progress/kendo-react-intl';
import { DropDownButton, ButtonGroup } from '@progress/kendo-react-buttons';
import { ViewSelectorItem } from './ViewSelectorItem';
import { useGanttViewsContext, useGanttActiveViewContext } from '../../../context/GanttContext';
import { IconWrap } from '@progress/kendo-react-common';
import { caretAltDownIcon } from '@progress/kendo-svg-icons';
/** @hidden */
export var ViewSelectorList = React.forwardRef(function () {
    var views = useGanttViewsContext();
    var _a = useGanttActiveViewContext(), activeViewName = _a[0], setActiveViewName = _a[1];
    var activeView = views.find(function (v) { return v.props.name === activeViewName; });
    var localizationService = useLocalization();
    var handleItemClick = React.useCallback(function (event) {
        if (!setActiveViewName) {
            return;
        }
        event.syntheticEvent.preventDefault();
        setActiveViewName(event.item.name);
    }, [setActiveViewName]);
    return (React.createElement("div", { className: "k-gantt-views-wrapper" },
        React.createElement(ButtonGroup, { className: "k-gantt-views" }, views.map(function (view) { return (React.createElement(ViewSelectorItem, { key: view.props.name, view: view.props })); })),
        (activeView) && (React.createElement(DropDownButton, { className: "k-views-dropdown", onItemClick: handleItemClick, popupSettings: { popupClass: 'k-gantt-toolbar' }, textField: "title", items: views.map(function (v) { return (__assign(__assign({}, v.props), { selected: v.props.name === activeViewName, title: typeof v.props.title === 'function'
                    ? v.props.title.call(undefined, localizationService)
                    : v.props.title })); }), text: (React.createElement(React.Fragment, null,
                typeof activeView.props.title === 'function'
                    ? activeView.props.title.call(undefined, localizationService)
                    : activeView.props.title,
                React.createElement(IconWrap, { name: "caret-alt-down", icon: caretAltDownIcon }))) }))));
});
ViewSelectorList.displayName = 'KendoReactGanttViewSelectorList';
