var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { getTaskModelFields, getDependencyModelFields, expandedChildren } from './utils';
import { useInternationalization } from '@progress/kendo-react-intl';
import { GanttContext } from './context/GanttContext';
import { GanttWeekView } from './views/GanttWeekView';
import { flatData } from '@progress/kendo-react-treelist';
import { getter, classNames } from '@progress/kendo-react-common';
import { useControlledState } from './hooks/useControlledState';
import { ViewSelectorList } from './components/toolbar/view-selector/ViewSelectorList';
import { ViewSelector } from './components/toolbar/view-selector/ViewSelector';
import { Toolbar } from './components/toolbar/Toolbar';
import { ToolbarSpacer } from '@progress/kendo-react-buttons';
import { DEFAULT_DATE } from './constants';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from './package-metadata';
import { AddButton } from './components/toolbar/AddButton';
/**
 * Represents the Gantt component.
 */
export var Gantt = React.forwardRef(function (props, ref) {
    validatePackage(packageMetadata);
    var _a = props.columns, columns = _a === void 0 ? defaultProps.columns : _a, _b = props.taskData, taskData = _b === void 0 ? defaultProps.taskData : _b, _c = props.dependencyData, dependencyData = _c === void 0 ? defaultProps.dependencyData : _c, style = props.style, className = props.className, noRecords = props.noRecords, timezone = props.timezone, _d = props.rowHeight, rowHeight = _d === void 0 ? defaultProps.rowHeight : _d, resizable = props.resizable, reorderable = props.reorderable, sortable = props.sortable, sort = props.sort, filter = props.filter, columnMenuFilter = props.columnMenuFilter, columnMenu = props.columnMenu, navigatable = props.navigatable, toolbar = props.toolbar, row = props.row, selectable = props.selectable;
    var intl = useInternationalization();
    var taskModelFields = React.useMemo(function () { return getTaskModelFields(props.taskModelFields); }, [props.taskModelFields]).fields;
    var dependencyModelFields = React.useMemo(function () { return getDependencyModelFields(props.dependencyModelFields); }, [props.dependencyModelFields]).fields;
    var getExpandedChildren = React.useCallback(expandedChildren(taskModelFields.isExpanded, taskModelFields.children), [taskModelFields.isExpanded, taskModelFields.children]);
    var viewRef = React.useRef(null);
    var startDateRef = React.useRef(null);
    var endDateRef = React.useRef(null);
    var selectedTaskRef = React.useRef(null);
    var firstSlotRangeRef = React.useRef(null);
    var getDataDateRangeAndSelection = React.useCallback(function (dataItem) {
        var startDate = getter(taskModelFields.start)(dataItem);
        var endDate = getter(taskModelFields.end)(dataItem);
        var selected = getter(taskModelFields.isSelected)(dataItem);
        if (!startDateRef.current || startDate < startDateRef.current) {
            startDateRef.current = startDate;
        }
        if (!endDateRef.current || endDate > endDateRef.current) {
            endDateRef.current = endDate;
        }
        if (selected) {
            selectedTaskRef.current = dataItem;
        }
    }, [taskModelFields.start, taskModelFields.end]);
    var flatTaskData = React.useMemo(function () {
        startDateRef.current = null;
        endDateRef.current = null;
        selectedTaskRef.current = null;
        return flatData(taskData, getExpandedChildren, getDataDateRangeAndSelection);
    }, [taskData, getExpandedChildren]);
    if (!startDateRef.current || !endDateRef.current) {
        startDateRef.current = new Date(DEFAULT_DATE);
        endDateRef.current = new Date(DEFAULT_DATE);
    }
    var views = React.Children.toArray(props.children || [React.createElement(GanttWeekView, { key: 'week', firstSlotRangeRef: firstSlotRangeRef })]);
    var _e = useControlledState(props.defaultView || views[0].props.name, props.view, props.onViewChange), activeViewName = _e[0], setActiveViewName = _e[1];
    var view = views.find(function (currentView) { return currentView.props.name === activeViewName; }) || views[0];
    var dateRange = typeof view.props.dateRange === 'function'
        ? view.props.dateRange.call(undefined, {
            intl: intl,
            tasksStart: startDateRef.current,
            tasksEnd: endDateRef.current,
            timezone: timezone
        })
        : view.props.dateRange;
    var toolbarRef = React.useRef(null);
    var _f = React.useState(0), toolbarHeight = _f[0], setToolbarHeight = _f[1];
    React.useLayoutEffect(function () {
        if (toolbarRef.current) {
            setToolbarHeight(toolbarRef.current.element.offsetHeight);
        }
    }, []);
    var scrollIntoView = React.useCallback(function (options) {
        if (viewRef.current) {
            viewRef.current.scrollIntoView(options);
        }
    }, []);
    var elementRef = React.useRef(null);
    var ganttRef = React.useRef(null);
    React.useImperativeHandle(ganttRef, function () {
        return { props: props, element: elementRef.current, scrollIntoView: scrollIntoView };
    });
    React.useImperativeHandle(ref, function () { return ganttRef.current; });
    var handleDataStateChange = React.useCallback(function (event) {
        if (props.onDataStateChange) {
            props.onDataStateChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onDataStateChange]);
    var handleSortChange = React.useCallback(function (event) {
        if (props.onSortChange) {
            props.onSortChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onSortChange]);
    var handleKeyDown = React.useCallback(function (event) {
        if (props.onKeyDown) {
            props.onKeyDown.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onKeyDown]);
    var handleSelectionChange = React.useCallback(function (event) {
        if (props.onSelectionChange) {
            props.onSelectionChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onSelectionChange]);
    var handleHeaderSelectionChange = React.useCallback(function (event) {
        if (props.onHeaderSelectionChange) {
            props.onHeaderSelectionChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onHeaderSelectionChange]);
    var handleFilterChange = React.useCallback(function (event) {
        if (props.onFilterChange) {
            props.onFilterChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onFilterChange]);
    var handleColumnMenuFilterChange = React.useCallback(function (event) {
        if (props.onColumnMenuFilterChange) {
            props.onColumnMenuFilterChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onColumnMenuFilterChange]);
    var handleExpandChange = React.useCallback(function (event) {
        if (props.onExpandChange) {
            props.onExpandChange.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onExpandChange]);
    var handleAddClick = React.useCallback(function (event) {
        if (props.onAddClick) {
            props.onAddClick.call(undefined, __assign(__assign({}, event), { target: ganttRef.current, selectedDataItem: selectedTaskRef.current, slotStart: firstSlotRangeRef.current && new Date(firstSlotRangeRef.current.start.getTime()), slotEnd: firstSlotRangeRef.current && new Date(firstSlotRangeRef.current.end.getTime()) }));
        }
    }, [props.onAddClick]);
    var handleColumnResize = React.useCallback(function (event) {
        if (props.onColumnResize) {
            props.onColumnResize.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onColumnResize]);
    var handleColumnReorder = React.useCallback(function (event) {
        if (props.onColumnReorder) {
            props.onColumnReorder.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onColumnReorder]);
    // ===== ROW events
    var handleRowClick = React.useCallback(function (event) {
        if (props.onRowClick) {
            props.onRowClick.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onRowClick]);
    var handleRowDoubleClick = React.useCallback(function (event) {
        if (props.onRowDoubleClick) {
            props.onRowDoubleClick.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onRowClick]);
    var handleRowContextMenu = React.useCallback(function (event) {
        if (props.onRowContextMenu) {
            props.onRowContextMenu.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onRowClick]);
    // ===== TASK events
    var handleTaskClick = React.useCallback(function (event) {
        if (props.onTaskClick) {
            props.onTaskClick.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onTaskClick]);
    var handleTaskDoubleClick = React.useCallback(function (event) {
        if (props.onTaskDoubleClick) {
            props.onTaskDoubleClick.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onTaskDoubleClick]);
    var handleTaskContextMenu = React.useCallback(function (event) {
        if (props.onTaskContextMenu) {
            props.onTaskContextMenu.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onTaskContextMenu]);
    var handleTaskRemoveClick = React.useCallback(function (event) {
        if (props.onTaskRemoveClick) {
            props.onTaskRemoveClick.call(undefined, __assign(__assign({}, event), { target: ganttRef.current }));
        }
    }, [props.onTaskRemoveClick]);
    var handleDependencyCreate = React.useCallback(function (event) {
        if (props.onDependencyCreate) {
            var fromId = void 0;
            var toId = void 0;
            var idGetter = getter(taskModelFields.id);
            for (var i = 0; i < flatTaskData.length; i++) {
                var currentItem = flatTaskData[i];
                var id = idGetter(currentItem.dataItem);
                if (String(id) === event.fromId) {
                    fromId = id;
                }
                if (String(id) === event.toId) {
                    toId = id;
                }
                if (fromId && toId) {
                    break;
                }
            }
            // required as we receive string representation of ids here
            props.onDependencyCreate.call(undefined, {
                fromId: fromId,
                toId: toId,
                target: ganttRef.current,
                type: event.type
            });
        }
    }, [props.onDependencyCreate, taskModelFields, flatTaskData]);
    return (React.createElement(GanttContext, { dateRange: dateRange, taskData: flatTaskData, dependencyData: dependencyData, taskModelFields: taskModelFields, dependencyModelFields: dependencyModelFields, views: views, activeView: [activeViewName, setActiveViewName], rowHeight: rowHeight, toolbarHeight: toolbarHeight, props: {
            columns: columns,
            noRecords: noRecords,
            timezone: timezone,
            resizable: resizable,
            reorderable: reorderable,
            sortable: sortable,
            sort: sort,
            filter: filter,
            columnMenuFilter: columnMenuFilter,
            columnMenu: columnMenu,
            navigatable: navigatable,
            row: row,
            selectable: selectable
        }, events: {
            onDataStateChange: handleDataStateChange,
            onSortChange: handleSortChange,
            onFilterChange: handleFilterChange,
            onColumnMenuFilterChange: handleColumnMenuFilterChange,
            onExpandChange: handleExpandChange,
            onRowClick: handleRowClick,
            onRowDoubleClick: handleRowDoubleClick,
            onRowContextMenu: handleRowContextMenu,
            onColumnResize: handleColumnResize,
            onColumnReorder: handleColumnReorder,
            onDependencyCreate: props.onDependencyCreate && handleDependencyCreate,
            onKeyDown: handleKeyDown,
            onSelectionChange: handleSelectionChange,
            onHeaderSelectionChange: handleHeaderSelectionChange
        }, taskEvents: {
            onTaskClick: handleTaskClick,
            onTaskDoubleClick: handleTaskDoubleClick,
            onTaskContextMenu: handleTaskContextMenu,
            onTaskRemoveClick: props.onTaskRemoveClick && handleTaskRemoveClick
        } },
        React.createElement("div", { ref: elementRef, role: 'application', style: style, className: classNames('k-gantt', className) },
            React.createElement(Toolbar, { ref: toolbarRef },
                toolbar && toolbar.addTaskButton ?
                    React.createElement(AddButton, { selectedTask: selectedTaskRef.current, onClick: handleAddClick })
                    : null,
                React.createElement(ToolbarSpacer, null),
                React.createElement(ViewSelector, null,
                    React.createElement(ViewSelectorList, null))),
            view && (React.createElement(view.type, __assign({ key: view.props.name, ref: viewRef }, view.props, { firstSlotRangeRef: firstSlotRangeRef }))))));
});
var defaultProps = {
    taskData: [],
    dependencyData: [],
    columns: [],
    rowHeight: 40
};
Gantt.propTypes = {
    taskData: PropTypes.array,
    taskModelFields: PropTypes.shape({
        id: PropTypes.string,
        start: PropTypes.string,
        end: PropTypes.string,
        title: PropTypes.string,
        percentComplete: PropTypes.string,
        isRollup: PropTypes.string,
        isExpanded: PropTypes.string,
        children: PropTypes.string,
        isInEdit: PropTypes.string
    }),
    dependencyData: PropTypes.array,
    dependencyModelFields: PropTypes.shape({
        id: PropTypes.string,
        fromId: PropTypes.string,
        toId: PropTypes.string,
        type: PropTypes.string
    }),
    columns: PropTypes.arrayOf(PropTypes.shape({
        width: PropTypes.number,
        cell: PropTypes.any,
        editCell: PropTypes.any,
        headerCell: PropTypes.any,
        filter: PropTypes.any,
        children: PropTypes.any,
        field: PropTypes.string,
        title: PropTypes.string,
        sortable: PropTypes.any,
        expandable: PropTypes.bool,
        headerSelectionValue: PropTypes.bool,
        format: PropTypes.string,
        headerClassName: PropTypes.string,
        className: PropTypes.string,
        resizable: PropTypes.bool,
        reorderable: PropTypes.bool,
        minResizableWidth: PropTypes.number,
        orderIndex: PropTypes.number,
        columnMenu: PropTypes.any
    })),
    sort: PropTypes.array,
    filter: PropTypes.array,
    columnMenuFilter: PropTypes.array,
    columnMenu: PropTypes.any,
    style: PropTypes.object,
    className: PropTypes.string,
    children: PropTypes.any,
    timezone: PropTypes.string,
    defaultView: PropTypes.string,
    view: PropTypes.string,
    rowHeight: PropTypes.number,
    navigatable: PropTypes.bool,
    onViewChange: PropTypes.func,
    onDataStateChange: PropTypes.func,
    onSortChange: PropTypes.func,
    onFilterChange: PropTypes.func,
    onExpandChange: PropTypes.func,
    onRowClick: PropTypes.func,
    onColumnResize: PropTypes.func,
    onColumnReorder: PropTypes.func
};
Gantt.defaultProps = defaultProps;
Gantt.displayName = 'KendoReactGantt';
