/// <reference types="react" />
import { LocalizationService, IntlService } from '@progress/kendo-react-intl';
import { Day } from '@progress/kendo-date-math';
import { DateRange } from './DateRange';
import { GanttViewTimelineHeaderCellProps } from './GanttViewTimelineHeaderCellProps';
/**
 * Represents the arguments which are passed to the [dateRange]({% slug api_gantt_ganttviewprops %}#toc-daterange) function.
 */
export interface GanttViewDateRangeArgs {
    tasksStart: Date;
    tasksEnd: Date;
    intl: IntlService;
    timezone?: string;
    numberOfDays?: number;
}
export declare type GanttViewDateRangeFunction = (args: GanttViewDateRangeArgs) => DateRange;
/**
 * Represents the Object which is passed to the [`ref`](https://reactjs.org/docs/refs-and-the-dom.html) callback of the GanttView component.
 */
export interface GanttViewHandle {
    /**
     * Method to allow the scroll to be set to a specific row index.
     */
    scrollIntoView: (options: {
        rowIndex?: number;
    }) => void;
}
/**
 * Represents the required props which every [GanttView]({% slug api_Gantt_Ganttview %}) must accept.
 */
export interface GanttViewProps {
    /**
     * The name property is used by the Gantt to match which view is selected. Every view has a default name.
     */
    name?: string;
    /**
     * The title to be displayed in the view selection list in the Toolbar.
     * If a function is passed, it will receive a [LocalizationService]({ slug api_intl_localizationservice }) as an argument
     */
    title?: string | ((localization: LocalizationService) => string);
    /**
     * The width of a single time slot in pixels. Default is 100px.
     */
    slotWidth?: number;
    /**
     * Overrides the `dateRange` calculated by the `Gantt` component.
     *
     * If a function is passed, an object of type [GanttViewDateRangeArgs]({% slug api_gantt_ganttviewdaterangeargs %}) will be passed.
     */
    dateRange?: DateRange | ((args: GanttViewDateRangeArgs) => DateRange);
    /**
     * Sets the start of the work day.
     */
    workDayStart?: string;
    /**
     * Sets the end of the work day.
     */
    workDayEnd?: string;
    /**
     * The start of the work week.
     */
    workWeekStart?: Day;
    /**
     * The end of the work week.
     */
    workWeekEnd?: Day;
    /**
     * The component to be rendered in header cells of the timeline part of the Gantt.
     */
    timelineHeaderCell?: React.ComponentType<GanttViewTimelineHeaderCellProps>;
    /** @hidden */
    firstSlotRangeRef?: React.MutableRefObject<DateRange | null>;
}
/**
 * Represents a single Gantt view.
 */
export declare type GanttView = React.ReactElement<GanttViewProps>;
