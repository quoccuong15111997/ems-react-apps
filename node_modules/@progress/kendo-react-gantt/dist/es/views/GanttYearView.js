import * as React from 'react';
import * as PropTypes from 'prop-types';
import { getDate, ZonedDate, addDays, firstDayOfMonth, lastDayOfMonth, firstMonthOfYear, lastMonthOfYear } from '@progress/kendo-date-math';
import { BaseView } from '../components/BaseView';
import { toUTCDateTime, getMonthSlots, getYearSlots } from '../utils';
import { useGanttPropsContext, useGanttDateRangeContext } from '../context/GanttContext';
import { DEFAULT_COLUMN_WIDTH } from '../constants';
import { messages, yearViewTitle } from '../messages';
import { useInternationalization } from '@progress/kendo-react-intl';
/**
 * Represents the KendoReact YearView Component.
 */
export var GanttYearView = React.forwardRef(function (props, ref) {
    var _a = props.slotWidth, slotWidth = _a === void 0 ? defaultProps.slotWidth : _a, firstSlotRangeRef = props.firstSlotRangeRef, timelineHeaderCell = props.timelineHeaderCell;
    var timezone = useGanttPropsContext().timezone;
    var intl = useInternationalization();
    var yearViewRef = React.useRef(null);
    var baseViewRef = React.useRef(null);
    var scrollIntoView = React.useCallback(function (options) {
        if (baseViewRef.current) {
            baseViewRef.current.scrollIntoView(options);
        }
    }, []);
    React.useImperativeHandle(yearViewRef, function () { return ({ scrollIntoView: scrollIntoView }); });
    React.useImperativeHandle(ref, function () { return yearViewRef.current; });
    var range = useGanttDateRangeContext();
    var slotLevels = React.useMemo(function () {
        var yearSlots = getYearSlots(range, { timezone: timezone }, intl);
        var monthSlots = [];
        yearSlots.forEach(function (yearSlot) {
            var months = getMonthSlots(yearSlot.range, { timezone: timezone }, intl);
            monthSlots.push.apply(monthSlots, months);
        });
        if (firstSlotRangeRef && monthSlots[0]) {
            firstSlotRangeRef.current = monthSlots[0].range;
        }
        return [yearSlots, monthSlots];
    }, [timezone, range.start.getTime(), range.end.getTime(), intl]);
    return (React.createElement(BaseView, { slotWidth: slotWidth, slotLevels: slotLevels, timelineHeaderCell: timelineHeaderCell }));
});
var yearViewDateRange = function (_a) {
    var tasksStart = _a.tasksStart, tasksEnd = _a.tasksEnd, timezone = _a.timezone;
    var zonedTasksStart = ZonedDate.fromLocalDate(tasksStart, timezone);
    var zonedTasksEnd = ZonedDate.fromLocalDate(tasksEnd, timezone);
    var firstMonth = firstDayOfMonth(firstMonthOfYear(getDate(zonedTasksStart)));
    var lastMonth = addDays(lastDayOfMonth(lastMonthOfYear(getDate(zonedTasksEnd))), 1);
    var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstMonth), timezone);
    var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastMonth), timezone);
    return {
        start: new Date(zonedStart.getTime()),
        end: new Date(zonedEnd.getTime()),
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
/** @hidden */
export var defaultProps = {
    name: 'year',
    dateRange: yearViewDateRange,
    title: function (localization) { return localization.toLanguageString(yearViewTitle, messages[yearViewTitle]); },
    slotWidth: DEFAULT_COLUMN_WIDTH
};
GanttYearView.defaultProps = defaultProps;
GanttYearView.propTypes = {
    name: PropTypes.string,
    dateRange: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    slotWidth: PropTypes.number
};
GanttYearView.displayName = 'GanttYearView';
