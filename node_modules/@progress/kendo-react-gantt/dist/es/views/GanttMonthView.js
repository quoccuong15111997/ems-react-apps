import * as React from 'react';
import * as PropTypes from 'prop-types';
import { getDate, ZonedDate, addDays, firstDayOfMonth, lastDayOfMonth } from '@progress/kendo-date-math';
import { BaseView } from '../components/BaseView';
import { toUTCDateTime, getMonthSlots, getWeekSlots } from '../utils';
import { useGanttPropsContext, useGanttDateRangeContext } from '../context/GanttContext';
import { DEFAULT_COLUMN_WIDTH } from '../constants';
import { messages, monthViewTitle } from '../messages';
import { useInternationalization } from '@progress/kendo-react-intl';
/**
 * Represents the KendoReact MonthView Component.
 */
export var GanttMonthView = React.forwardRef(function (props, ref) {
    var _a = props.slotWidth, slotWidth = _a === void 0 ? defaultProps.slotWidth : _a, firstSlotRangeRef = props.firstSlotRangeRef, timelineHeaderCell = props.timelineHeaderCell;
    var timezone = useGanttPropsContext().timezone;
    var intl = useInternationalization();
    var monthViewRef = React.useRef(null);
    var baseViewRef = React.useRef(null);
    var scrollIntoView = React.useCallback(function (options) {
        if (baseViewRef.current) {
            baseViewRef.current.scrollIntoView(options);
        }
    }, []);
    React.useImperativeHandle(monthViewRef, function () { return ({ scrollIntoView: scrollIntoView }); });
    React.useImperativeHandle(ref, function () { return monthViewRef.current; });
    var range = useGanttDateRangeContext();
    var slotLevels = React.useMemo(function () {
        var weekSlots = [];
        var monthSlots = getMonthSlots(range, { timezone: timezone }, intl);
        monthSlots.forEach(function (monthSlot) {
            var weeks = getWeekSlots(monthSlot.range, { timezone: timezone }, intl);
            weekSlots.push.apply(weekSlots, weeks);
        });
        if (firstSlotRangeRef && weekSlots[0]) {
            firstSlotRangeRef.current = weekSlots[0].range;
        }
        return [monthSlots, weekSlots];
    }, [timezone, range.start.getTime(), range.end.getTime(), intl]);
    return (React.createElement(BaseView, { ref: baseViewRef, slotWidth: slotWidth, slotLevels: slotLevels, timelineHeaderCell: timelineHeaderCell }));
});
var monthViewDateRange = function (_a) {
    var tasksStart = _a.tasksStart, tasksEnd = _a.tasksEnd, timezone = _a.timezone;
    var zonedTasksStart = ZonedDate.fromLocalDate(tasksStart, timezone);
    var zonedTasksEnd = ZonedDate.fromLocalDate(tasksEnd, timezone);
    var firstDay = firstDayOfMonth(getDate(zonedTasksStart));
    var lastDay = addDays(lastDayOfMonth(getDate(zonedTasksEnd)), 1);
    var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDay), timezone);
    var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDay), timezone);
    return {
        start: new Date(zonedStart.getTime()),
        end: new Date(zonedEnd.getTime()),
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
/** @hidden */
export var defaultProps = {
    name: 'month',
    dateRange: monthViewDateRange,
    title: function (localization) { return localization.toLanguageString(monthViewTitle, messages[monthViewTitle]); },
    slotWidth: DEFAULT_COLUMN_WIDTH,
    workWeekStart: 1,
    workWeekEnd: 5,
    workDayStart: '08:00',
    workDayEnd: '17:00'
};
GanttMonthView.defaultProps = defaultProps;
GanttMonthView.propTypes = {
    name: PropTypes.string,
    dateRange: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    slotWidth: PropTypes.number,
    workWeekStart: PropTypes.number,
    workWeekEnd: PropTypes.number,
    workDayStart: PropTypes.string,
    workDayEnd: PropTypes.string
};
GanttMonthView.displayName = 'GanttMonthView';
