import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ZonedDate } from '@progress/kendo-date-math';
import { BaseView } from '../components/BaseView';
import { toUTCDateTime, getStartDate, getEndDate, getWorkDays, getDaySlots, getHourSlots } from '../utils';
import { useGanttDateRangeContext, useGanttPropsContext } from '../context/GanttContext';
import { messages, dayViewTitle } from '../messages';
import { useInternationalization } from '@progress/kendo-react-intl';
import { DEFAULT_COLUMN_WIDTH } from '../constants';
/**
 * Represents the KendoReact DayView Component.
 */
export var GanttDayView = React.forwardRef(function (props, ref) {
    var _a = props.slotWidth, slotWidth = _a === void 0 ? defaultProps.slotWidth : _a, _b = props.slotDuration, slotDuration = _b === void 0 ? defaultProps.slotDuration : _b, firstSlotRangeRef = props.firstSlotRangeRef, timelineHeaderCell = props.timelineHeaderCell;
    var timezone = useGanttPropsContext().timezone;
    var intl = useInternationalization();
    var dayViewRef = React.useRef(null);
    var baseViewRef = React.useRef(null);
    var scrollIntoView = React.useCallback(function (options) {
        if (baseViewRef.current) {
            baseViewRef.current.scrollIntoView(options);
        }
    }, []);
    React.useImperativeHandle(dayViewRef, function () { return ({ scrollIntoView: scrollIntoView }); });
    React.useImperativeHandle(ref, function () { return dayViewRef.current; });
    var range = useGanttDateRangeContext();
    var workWeekStart = props.workWeekStart || defaultProps.workWeekStart;
    var workWeekEnd = props.workWeekEnd || defaultProps.workWeekEnd;
    var workDayStart = props.workDayStart || defaultProps.workDayStart;
    var workDayEnd = props.workDayEnd || defaultProps.workDayEnd;
    var slotLevels = React.useMemo(function () {
        var workDays = getWorkDays({
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd
        });
        var hourSlots = [];
        var daySlots = getDaySlots(range, { workDays: workDays, timezone: timezone }, intl);
        daySlots.forEach(function (daySlot) {
            var hours = getHourSlots(daySlot.range, {
                workDayStart: workDayStart,
                workDayEnd: workDayEnd,
                timezone: timezone,
                slotDuration: slotDuration
            }, intl);
            daySlot.span = hours.length;
            hourSlots.push.apply(hourSlots, hours);
        });
        if (firstSlotRangeRef && hourSlots[0]) {
            firstSlotRangeRef.current = hourSlots[0].range;
        }
        return [daySlots, hourSlots];
    }, [timezone, range.start.getTime(), range.end.getTime(), intl, workWeekStart, workWeekEnd, workDayStart, workDayEnd]);
    return (React.createElement(BaseView, { ref: baseViewRef, slotWidth: slotWidth, slotLevels: slotLevels, timelineHeaderCell: timelineHeaderCell }));
});
var dayViewDateRange = function (_a) {
    // e.g.:
    // Gantt timezone: America/New_York (-4h)
    // PC timezone: Europe/Sofia (+3h)
    // tasksStart: Sun Jun 01 2014 03:00:00 GMT+0300 (Eastern European Summer Time)
    var tasksStart = _a.tasksStart, tasksEnd = _a.tasksEnd, timezone = _a.timezone;
    // Sat May 31 2014 20:00:00 GMT-0400 (EDT)
    var zonedTasksStart = ZonedDate.fromLocalDate(tasksStart, timezone);
    var zonedTasksEnd = ZonedDate.fromLocalDate(tasksEnd, timezone);
    // Sat May 31 2014 00:00:00 GMT+0300 (Eastern European Summer Time)
    var firstDate = getStartDate(zonedTasksStart);
    var lastDate = getEndDate(zonedTasksEnd);
    var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDate), timezone);
    var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDate), timezone);
    return {
        // Sat May 31 2014 07:00:00 GMT+0300 (Eastern European Summer Time)
        start: new Date(zonedStart.getTime()),
        end: new Date(zonedEnd.getTime()),
        // Sat May 31 2014 00:00:00 GMT-0400 (EDT)
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
/** @hidden */
export var defaultProps = {
    name: 'day',
    dateRange: dayViewDateRange,
    title: function (localization) { return localization.toLanguageString(dayViewTitle, messages[dayViewTitle]); },
    slotWidth: DEFAULT_COLUMN_WIDTH,
    slotDuration: 60,
    workWeekStart: 1,
    workWeekEnd: 5,
    workDayStart: '08:00',
    workDayEnd: '17:00'
};
GanttDayView.defaultProps = defaultProps;
GanttDayView.propTypes = {
    name: PropTypes.string,
    dateRange: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    slotWidth: PropTypes.number,
    slotDuration: PropTypes.number,
    workWeekStart: PropTypes.number,
    workWeekEnd: PropTypes.number,
    workDayStart: PropTypes.string,
    workDayEnd: PropTypes.string
};
GanttDayView.displayName = 'KendoReactGanttDayView';
