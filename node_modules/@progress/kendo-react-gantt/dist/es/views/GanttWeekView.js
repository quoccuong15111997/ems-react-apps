import * as React from 'react';
import * as PropTypes from 'prop-types';
import { getDate, ZonedDate, firstDayInWeek } from '@progress/kendo-date-math';
import { BaseView } from '../components/BaseView';
import { toUTCDateTime, getStartDate, getEndDate, getWorkDays, getWeekSlots, getDaySlots } from '../utils';
import { useGanttPropsContext, useGanttDateRangeContext } from '../context/GanttContext';
import { DAYS_IN_WEEK_COUNT, DEFAULT_COLUMN_WIDTH } from '../constants';
import { weekViewTitle, messages } from '../messages';
import { useInternationalization } from '@progress/kendo-react-intl';
/**
 * Represents the KendoReact WeekView Component.
 */
export var GanttWeekView = React.forwardRef(function (props, ref) {
    var _a = props.slotWidth, slotWidth = _a === void 0 ? defaultProps.slotWidth : _a, firstSlotRangeRef = props.firstSlotRangeRef, timelineHeaderCell = props.timelineHeaderCell;
    var timezone = useGanttPropsContext().timezone;
    var intl = useInternationalization();
    var weekViewRef = React.useRef(null);
    var baseViewRef = React.useRef(null);
    var scrollIntoView = React.useCallback(function (options) {
        if (baseViewRef.current) {
            baseViewRef.current.scrollIntoView(options);
        }
    }, []);
    React.useImperativeHandle(weekViewRef, function () { return ({ scrollIntoView: scrollIntoView }); });
    React.useImperativeHandle(ref, function () { return weekViewRef.current; });
    var range = useGanttDateRangeContext();
    var workWeekStart = props.workWeekStart || defaultProps.workWeekStart;
    var workWeekEnd = props.workWeekEnd || defaultProps.workWeekEnd;
    var slotLevels = React.useMemo(function () {
        var workDays = getWorkDays({
            workWeekStart: workWeekStart,
            workWeekEnd: workWeekEnd
        });
        var daySlots = [];
        var weekSlots = getWeekSlots(range, { timezone: timezone }, intl);
        weekSlots.forEach(function (weekSlot) {
            var days = getDaySlots(weekSlot.range, { workDays: workDays, timezone: timezone }, intl);
            daySlots.push.apply(daySlots, days);
        });
        if (firstSlotRangeRef && daySlots[0]) {
            firstSlotRangeRef.current = daySlots[0].range;
        }
        return [weekSlots, daySlots];
    }, [timezone, range.start.getTime(), range.end.getTime(), intl, workWeekStart, workWeekEnd]);
    return (React.createElement(BaseView, { ref: baseViewRef, slotWidth: slotWidth, slotLevels: slotLevels, timelineHeaderCell: timelineHeaderCell }));
});
var weekViewDateRange = function (_a) {
    var intl = _a.intl, tasksStart = _a.tasksStart, tasksEnd = _a.tasksEnd, timezone = _a.timezone;
    var zonedTasksStart = ZonedDate.fromLocalDate(tasksStart, timezone);
    var zonedTasksEnd = ZonedDate.fromLocalDate(tasksEnd, timezone);
    var firstDate = getStartDate(firstDayInWeek(getDate(zonedTasksStart), intl.firstDay()));
    var lastDate = getEndDate(firstDayInWeek(getDate(zonedTasksEnd), intl.firstDay()), DAYS_IN_WEEK_COUNT);
    var zonedStart = ZonedDate.fromUTCDate(toUTCDateTime(firstDate), timezone);
    var zonedEnd = ZonedDate.fromUTCDate(toUTCDateTime(lastDate), timezone);
    return {
        start: new Date(zonedStart.getTime()),
        end: new Date(zonedEnd.getTime()),
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
/** @hidden */
export var defaultProps = {
    name: 'week',
    dateRange: weekViewDateRange,
    title: function (localization) { return localization.toLanguageString(weekViewTitle, messages[weekViewTitle]); },
    slotWidth: DEFAULT_COLUMN_WIDTH,
    workWeekStart: 1,
    workWeekEnd: 5,
    workDayStart: '08:00',
    workDayEnd: '17:00'
};
GanttWeekView.defaultProps = defaultProps;
GanttWeekView.propTypes = {
    name: PropTypes.string,
    dateRange: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    slotWidth: PropTypes.number,
    workWeekStart: PropTypes.number,
    workWeekEnd: PropTypes.number,
    workDayStart: PropTypes.string,
    workDayEnd: PropTypes.string
};
GanttWeekView.displayName = 'KendoReactGanttWeekView';
