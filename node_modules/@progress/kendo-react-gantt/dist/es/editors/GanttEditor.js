import * as React from 'react';
import { FormElement, Field } from '@progress/kendo-react-form';
import { useGanttTaskModelFieldsContext } from '../context/GanttContext';
import { FormInput } from './FormInput';
import { useLocalization } from '@progress/kendo-react-intl';
import { editorTaskComplete, editorTaskEnd, editorTaskStart, editorTaskTitle, editorValidationEnd, editorValidationRequired, editorValidationStart, messages } from '../messages';
import { FormDateTimePicker } from './FormDateTimePicker';
import { FormNumericTextBox } from './FormNumericTextBox';
/**
 * @hidden
 */
export var GanttEditor = function () {
    var taskModelFields = useGanttTaskModelFieldsContext();
    var localizationService = useLocalization();
    var localizeMessage = function (message) {
        return localizationService.toLanguageString(message, messages[message]);
    };
    var taskTitleMessage = localizeMessage(editorTaskTitle);
    var taskStartMessage = localizeMessage(editorTaskStart);
    var taskEndMessage = localizeMessage(editorTaskEnd);
    var taskCompleteMessage = localizeMessage(editorTaskComplete);
    var validationRequiredMessage = localizeMessage(editorValidationRequired);
    var validationStartMessage = localizeMessage(editorValidationStart);
    var validationEndMessage = localizeMessage(editorValidationEnd);
    var requiredValidator = React.useCallback(function (value) { return (value || value === 0 ? undefined : validationRequiredMessage); }, [validationRequiredMessage]);
    var startAfterEndValidator = React.useCallback(function (value, formValueGetter) { return (Boolean(value && formValueGetter(taskModelFields.end) && value.getTime() > formValueGetter(taskModelFields.end).getTime()) ?
        validationStartMessage :
        undefined); }, [taskModelFields, validationStartMessage]);
    var endAfterStartValidator = React.useCallback(function (value, formValueGetter) { return (Boolean(value && formValueGetter(taskModelFields.start) && value.getTime() < formValueGetter(taskModelFields.start).getTime()) ?
        validationEndMessage :
        undefined); }, [taskModelFields, validationEndMessage]);
    var startValidators = React.useMemo(function () { return [requiredValidator, startAfterEndValidator]; }, [requiredValidator, startAfterEndValidator]);
    var endValidators = React.useMemo(function () { return [requiredValidator, endAfterStartValidator]; }, [requiredValidator, endAfterStartValidator]);
    return (React.createElement(FormElement, { style: { width: 400 }, horizontal: true },
        React.createElement(Field, { id: "".concat(taskModelFields.title, "_gantteditor"), name: taskModelFields.title, label: taskTitleMessage, component: FormInput, validator: requiredValidator }),
        React.createElement(Field, { id: "".concat(taskModelFields.start, "_gantteditor"), name: taskModelFields.start, label: taskStartMessage, component: FormDateTimePicker, validator: startValidators }),
        React.createElement(Field, { id: "".concat(taskModelFields.end, "_gantteditor"), name: taskModelFields.end, label: taskEndMessage, component: FormDateTimePicker, validator: endValidators }),
        React.createElement(Field, { id: "".concat(taskModelFields.percentComplete, "_gantteditor"), name: taskModelFields.percentComplete, format: 'p', label: taskCompleteMessage, component: FormNumericTextBox, step: 0.01, validator: requiredValidator })));
};
