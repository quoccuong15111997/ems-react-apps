var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { canUseDOM } from '@progress/kendo-react-common';
import { Form } from '@progress/kendo-react-form';
import { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';
import { Button } from '@progress/kendo-react-buttons';
import { GanttEditor } from './GanttEditor';
import { useLocalization } from '@progress/kendo-react-intl';
import { editorCancel, editorSave, editorTitle, messages } from '../messages';
/* eslint-disable max-len */
/**
 * Represents the default `form` component rendered by the [KendoReact GanttEditItem component]({% slug api_gantt_ganttedititem  %}).
 */
export var GanttForm = function (props) {
    var onCancel = props.onCancel, onClose = props.onClose, onSubmit = props.onSubmit, other = __rest(props, ["onCancel", "onClose", "onSubmit"]);
    var localizationService = useLocalization();
    var localizeMessage = function (message) {
        return localizationService.toLanguageString(message, messages[message]);
    };
    var editSaveMessage = localizeMessage(editorSave);
    var editCancelMessage = localizeMessage(editorCancel);
    var editorTitleMessage = localizeMessage(editorTitle);
    var handleCancel = React.useCallback(function (syntheticEvent) {
        if (onCancel) {
            var ev = { syntheticEvent: syntheticEvent, nativeEvent: syntheticEvent.nativeEvent, dataItem: props.dataItem };
            onCancel.call(undefined, ev);
        }
    }, [onCancel, props.dataItem]);
    var handleClose = React.useCallback(function (_a) {
        var syntheticEvent = _a.syntheticEvent;
        if (onClose) {
            var ev = { syntheticEvent: syntheticEvent, nativeEvent: syntheticEvent.nativeEvent, dataItem: props.dataItem };
            onClose.call(undefined, ev);
        }
    }, [onClose, props.dataItem]);
    var handleSubmit = React.useCallback(function (dataItem, syntheticEvent) {
        if (onSubmit) {
            var ev = { dataItem: dataItem, syntheticEvent: syntheticEvent, nativeEvent: syntheticEvent && syntheticEvent.nativeEvent };
            onSubmit.call(undefined, ev);
        }
    }, [onSubmit]);
    var formElement = (React.createElement(Form, __assign({ initialValues: props.dataItem, onSubmit: handleSubmit, render: function (renderProps) { return (React.createElement(Dialog, { title: editorTitleMessage, minWidth: 600, onClose: handleClose, style: { zIndex: 90 } },
            React.createElement(GanttEditor, null),
            React.createElement(DialogActionsBar, null,
                React.createElement(Button, { disabled: !renderProps.allowSubmit, onClick: renderProps.onSubmit }, editSaveMessage),
                React.createElement(Button, { onClick: handleCancel }, editCancelMessage)))); } }, other)));
    return canUseDOM
        ? ReactDOM.createPortal(formElement, document && document.body)
        : null;
};
