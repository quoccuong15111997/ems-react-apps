var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { FieldWrapper } from '@progress/kendo-react-form';
import { Hint, Label, Error } from '@progress/kendo-react-labels';
import { NumericTextBox } from '@progress/kendo-react-inputs';
/**
 * @hidden
 */
export var FormNumericTextBox = function (fieldRenderProps) {
    var validationMessage = fieldRenderProps.validationMessage, touched = fieldRenderProps.touched, label = fieldRenderProps.label, id = fieldRenderProps.id, valid = fieldRenderProps.valid, disabled = fieldRenderProps.disabled, hint = fieldRenderProps.hint, others = __rest(fieldRenderProps, ["validationMessage", "touched", "label", "id", "valid", "disabled", "hint"]);
    var showValidationMessage = touched && validationMessage;
    var showHint = !showValidationMessage && hint;
    var hintId = showHint ? "".concat(id, "_hint") : '';
    var errorId = showValidationMessage ? "".concat(id, "_error") : '';
    return (React.createElement(FieldWrapper, null,
        React.createElement(Label, { editorId: id, editorValid: valid, editorDisabled: disabled }, label),
        React.createElement("div", { className: 'k-form-field-wrap' },
            React.createElement(NumericTextBox, __assign({ ariaDescribedBy: "".concat(hintId, " ").concat(errorId), valid: valid, id: id, disabled: disabled }, others)),
            showHint &&
                React.createElement(Hint, { id: hintId }, hint),
            showValidationMessage &&
                React.createElement(Error, { id: errorId }, validationMessage))));
};
