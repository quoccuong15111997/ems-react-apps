"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GanttEditor = void 0;
var React = require("react");
var kendo_react_form_1 = require("@progress/kendo-react-form");
var GanttContext_1 = require("../context/GanttContext");
var FormInput_1 = require("./FormInput");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("../messages");
var FormDateTimePicker_1 = require("./FormDateTimePicker");
var FormNumericTextBox_1 = require("./FormNumericTextBox");
/**
 * @hidden
 */
var GanttEditor = function () {
    var taskModelFields = (0, GanttContext_1.useGanttTaskModelFieldsContext)();
    var localizationService = (0, kendo_react_intl_1.useLocalization)();
    var localizeMessage = function (message) {
        return localizationService.toLanguageString(message, messages_1.messages[message]);
    };
    var taskTitleMessage = localizeMessage(messages_1.editorTaskTitle);
    var taskStartMessage = localizeMessage(messages_1.editorTaskStart);
    var taskEndMessage = localizeMessage(messages_1.editorTaskEnd);
    var taskCompleteMessage = localizeMessage(messages_1.editorTaskComplete);
    var validationRequiredMessage = localizeMessage(messages_1.editorValidationRequired);
    var validationStartMessage = localizeMessage(messages_1.editorValidationStart);
    var validationEndMessage = localizeMessage(messages_1.editorValidationEnd);
    var requiredValidator = React.useCallback(function (value) { return (value || value === 0 ? undefined : validationRequiredMessage); }, [validationRequiredMessage]);
    var startAfterEndValidator = React.useCallback(function (value, formValueGetter) { return (Boolean(value && formValueGetter(taskModelFields.end) && value.getTime() > formValueGetter(taskModelFields.end).getTime()) ?
        validationStartMessage :
        undefined); }, [taskModelFields, validationStartMessage]);
    var endAfterStartValidator = React.useCallback(function (value, formValueGetter) { return (Boolean(value && formValueGetter(taskModelFields.start) && value.getTime() < formValueGetter(taskModelFields.start).getTime()) ?
        validationEndMessage :
        undefined); }, [taskModelFields, validationEndMessage]);
    var startValidators = React.useMemo(function () { return [requiredValidator, startAfterEndValidator]; }, [requiredValidator, startAfterEndValidator]);
    var endValidators = React.useMemo(function () { return [requiredValidator, endAfterStartValidator]; }, [requiredValidator, endAfterStartValidator]);
    return (React.createElement(kendo_react_form_1.FormElement, { style: { width: 400 }, horizontal: true },
        React.createElement(kendo_react_form_1.Field, { id: "".concat(taskModelFields.title, "_gantteditor"), name: taskModelFields.title, label: taskTitleMessage, component: FormInput_1.FormInput, validator: requiredValidator }),
        React.createElement(kendo_react_form_1.Field, { id: "".concat(taskModelFields.start, "_gantteditor"), name: taskModelFields.start, label: taskStartMessage, component: FormDateTimePicker_1.FormDateTimePicker, validator: startValidators }),
        React.createElement(kendo_react_form_1.Field, { id: "".concat(taskModelFields.end, "_gantteditor"), name: taskModelFields.end, label: taskEndMessage, component: FormDateTimePicker_1.FormDateTimePicker, validator: endValidators }),
        React.createElement(kendo_react_form_1.Field, { id: "".concat(taskModelFields.percentComplete, "_gantteditor"), name: taskModelFields.percentComplete, format: 'p', label: taskCompleteMessage, component: FormNumericTextBox_1.FormNumericTextBox, step: 0.01, validator: requiredValidator })));
};
exports.GanttEditor = GanttEditor;
