/// <reference types="react" />
import { GanttBaseProps } from './GanttBaseProps';
import { GanttTaskModelFields } from './GanttTaskModelFields';
import { GanttDependencyModelFields } from './GanttDependencyModelFields';
import { GanttView } from './GanttView';
import { GanttViewChangeEvent, GanttDataStateChangeEvent, GanttSortChangeEvent, GanttFilterChangeEvent, GanttExpandChangeEvent, GanttRowClickEvent, GanttColumnResizeEvent, GanttColumnReorderEvent, GanttColumnMenuFilterChangeEvent, GanttAddClickEvent, GanttTaskContextMenuEvent, GanttTaskClickEvent, GanttTaskDoubleClickEvent, GanttRowDoubleClickEvent, GanttRowContextMenuEvent, GanttTaskRemoveClickEvent, GanttDependencyCreateEvent, GanttKeyDownEvent, GanttSelectionChangeEvent, GanttHeaderSelectionChangeEvent } from './events';
import { DataItem } from './DataItem';
/**
 * Represents the props of the [KendoReact Gantt component]({% slug overview_gantt %}).
 */
export interface GanttProps extends GanttBaseProps {
    /**
     * Sets custom CSS classes to the Gantt DOM element.
     */
    className?: string;
    /**
     * Represents the `style` HTML attribute.
     */
    style?: React.CSSProperties;
    /**
     * Sets the task data of the Gantt component. The data is then parsed and rendered as a visual Gantt tasks.
     */
    taskData?: DataItem[];
    /**
     * Sets the dependency data of the Gantt component. The data is then parsed and rendered as a visual connections between Gantt tasks.
     */
    dependencyData?: any[];
    /**
     * The names of the model fields from which the Gantt will read its task data.
     */
    taskModelFields?: GanttTaskModelFields;
    /**
     * The names of the model fields from which the Gantt will read its task data.
     */
    dependencyModelFields?: GanttDependencyModelFields;
    /**
     * Specify the available `view` components as `children` and the Gantt will match the currently selected view and render it.
     */
    children?: GanttView[] | GanttView;
    /**
     * Sets the initially selected view. The available values are:
     * * `day`
     * * `week` (Default)
     * * `month`
     * * `year`
     */
    defaultView?: string;
    /**
     * Sets the currently selected view. The value is matched with the `title` property of the view.
     */
    view?: string;
    /**
     * Specifies the id of the timezone that will be displayed in the Gantt.
     * For example, `Europe/Sofia`.
     */
    timezone?: string;
    /**
     * Defines the row height and implements equal heights for all rows.
     */
    rowHeight?: number;
    /**
     * Allow configuration of the Gantt toolbar. Currently allows enabling the add button.
     */
    toolbar?: {
        addTaskButton: boolean;
    };
    /**
     * Called when new `view` is selected. Useful for controlling the selected view.
     */
    onViewChange?: (args: GanttViewChangeEvent) => void;
    onColumnMenuFilterChange?: (event: GanttColumnMenuFilterChangeEvent) => void;
    /**
     * Fires when the data state of the Gantt is changed.
     */
    onDataStateChange?: (event: GanttDataStateChangeEvent) => void;
    /**
     * Fires when the sorting of the Gantt is changed ([see example]({% slug sorting_gantt %})).
     * You have to handle the event yourself and sort the data.
     */
    onSortChange?: (event: GanttSortChangeEvent) => void;
    /**
     * Fires when the Gantt filter is modified through the UI
     * ([more information and examples]({% slug filtering_gantt %})).
     * You have to handle the event yourself and filter the data.
     */
    onFilterChange?: (event: GanttFilterChangeEvent) => void;
    /**
     * Fires when the user clicks on the expand or collapse icon of a row.
     */
    onExpandChange?: (event: GanttExpandChangeEvent) => void;
    /**
     * Fires when the user clicks on Gantt add button.
     */
    onAddClick?: (event: GanttAddClickEvent) => void;
    /**
     * Fires when a column is resized.
     */
    onColumnResize?: (event: GanttColumnResizeEvent) => void;
    /**
     * Fires when the columns are reordered.
     */
    onColumnReorder?: (event: GanttColumnReorderEvent) => void;
    /**
     * Fires when the user clicks a row.
     */
    onRowClick?: (event: GanttRowClickEvent) => void;
    /**
     * Fires when the user double clicks a row.
     */
    onRowDoubleClick?: (event: GanttRowDoubleClickEvent) => void;
    /**
     * Fires when the user trigger the context menu of row.
     */
    onRowContextMenu?: (event: GanttRowContextMenuEvent) => void;
    /**
     * Fires when the user clicks a task.
     */
    onTaskClick?: (event: GanttTaskClickEvent) => void;
    /**
     * Fires when the user double clicks a task.
     */
    onTaskDoubleClick?: (event: GanttTaskDoubleClickEvent) => void;
    /**
     * Fires when the user trigger the context menu of task.
     */
    onTaskContextMenu?: (event: GanttTaskContextMenuEvent) => void;
    /**
     * Fires when the user clicks the task remove action.
     */
    onTaskRemoveClick?: (event: GanttTaskRemoveClickEvent) => void;
    /**
     * Fires when the user creates dependecy between two tasks.
     */
    onDependencyCreate?: (event: GanttDependencyCreateEvent) => void;
    /**
     * Fires when the user press keyboard key.
     */
    onKeyDown?: (event: GanttKeyDownEvent) => void;
    /**
     * Fires when the user tries to select or deselect a row or cell.
     */
    onSelectionChange?: (event: GanttSelectionChangeEvent) => void;
    /**
     * Fires when the user clicks the checkbox of a column header whose `field` matches `selectedField`
     */
    onHeaderSelectionChange?: (event: GanttHeaderSelectionChangeEvent) => void;
}
