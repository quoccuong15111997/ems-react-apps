"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// /**
//  * Represents the object of the `onPageChange` Gantt event.
//  */
// export interface GanttPageChangeEvent extends GanttEvent {
//     /**
//      * The number of records that will be skipped.
//      */
//     skip: number;
//     /**
//      * The number of records that will be taken.
//      */
//     take: number;
// }
// /**
//  * Represents the object of the `onHeaderSelectionChange` Gantt event.
//  */
// export interface GanttHeaderSelectionChangeEvent extends GanttEvent {
//     /**
//      * The field of the column in which the cell is located.
//      */
//     field?: string;
// }
// /**
//  * Represents the object of the `onItemChange` Gantt event.
//  */
// export interface GanttItemChangeEvent extends GanttEvent {
//     /**
//      * The data item which corresponds to the current row.
//      */
//     dataItem: any;
//     /**
//      * An array of indexes of each parent and current item in the data tree.
//      */
//     level: number[];
//     /**
//      * The field to which the row is bound.
//      */
//     field?: string;
//     /**
//      * The value of the item.
//      */
//     value: any;
// }
// /**
//  * Represents the object of the `onSelectionChange` Gantt event.
//  */
// export interface GanttSelectionChangeEvent extends GanttEvent {
//     /**
//      * The data item which corresponds to the selected or deselected row.
//      */
//     dataItem: any;
//     /**
//      * An array of indexes of each parent and current item in the data tree.
//      */
//     level: number[];
// }
// /**
//  * Represents the object of the Gantt row Drag and Drop event.
//  */
// export interface GanttRowDragEvent {
//     /**
//      * A native DOM event.
//      */
//     nativeEvent: any;
//     /**
//      * An event target.
//      */
//     target: GanttHandle;
//     /**
//      * The level of the dragged row.
//      * The level represents an array of indexes of each parent and current item in the data tree.
//      */
//     dragged: number[];
//     /**
//      * The level of the draggedOver row.
//      * The level represents an array of indexes of each parent and current item in the data tree.
//      */
//     draggedOver: number[] | null;
//     /**
//      * The data item which corresponds to the dragged row.
//      */
//     draggedItem: any;
// }
