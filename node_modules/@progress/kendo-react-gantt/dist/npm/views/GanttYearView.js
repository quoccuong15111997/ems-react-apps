"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultProps = exports.GanttYearView = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var BaseView_1 = require("../components/BaseView");
var utils_1 = require("../utils");
var GanttContext_1 = require("../context/GanttContext");
var constants_1 = require("../constants");
var messages_1 = require("../messages");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
/**
 * Represents the KendoReact YearView Component.
 */
exports.GanttYearView = React.forwardRef(function (props, ref) {
    var _a = props.slotWidth, slotWidth = _a === void 0 ? exports.defaultProps.slotWidth : _a, firstSlotRangeRef = props.firstSlotRangeRef, timelineHeaderCell = props.timelineHeaderCell;
    var timezone = (0, GanttContext_1.useGanttPropsContext)().timezone;
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var yearViewRef = React.useRef(null);
    var baseViewRef = React.useRef(null);
    var scrollIntoView = React.useCallback(function (options) {
        if (baseViewRef.current) {
            baseViewRef.current.scrollIntoView(options);
        }
    }, []);
    React.useImperativeHandle(yearViewRef, function () { return ({ scrollIntoView: scrollIntoView }); });
    React.useImperativeHandle(ref, function () { return yearViewRef.current; });
    var range = (0, GanttContext_1.useGanttDateRangeContext)();
    var slotLevels = React.useMemo(function () {
        var yearSlots = (0, utils_1.getYearSlots)(range, { timezone: timezone }, intl);
        var monthSlots = [];
        yearSlots.forEach(function (yearSlot) {
            var months = (0, utils_1.getMonthSlots)(yearSlot.range, { timezone: timezone }, intl);
            monthSlots.push.apply(monthSlots, months);
        });
        if (firstSlotRangeRef && monthSlots[0]) {
            firstSlotRangeRef.current = monthSlots[0].range;
        }
        return [yearSlots, monthSlots];
    }, [timezone, range.start.getTime(), range.end.getTime(), intl]);
    return (React.createElement(BaseView_1.BaseView, { slotWidth: slotWidth, slotLevels: slotLevels, timelineHeaderCell: timelineHeaderCell }));
});
var yearViewDateRange = function (_a) {
    var tasksStart = _a.tasksStart, tasksEnd = _a.tasksEnd, timezone = _a.timezone;
    var zonedTasksStart = kendo_date_math_1.ZonedDate.fromLocalDate(tasksStart, timezone);
    var zonedTasksEnd = kendo_date_math_1.ZonedDate.fromLocalDate(tasksEnd, timezone);
    var firstMonth = (0, kendo_date_math_1.firstDayOfMonth)((0, kendo_date_math_1.firstMonthOfYear)((0, kendo_date_math_1.getDate)(zonedTasksStart)));
    var lastMonth = (0, kendo_date_math_1.addDays)((0, kendo_date_math_1.lastDayOfMonth)((0, kendo_date_math_1.lastMonthOfYear)((0, kendo_date_math_1.getDate)(zonedTasksEnd))), 1);
    var zonedStart = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(firstMonth), timezone);
    var zonedEnd = kendo_date_math_1.ZonedDate.fromUTCDate((0, utils_1.toUTCDateTime)(lastMonth), timezone);
    return {
        start: new Date(zonedStart.getTime()),
        end: new Date(zonedEnd.getTime()),
        zonedStart: zonedStart,
        zonedEnd: zonedEnd
    };
};
/** @hidden */
exports.defaultProps = {
    name: 'year',
    dateRange: yearViewDateRange,
    title: function (localization) { return localization.toLanguageString(messages_1.yearViewTitle, messages_1.messages[messages_1.yearViewTitle]); },
    slotWidth: constants_1.DEFAULT_COLUMN_WIDTH
};
exports.GanttYearView.defaultProps = exports.defaultProps;
exports.GanttYearView.propTypes = {
    name: PropTypes.string,
    dateRange: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
    title: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    slotWidth: PropTypes.number
};
exports.GanttYearView.displayName = 'GanttYearView';
