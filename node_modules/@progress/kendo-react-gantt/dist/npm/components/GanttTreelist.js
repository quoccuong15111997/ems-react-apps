"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GanttTreeList = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var kendo_react_treelist_1 = require("@progress/kendo-react-treelist");
var utils_1 = require("../utils");
/**
 * @hidden
 */
var GanttTreeList = /** @class */ (function (_super) {
    __extends(GanttTreeList, _super);
    function GanttTreeList(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            activeId: undefined,
            level: 0
        };
        _this.tableElement = null;
        _this.tbodyElement = null;
        _this.wrapperScrollLeft = 0;
        _this.wrapperScrollTop = 0;
        _this.updateOnScroll = false;
        _this.tbodyOffsetTop = 0;
        _this.prevData = [];
        _this.flattedData = [];
        _this.element = null;
        _this._treeListId = (0, kendo_react_common_1.guid)();
        _this.contextStateRef = { current: undefined };
        _this.navigationStateRef = { current: undefined };
        _this.scrollIntoView = function (options) {
            if (!_this.element) {
                return;
            }
            var _a = options.rowIndex, rowIndex = _a === void 0 ? 0 : _a;
            var _b = _this.props.rowHeight, rowHeight = _b === void 0 ? 0 : _b;
            _this.element.scroll(0, (rowIndex - 1) * rowHeight);
        };
        _this.getColumns = function (extendedColumns) {
            var shuffledColumns = extendedColumns.filter(function (q) { return q.declarationIndex >= 0 && q.parentIndex === -1; });
            var sanitize = function (columns) {
                columns.sort(function (a, b) { return a.declarationIndex - b.declarationIndex; });
                return columns.map(function (column) {
                    var declarationIndex = column.declarationIndex, parentIndex = column.parentIndex, depth = column.depth, colSpan = column.colSpan, rowSpan = column.rowSpan, index = column.index, kFirst = column.kFirst, groupable = column.groupable, children = column.children, props = __rest(column, ["declarationIndex", "parentIndex", "depth", "colSpan", "rowSpan", "index", "kFirst", "groupable", "children"]);
                    return children.length ? __assign({ children: sanitize(children) }, props) : props;
                });
            };
            return sanitize(shuffledColumns);
        };
        _this.onKeyDown = function (event) {
            kendo_react_data_tools_1.tableKeyboardNavigation.onKeyDown(event, {
                contextStateRef: _this.contextStateRef,
                navigationStateRef: _this.navigationStateRef
            });
            if (_this.props.onKeyDown) {
                var _a = (0, kendo_react_data_tools_1.getSelectionOptions)(_this.props.selectable), mode = _a.mode, cell = _a.cell;
                var ev = __assign({ dataItems: _this.getLeafDataItems(), mode: mode, cell: cell, componentId: _this._treeListId, selectedField: _this.props.selectedField }, _this.getEventArguments(event));
                _this.props.onKeyDown.call(undefined, ev);
            }
        };
        _this.onFocus = function (event) {
            kendo_react_data_tools_1.tableKeyboardNavigation.onFocus(event, {
                contextStateRef: _this.contextStateRef
            });
        };
        _this.onRowDrag = function (event) {
            if (_this.props.onRowDrag) {
                var rowDragEvent = __assign(__assign({}, event), { target: _this });
                _this.props.onRowDrag.call(undefined, rowDragEvent);
            }
        };
        _this.onRowDrop = function (event) {
            if (_this.props.onRowDrop) {
                var rowDropEvent = __assign(__assign({}, event), { target: _this });
                _this.props.onRowDrop.call(undefined, rowDropEvent);
            }
        };
        _this.onColumnReorder = function (prev, next, nativeEvent) {
            var extendedColumns = _this.props.extendedColumns;
            var depth = extendedColumns[prev].depth;
            var end = function (index) {
                do {
                    index++;
                } while (index < extendedColumns.length && extendedColumns[index].depth > depth);
                return index;
            };
            var columnsCopy = __spreadArray([], extendedColumns, true);
            var spliced = columnsCopy.splice(prev, end(prev) - prev);
            columnsCopy.splice.apply(columnsCopy, __spreadArray([prev < next ? end(next - spliced.length) : next, 0], spliced, false));
            columnsCopy.filter(function (q) { return q.declarationIndex >= 0; }).forEach(function (c, i) { return c.orderIndex = i; });
            if (_this.props.onColumnReorder) {
                var columnReorderEvent = {
                    target: _this,
                    columns: _this.getColumns(columnsCopy),
                    nativeEvent: nativeEvent
                };
                _this.props.onColumnReorder.call(undefined, columnReorderEvent);
            }
        };
        _this.onColumnResize = function (index, newWidth, oldWidth, nativeEvent, end) {
            if (_this.props.onColumnResize) {
                var sumWidth = _this.props.extendedColumns.filter(function (c) { return c.children.length === 0; }).
                    reduce(function (acc, column) { return acc += parseFloat(String(column.width)); }, 0);
                if (_this.tableElement) {
                    _this.tableElement.style.width = sumWidth + 'px';
                }
                var columnResizeEvent = {
                    columns: _this.getColumns(_this.props.extendedColumns),
                    totalWidth: sumWidth,
                    index: index,
                    nativeEvent: nativeEvent,
                    newWidth: newWidth,
                    oldWidth: oldWidth,
                    end: end,
                    target: _this
                };
                _this.props.onColumnResize.call(undefined, columnResizeEvent);
            }
        };
        _this.onScroll = function (event) {
            var scrollLeft = event.currentTarget.scrollLeft;
            var scrollTop = event.currentTarget.scrollTop;
            var _a = _this.props, columnVirtualization = _a.columnVirtualization, scrollable = _a.scrollable, _b = _a.rowHeight, rowHeight = _b === void 0 ? 0 : _b;
            var minTopChange = rowHeight;
            var minLeftChange = 0;
            var shouldForceUpdate = false;
            if (columnVirtualization && Math.abs(_this.wrapperScrollLeft - scrollLeft) > minLeftChange) {
                _this.wrapperScrollLeft = scrollLeft;
                shouldForceUpdate = true;
            }
            if (scrollable === 'virtual' && Math.abs(_this.wrapperScrollTop - scrollTop) > minTopChange) {
                _this.wrapperScrollTop = scrollTop;
                shouldForceUpdate = true;
            }
            if (shouldForceUpdate) {
                _this.updateOnScroll = true;
                _this.forceUpdate();
            }
        };
        _this.calculateSizes = function (div) {
            if (!div || _this.props.scrollable === 'none') {
                return;
            }
            var children = Array.from(div.childNodes);
            var table = children.find(function (n) { return n.nodeName === 'TABLE'; });
            var toolbar = _this.props.toolbar &&
                children.find(function (n) {
                    return n.nodeType === 1 && n.classList.contains('k-grid-toolbar');
                });
            var toolbarHeight = 0;
            if (toolbar) {
                var boxSizing = toolbar.style.boxSizing;
                toolbar.style.boxSizing = 'border-box';
                toolbarHeight = parseFloat(String(window.getComputedStyle(toolbar).height)) ||
                    toolbar.offsetHeight;
                toolbar.style.boxSizing = boxSizing;
                if (!toolbar.getAttribute('style')) {
                    toolbar.removeAttribute('style');
                }
            }
            _this.tbodyOffsetTop = table.tBodies[0].offsetTop;
            (0, kendo_react_treelist_1.setHeaderRowsTop)(table, toolbarHeight);
        };
        _this.onItemChange = function (event) {
            if (event.field === _this.props.expandField) {
                var expandChange = _this.props.onExpandChange;
                if (expandChange) {
                    var expandEvent = __assign(__assign({}, _this.getEventArguments(event.syntheticEvent)), { dataItem: event.dataItem, level: event.level, value: event.value });
                    expandChange.call(undefined, expandEvent);
                }
                return;
            }
            if (_this.props.onItemChange) {
                var itemChangeEvent = __assign(__assign({}, _this.getEventArguments(event.syntheticEvent)), { dataItem: event.dataItem, level: event.level, field: event.field, value: event.value });
                _this.props.onItemChange.call(undefined, itemChangeEvent);
            }
        };
        _this.onHeaderSelectionChange = function (event) {
            if (_this.props.onHeaderSelectionChange) {
                var headerSelectionEvent = {
                    field: event.field,
                    nativeEvent: event.syntheticEvent && event.syntheticEvent.nativeEvent,
                    syntheticEvent: event.syntheticEvent,
                    target: _this,
                    dataItems: _this.getLeafDataItems()
                };
                _this.props.onHeaderSelectionChange.call(undefined, headerSelectionEvent);
            }
        };
        _this.selectionRelease = function (event) {
            if (_this.props.onSelectionChange) {
                var selectionEvent = __assign({ syntheticEvent: undefined, target: _this, selectedField: _this.props.selectedField || '', componentId: _this._treeListId, dataItems: _this.getLeafDataItems(), dataItem: null, level: [] }, event);
                _this.props.onSelectionChange.call(undefined, selectionEvent);
            }
        };
        _this.onSortChange = function (syntheticEvent, sort, field) {
            _this.onDataStateChange(_this.props.onSortChange, { sort: sort, field: field }, syntheticEvent);
        };
        _this.onFilterChange = function (event) {
            var filter = event.filter, field = event.field;
            _this.onDataStateChange(_this.props.onFilterChange, { filter: filter, field: field }, event.syntheticEvent);
        };
        _this.onColumnMenuFilterChange = function (syntheticEvent, filter, field) {
            if (!field) {
                return;
            }
            var onColumnMenuFilterChange = _this.props.onColumnMenuFilterChange;
            if (!onColumnMenuFilterChange) {
                return;
            }
            var columnMenuFilterChangeEvent = {
                syntheticEvent: syntheticEvent,
                filter: filter,
                field: field,
                target: _this,
                nativeEvent: syntheticEvent.nativeEvent
            };
            onColumnMenuFilterChange.call(undefined, columnMenuFilterChangeEvent);
        };
        _this.onExpandChange = function (event, dataItem, level) {
            var _a = _this.props, expandField = _a.expandField, onExpandChange = _a.onExpandChange;
            if (expandField && onExpandChange) {
                var expandChangeEvent = __assign(__assign({}, _this.getEventArguments(event)), { dataItem: dataItem, level: level, value: (0, utils_1.isExpanded)(dataItem, _this.props.expandField) });
                onExpandChange.call(undefined, expandChangeEvent);
            }
        };
        _this.onRowClick = function (e, item) {
            if (_this.props.onRowClick && e.target.nodeName === 'TD') {
                var rowClickEvent = __assign({ dataItem: item.dataItem, level: item.level }, _this.getEventArguments(e));
                _this.props.onRowClick.call(undefined, rowClickEvent);
            }
        };
        _this.rowDoubleClick = function (e, item) {
            if (_this.props.onRowDoubleClick && e.target.nodeName === 'TD') {
                var rowDoubleClickEvent = __assign({ dataItem: item.dataItem, level: item.level }, _this.getEventArguments(e));
                _this.props.onRowDoubleClick.call(undefined, rowDoubleClickEvent);
            }
        };
        _this.rowContextMenu = function (e, item) {
            if (_this.props.onRowContextMenu && e.target.nodeName === 'TD') {
                var rowContextMenuEvent = __assign({ dataItem: item.dataItem, level: item.level }, _this.getEventArguments(e));
                _this.props.onRowContextMenu.call(undefined, rowContextMenuEvent);
            }
        };
        _this.onPageChange = function (e) {
            if (_this.props.onPageChange) {
                var pageChangeEvent = __assign(__assign({}, _this.getEventArguments(e.syntheticEvent)), { skip: e.skip, take: e.take });
                _this.props.onPageChange.call(undefined, pageChangeEvent);
            }
        };
        _this.onDataStateChange = function (handler, data, syntheticEvent) {
            if (handler) {
                handler.call(undefined, __assign(__assign({}, _this.getEventArguments(syntheticEvent)), data));
            }
            if (_this.props.onDataStateChange) {
                var dataStateEvent = __assign(__assign({}, _this.getEventArguments(syntheticEvent)), { dataState: __assign(__assign({}, _this.getDataState()), data) });
                _this.props.onDataStateChange.call(undefined, dataStateEvent);
            }
        };
        _this.getDataState = function () { return ({
            filter: _this.props.filter,
            sort: _this.props.sort
        }); };
        _this.getEventArguments = function (syntheticEvent) {
            return {
                nativeEvent: syntheticEvent && syntheticEvent.nativeEvent,
                syntheticEvent: syntheticEvent,
                target: _this
            };
        };
        _this.getLeafDataItems = function () {
            return _this.flatData.map(function (item) { return item.dataItem; });
        };
        _this.dragLogic = new kendo_react_data_tools_1.CommonDragLogic(_this.onColumnReorder, kendo_react_common_1.noop, kendo_react_common_1.noop);
        _this.columnResize = new kendo_react_data_tools_1.ColumnResize(_this.onColumnResize);
        kendo_react_data_tools_1.tableKeyboardNavigation.onConstructor({
            navigatable: Boolean(props.navigatable),
            contextStateRef: _this.contextStateRef,
            navigationStateRef: _this.navigationStateRef,
            idPrefix: props.idPrefix
        });
        return _this;
    }
    Object.defineProperty(GanttTreeList.prototype, "document", {
        get: function () {
            if (!kendo_react_common_1.canUseDOM) {
                return;
            }
            // useful only for user actions
            return (this.element && this.element.ownerDocument) || document;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    GanttTreeList.prototype.componentDidMount = function () {
        this.calculateSizes(this.element);
        kendo_react_data_tools_1.tableKeyboardNavigation.onComponentDidMount({
            scope: this.element || undefined,
            contextStateRef: this.contextStateRef,
            navigationStateRef: this.navigationStateRef
        });
    };
    /**
     * @hidden
     */
    GanttTreeList.prototype.getSnapshotBeforeUpdate = function () {
        kendo_react_data_tools_1.tableKeyboardNavigation.onGetSnapshotBeforeUpdate({
            document: this.document,
            contextStateRef: this.contextStateRef,
            navigationStateRef: this.navigationStateRef
        });
        return null;
    };
    /**
     * @hidden
     */
    GanttTreeList.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.columns !== this.props.columns) {
            this.calculateSizes(this.element);
        }
        kendo_react_data_tools_1.tableKeyboardNavigation.onComponentDidUpdate({
            scope: this.element || undefined,
            contextStateRef: this.contextStateRef,
            navigationStateRef: this.navigationStateRef
        });
    };
    /**
     * @hidden
     */
    GanttTreeList.prototype.componentWillUnmount = function () {
        this.columnResize.columns = [];
        this.dragLogic.columns = [];
        this.prevData = [];
        this.flattedData = [];
        this.updateOnScroll = false;
    };
    /**
     * @hidden
     */
    GanttTreeList.prototype.render = function () {
        var _this = this;
        var _a = this.props, filterRow = _a.filterRow, _b = _a.scrollable, scrollable = _b === void 0 ? 'scrollable' : _b, _c = _a.resizable, resizable = _c === void 0 ? false : _c, _d = _a.reorderable, reorderable = _d === void 0 ? false : _d, skip = _a.skip, take = _a.take, afterContent = _a.afterContent, _e = _a.extendedColumns, extendedColumns = _e === void 0 ? [] : _e, columnsMap = _a.columnsMap;
        var filterable = extendedColumns.some(function (c) { return Boolean(c.filter); }) || filterRow !== undefined;
        var FilterRow = filterRow || kendo_react_data_tools_1.FilterRow;
        var idPrefix = kendo_react_data_tools_1.tableKeyboardNavigationTools.getIdPrefix(this.navigationStateRef);
        this.columnResize.columns = extendedColumns;
        this.columnResize.resizable = resizable;
        this.dragLogic.columns = extendedColumns;
        this.dragLogic.reorderable = reorderable;
        this.dragLogic.groupable = false;
        // already calculated in base view
        var leafColumns = extendedColumns.filter(function (c) { return c.children.length === 0; });
        var header = (React.createElement(kendo_react_data_tools_1.Header, { headerRow: React.createElement(kendo_react_data_tools_1.HeaderRow, { sort: this.props.sort, sortable: this.props.sortable, sortChange: this.onSortChange, selectionChange: this.onHeaderSelectionChange, columns: extendedColumns, columnsMap: columnsMap, cellRender: this.props.headerCellRender, columnResize: this.columnResize, columnMenu: this.props.columnMenu, columnMenuFilter: this.props.columnMenuFilter, columnMenuFilterChange: this.onColumnMenuFilterChange, pressHandler: this.dragLogic.pressHandler, dragHandler: this.dragLogic.dragHandler, releaseHandler: this.dragLogic.releaseHandler }), filterRow: filterable && React.createElement(FilterRow, { columns: leafColumns, filter: this.props.filter, filterChange: this.onFilterChange, sort: this.props.sort, ariaRowIndex: columnsMap.length + 1 }) || undefined, columnResize: this.columnResize }));
        var wrapperStyles = this.props.style || {};
        var _f = (0, kendo_react_data_tools_1.tableColumnsVirtualization)({
            enabled: this.props.columnVirtualization,
            columns: leafColumns,
            scrollLeft: this.wrapperScrollLeft,
            tableViewPortWidth: parseFloat((wrapperStyles.width || '').toString())
        }), colSpans = _f.colSpans, hiddenColumns = _f.hiddenColumns;
        var dataRow = function (item, inEdit, rowId, isRowExpanded, rowDataIndex, selectedValue) { return leafColumns.map(function (column, columnIndex) {
            if (hiddenColumns[columnIndex]) {
                return null;
            }
            var columnKey = column.id ? column.id : columnIndex;
            var className = "k-table-td ".concat(column.className ? column.className + ' ' : '')
                + "".concat(column.locked ? 'k-grid-content-sticky' : '');
            var cellProps = {
                id: kendo_react_data_tools_1.tableKeyboardNavigationTools.generateNavigatableId("".concat(rowId, "-").concat(String(columnIndex)), idPrefix),
                colSpan: colSpans[columnIndex],
                dataItem: item.dataItem,
                field: column.field,
                format: column.format,
                className: className || undefined,
                render: _this.props.cellRender,
                onChange: _this.onItemChange,
                selectionChange: (_this.props.onSelectionChange) ? (function (e) {
                    _this.onSelectionChange({ event: e, item: item, columnIndex: columnIndex, dataIndex: rowDataIndex });
                }) : undefined,
                level: item.level,
                expandable: column.expandable,
                expanded: isRowExpanded,
                hasChildren: (0, utils_1.hasChildren)(item.dataItem, _this.props.subItemsField),
                colIndex: columnIndex,
                ariaColumnIndex: column.ariaColumnIndex,
                onExpandChange: _this.onExpandChange,
                style: (column.left !== undefined) && {
                    left: column.left,
                    right: column.right,
                    borderRightWidth: column.rightBorder ? '1px' : ''
                } || {},
                isSelected: Array.isArray(selectedValue) && selectedValue.indexOf(columnIndex) > -1
            };
            if (inEdit && column.editCell) {
                return (React.createElement(column.editCell, __assign({}, cellProps, { onChange: _this.onItemChange, key: columnKey })));
            }
            if (column.cell) {
                return React.createElement(column.cell, __assign({ key: columnKey }, cellProps));
            }
            return React.createElement(kendo_react_treelist_1.TreeListCell, __assign({ key: columnKey }, cellProps));
        }); };
        var flattedData = this.flatData;
        var total = flattedData.length;
        if (skip !== undefined && take !== undefined) {
            flattedData = flattedData.slice(skip, skip + take);
        }
        if (scrollable === 'virtual') {
            flattedData = (0, kendo_react_treelist_1.tableRowsVirtualization)({
                rows: flattedData,
                tableViewPortHeight: parseFloat((wrapperStyles.height || wrapperStyles.maxHeight || '').toString()),
                scrollTop: this.wrapperScrollTop
            });
            this.updateOnScroll = false;
        }
        var levels = flattedData.map(function (i) { return i.level; });
        var rowIndexStart = columnsMap.length + (filterable ? 1 : 0) + 1;
        var body = flattedData.length > 0 && flattedData.map(function (item, rowIndex) {
            var inEdit = (0, kendo_react_common_1.getter)(_this.props.editField || '')(item.dataItem);
            var dataItemKeyValue = (0, kendo_react_common_1.getter)(_this.props.dataItemKey)(item.dataItem);
            var rowId = String(dataItemKeyValue ? dataItemKeyValue : item.level.join('.'));
            var isRowExpanded = (0, utils_1.isExpanded)(item.dataItem, _this.props.expandField);
            var selectedValue = _this.props.selectedField ? (0, kendo_react_common_1.getter)(_this.props.selectedField)(item.dataItem) : undefined;
            var rowProps = {
                key: rowId,
                level: item.level,
                levels: levels,
                dataItem: item.dataItem,
                selectedField: _this.props.selectedField,
                rowHeight: item.height,
                render: _this.props.rowRender,
                onDrop: _this.onRowDrop,
                onDrag: _this.onRowDrag,
                onClick: function (e) { return _this.onRowClick(e, item); },
                onDoubleClick: function (e) { return _this.rowDoubleClick(e, item); },
                onContextMenu: function (e) { return _this.rowContextMenu(e, item); },
                isAltRow: rowIndex % 2 !== 0,
                expanded: isRowExpanded,
                rowIndex: rowIndex,
                ariaRowIndex: rowIndexStart + rowIndex,
                ariaSetSize: item.levelCount,
                ariaPosInSet: item.level[item.level.length - 1] + 1,
                isSelected: typeof selectedValue === 'boolean' && selectedValue
            };
            var EditRow = _this.props.editRow;
            var Row = _this.props.row || kendo_react_treelist_1.TreeListRow;
            var cells = dataRow(item, inEdit, rowId, isRowExpanded, rowIndex, selectedValue);
            return inEdit && EditRow ?
                React.createElement(EditRow, __assign({}, rowProps), cells) :
                React.createElement(Row, __assign({}, rowProps), cells);
        }) || (React.createElement("tr", { className: "k-table-row k-grid-norecords" },
            React.createElement("td", { className: 'k-table-td', colSpan: leafColumns.length }, this.props.noRecords || React.createElement(kendo_react_treelist_1.TreeListNoRecords, null))));
        var sorted = function (field) {
            return _this.props.sort && _this.props.sort.some(function (descriptor) { return descriptor.field === field; });
        };
        var colGroups = (React.createElement("colgroup", { ref: function (c) { _this.columnResize.colGroupMain = c; } }, leafColumns.map(function (column, index) { return (React.createElement("col", { key: index.toString(), className: sorted(column.field) ? 'k-sorted' : undefined, style: column.width !== undefined ? { width: column.width } : undefined })); })));
        var virtualScroll = this.props.columnVirtualization || this.props.scrollable === 'virtual';
        var tableUserSelect = this.props.selectable && this.props.selectable.drag ? 'none' : undefined;
        var tableProps = (this.props.tableProps || {});
        return (React.createElement(kendo_react_data_tools_1.TableKeyboardNavigationContext.Provider, { value: this.contextStateRef.current },
            React.createElement("div", __assign({ style: this.props.style, className: (0, kendo_react_common_1.classNames)('k-grid k-grid-md', this.props.className, { 'k-treelist-scrollable': scrollable !== 'none' }), ref: function (e) { return _this.element = e; }, onScroll: virtualScroll ? this.onScroll : undefined, onKeyDown: this.onKeyDown, onFocus: this.onFocus, "aria-rowcount": total, "aria-colcount": leafColumns.length, role: 'treegrid' }, kendo_react_data_tools_1.tableKeyboardNavigationScopeAttributes),
                this.props.toolbar,
                React.createElement(kendo_react_data_tools_1.TableSelection, { selectable: this.props.selectable, onRelease: this.selectionRelease, childRef: function (table) {
                        _this.tableElement = table;
                    } },
                    React.createElement("table", __assign({ className: 'k-table k-table-md' }, (this.props.tableProps || {}), { style: __assign(__assign({}, (tableProps.style || {})), { userSelect: tableUserSelect }), role: 'presentation' }),
                        colGroups,
                        header,
                        React.createElement("tbody", __assign({ className: 'k-table-tbody' }, kendo_react_data_tools_1.tableKeyboardNavigationBodyAttributes, { ref: function (e) { return _this.tbodyElement = e; }, role: 'presentation' }), body))),
                this.props.pager && (React.createElement(this.props.pager, { className: "k-grid-pager", total: total, skip: skip, take: take, onPageChange: this.onPageChange })),
                reorderable && (React.createElement(React.Fragment, null,
                    React.createElement(kendo_react_data_tools_1.DropClue, { ref: this.dragLogic.refDropElementClue }),
                    React.createElement(kendo_react_data_tools_1.DragClue, { ref: this.dragLogic.refDragElementClue }))),
                afterContent)));
    };
    Object.defineProperty(GanttTreeList.prototype, "flatData", {
        get: function () {
            var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, _c = _a.rowHeight, rowHeight = _c === void 0 ? 0 : _c;
            var offsetTop = 0;
            var itemDataMap = function () {
                var result = { height: rowHeight, offsetTop: offsetTop };
                offsetTop += result.height;
                return result;
            };
            var flattedData = (this.updateOnScroll &&
                this.prevData === data &&
                this.tbodyOffsetTop > 0 &&
                this.flattedData.length) ?
                this.flattedData :
                data.map(function (item) { return (__assign(__assign({}, item), itemDataMap())); });
            this.prevData = data;
            this.flattedData = flattedData;
            return flattedData;
        },
        enumerable: false,
        configurable: true
    });
    GanttTreeList.prototype.onSelectionChange = function (options) {
        if (this.props.onSelectionChange) {
            var event_1 = options.event, item = options.item, dataIndex = options.dataIndex, columnIndex = options.columnIndex;
            var _a = (0, kendo_react_data_tools_1.getSelectionOptions)(this.props.selectable), mode = _a.mode, cell = _a.cell;
            var selectionEvent = __assign(__assign({}, this.getEventArguments(event_1.syntheticEvent)), { dataItem: item.dataItem, level: item.level, startColIndex: columnIndex, endColIndex: columnIndex, startRowIndex: dataIndex, endRowIndex: dataIndex, dataItems: this.getLeafDataItems(), altKey: false, ctrlKey: false, shiftKey: false, metaKey: false, mode: mode, cell: cell, isDrag: false, componentId: this._treeListId, selectedField: this.props.selectedField || '' });
            this.props.onSelectionChange.call(undefined, selectionEvent);
        }
    };
    /**
     * @hidden
     */
    GanttTreeList.propTypes = {
        data: PropTypes.array,
        resizable: PropTypes.bool,
        reorderable: PropTypes.bool,
        sortable: PropTypes.oneOfType([
            PropTypes.bool,
            PropTypes.shape({
                mode: PropTypes.oneOf(['single', 'multiple']),
                allowUnsort: PropTypes.bool
            })
        ]),
        onSortChange: PropTypes.func,
        sort: PropTypes.array,
        columns: PropTypes.arrayOf(PropTypes.object),
        columnVirtualization: PropTypes.bool,
        filter: PropTypes.array,
        onFilterChange: PropTypes.func,
        filterRow: PropTypes.any,
        toolbar: PropTypes.any,
        noRecords: PropTypes.any,
        onExpandChange: PropTypes.func,
        expandField: PropTypes.string,
        subItemsField: PropTypes.string,
        selectedField: PropTypes.string,
        onSelectionChange: PropTypes.func,
        onHeaderSelectionChange: PropTypes.func,
        onRowClick: PropTypes.func,
        onItemChange: PropTypes.func,
        editField: PropTypes.string,
        scrollable: PropTypes.oneOf(['none', 'scrollable', 'virtual']),
        rowHeight: PropTypes.number,
        style: PropTypes.object,
        tableProps: PropTypes.object,
        pager: PropTypes.any,
        skip: PropTypes.number,
        take: PropTypes.number,
        onPageChange: PropTypes.func,
        onDataStateChange: PropTypes.func,
        onColumnResize: PropTypes.func,
        onColumnReorder: PropTypes.func,
        extendedColumns: PropTypes.arrayOf(PropTypes.object),
        columnsMap: PropTypes.arrayOf(PropTypes.array),
        dataItemKey: PropTypes.string.isRequired,
        afterContent: PropTypes.any,
        navigatable: PropTypes.bool,
        idPrefix: PropTypes.string
    };
    /** @hidden */
    GanttTreeList.contextType = kendo_react_data_tools_1.TableKeyboardNavigationContext;
    return GanttTreeList;
}(React.Component));
exports.GanttTreeList = GanttTreeList;
