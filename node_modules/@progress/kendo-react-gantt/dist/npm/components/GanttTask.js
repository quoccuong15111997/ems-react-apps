"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GanttTask = void 0;
var React = require("react");
var GanttContext_1 = require("./../context/GanttContext");
var utils_1 = require("../utils");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var GanttViewContext_1 = require("../context/GanttViewContext");
var useGanttTask_1 = require("../hooks/useGanttTask");
var constants_1 = require("../constants");
/** @hidden */
exports.GanttTask = React.forwardRef(function (props, ref) {
    var _a, _b;
    var range = (0, GanttContext_1.useGanttDateRangeContext)();
    var taskModelFields = (0, GanttContext_1.useGanttTaskModelFieldsContext)();
    var timelineWidth = (0, GanttViewContext_1.useGanttViewTimelineWidthContext)();
    var dependencyDrag = (0, GanttViewContext_1.useGanttViewDependencyDragContext)();
    var taskEvents = (0, GanttContext_1.useGanttTaskEventsContext)();
    var taskElementRef = React.useRef(null);
    var completeElementRef = React.useRef(null);
    (0, useGanttTask_1.useGanttTask)(props.dataItem, (0, kendo_react_common_1.getter)(taskModelFields.id)(props.dataItem), ref, taskElementRef);
    var slotElementRef = React.useRef(null);
    var taskId = (0, kendo_react_common_1.getter)(taskModelFields.id)(props.dataItem);
    var taskStart = (0, kendo_react_common_1.getter)(taskModelFields.start)(props.dataItem);
    var taskEnd = (0, kendo_react_common_1.getter)(taskModelFields.end)(props.dataItem);
    var taskTitle = (0, kendo_react_common_1.getter)(taskModelFields.title)(props.dataItem);
    var percentComplete = (0, kendo_react_common_1.getter)(taskModelFields.percentComplete)(props.dataItem);
    var taskChildren = (0, kendo_react_common_1.getter)(taskModelFields.children)(props.dataItem);
    var taskSelected = (0, kendo_react_common_1.getter)(taskModelFields.isSelected)(props.dataItem);
    var taskStartTime = taskStart && taskStart.getTime();
    var taskEndTime = taskEnd && taskEnd.getTime();
    var isSummaryTask = taskChildren && taskChildren.length;
    var isMilestone = !isSummaryTask && taskStartTime === taskEndTime;
    var display = taskStartTime && taskEndTime && (0, utils_1.isInRange)(range.start, range.end, taskStart, taskEnd);
    var _c = React.useState(false), visible = _c[0], setVisible = _c[1];
    var dependencyStartElementRef = React.useRef(null);
    var dependencyEndElementRef = React.useRef(null);
    (0, kendo_react_common_1.useDraggable)(dependencyStartElementRef, {
        onPress: dependencyDrag.onDependencyHandlePress,
        onDrag: dependencyDrag.onDependencyHandleDrag,
        onRelease: dependencyDrag.onDependencyHandleRelease
    });
    (0, kendo_react_common_1.useDraggable)(dependencyEndElementRef, {
        onPress: dependencyDrag.onDependencyHandlePress,
        onDrag: dependencyDrag.onDependencyHandleDrag,
        onRelease: dependencyDrag.onDependencyHandleRelease
    });
    var onClickHandler = React.useCallback(function (event) {
        if (taskEvents.onTaskClick) {
            taskEvents.onTaskClick({
                dataItem: props.dataItem,
                level: props.level,
                nativeEvent: event && event.nativeEvent,
                syntheticEvent: event,
                target: null
            });
        }
    }, [props.dataItem, props.level]);
    var onDoubleClickHandler = React.useCallback(function (event) {
        if (taskEvents.onTaskDoubleClick) {
            taskEvents.onTaskDoubleClick({
                dataItem: props.dataItem,
                level: props.level,
                nativeEvent: event && event.nativeEvent,
                syntheticEvent: event,
                target: null
            });
        }
    }, [props.dataItem, props.level]);
    var onContextMenuHandler = React.useCallback(function (event) {
        if (taskEvents.onTaskContextMenu) {
            taskEvents.onTaskContextMenu({
                dataItem: props.dataItem,
                level: props.level,
                nativeEvent: event && event.nativeEvent,
                syntheticEvent: event,
                target: null
            });
        }
    }, [props.dataItem, props.level]);
    var onRemoveHandler = React.useCallback(function (event) {
        if (taskEvents.onTaskRemoveClick) {
            taskEvents.onTaskRemoveClick({
                dataItem: props.dataItem,
                level: props.level,
                nativeEvent: event && event.nativeEvent,
                syntheticEvent: event,
                target: null
            });
        }
    }, [props.dataItem, props.level]);
    var position = React.useCallback(function () {
        var slotStart = range.start;
        var slotEnd = range.end;
        var slotElement = slotElementRef.current;
        var taskElement = taskElementRef.current;
        var completeElement = completeElementRef.current;
        if (!display || slotElement === null || taskElement === null) {
            return;
        }
        var pxPerMillisecond = slotElement.clientWidth / (slotEnd.getTime() - slotStart.getTime());
        var left = (taskStart.getTime() - slotStart.getTime()) * pxPerMillisecond;
        var width = (taskEnd.getTime() - taskStart.getTime()) * pxPerMillisecond;
        var top = (slotElement.offsetHeight - taskElement.offsetHeight) / 2;
        taskElement.style.left = "".concat(Math.round(isMilestone ? left - constants_1.MILESTONE_OFFSET : left), "px");
        taskElement.style.top = "".concat(Math.round(top), "px");
        if (!isMilestone) {
            taskElement.style.width = "".concat(Math.round(width), "px");
            if (completeElement !== null) {
                completeElement.style.width = "".concat(Math.round(width * (percentComplete || 0)), "px");
            }
        }
        setVisible(true);
    }, [range.start.getTime(), range.end.getTime(), taskStartTime, taskEndTime, display, percentComplete, timelineWidth]);
    React.useEffect(position, [position]);
    var taskStyles = {
        visibility: visible ? undefined : 'hidden',
        display: display ? undefined : 'none'
    };
    var dependencyDragStyles = {
        userSelect: 'none',
        display: dependencyDrag.draggedId === String(taskId) ? 'block' : undefined
    };
    return (React.createElement("td", { ref: slotElementRef, key: taskId, role: 'presentation' }, isMilestone ?
        (React.createElement("div", __assign({ "aria-hidden": true, className: (0, kendo_react_common_1.classNames)({
                'k-task': true,
                'k-task-milestone': true,
                'k-selected': taskSelected && !Array.isArray(taskSelected)
            }), style: taskStyles, ref: taskElementRef }, (_a = {}, _a[constants_1.TASK_ID_ATT] = taskId, _a), { onClick: onClickHandler, onDoubleClick: onDoubleClickHandler, onContextMenu: onContextMenuHandler }),
            React.createElement("div", { className: 'k-task-milestone-content' }),
            dependencyDrag.isEnabled &&
                (React.createElement("div", __assign({ className: 'k-task-dot k-task-start', ref: dependencyStartElementRef, style: dependencyDragStyles }, constants_1.DEPENDENCY_DRAG_HANDLE_START_ATT))),
            dependencyDrag.isEnabled &&
                (React.createElement("div", __assign({ className: 'k-task-dot k-task-end', ref: dependencyEndElementRef, style: dependencyDragStyles }, constants_1.DEPENDENCY_DRAG_HANDLE_FINISH_ATT))))) :
        (React.createElement("div", __assign({ "aria-hidden": true, className: (0, kendo_react_common_1.classNames)({
                'k-task': true,
                'k-task-summary': isSummaryTask,
                'k-task-single': !isSummaryTask,
                'k-selected': taskSelected && !Array.isArray(taskSelected)
            }), ref: taskElementRef, style: taskStyles }, (_b = {}, _b[constants_1.TASK_ID_ATT] = taskId, _b), { onClick: onClickHandler, onDoubleClick: onDoubleClickHandler, onContextMenu: onContextMenuHandler }),
            isSummaryTask ?
                (React.createElement("div", { className: 'k-task-summary-progress', ref: completeElementRef },
                    React.createElement("div", { className: 'k-task-summary-complete' }))) :
                (React.createElement("div", { className: 'k-task-complete', ref: completeElementRef })),
            !isSummaryTask && (React.createElement(React.Fragment, null,
                React.createElement("div", { className: 'k-task-content' }, taskTitle),
                taskEvents.onTaskRemoveClick ? (React.createElement("span", { className: 'k-task-actions' },
                    React.createElement("span", { onClick: onRemoveHandler, className: 'k-link k-task-delete', "aria-label": "Delete" },
                        React.createElement(kendo_react_common_1.IconWrap, { name: "x", icon: kendo_svg_icons_1.xIcon })))) : null)),
            dependencyDrag.isEnabled &&
                React.createElement("div", __assign({ className: 'k-task-dot k-task-start', ref: dependencyStartElementRef, style: dependencyDragStyles }, constants_1.DEPENDENCY_DRAG_HANDLE_START_ATT)),
            dependencyDrag.isEnabled &&
                React.createElement("div", __assign({ className: 'k-task-dot k-task-end', ref: dependencyEndElementRef, style: dependencyDragStyles }, constants_1.DEPENDENCY_DRAG_HANDLE_FINISH_ATT))))));
});
exports.GanttTask.displayName = 'KendoReactGanttTask';
