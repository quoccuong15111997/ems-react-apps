"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popover = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("./../package-metadata");
var kendo_react_popup_1 = require("@progress/kendo-react-popup");
var PopoverActionsBar_1 = require("./PopoverActionsBar");
var DEFAULT_POPOVER_ZINDEX = 12000;
var ZINDEX_POPOVER_STEP = 2000;
var CALLOUT_SIZE = 15;
var calloutPositions = {
    top: 'k-callout-s',
    left: 'k-callout-e',
    bottom: 'k-callout-n',
    right: 'k-callout-w'
};
var calloutFlippedPositions = {
    top: 'k-callout-n',
    left: 'k-callout-w',
    bottom: 'k-callout-s',
    right: 'k-callout-e'
};
var popupAlignByPosition = {
    top: { vertical: 'bottom', horizontal: 'center' },
    left: { vertical: 'center', horizontal: 'right' },
    bottom: { vertical: 'top', horizontal: 'center' },
    right: { vertical: 'center', horizontal: 'left' }
};
var anchorAlignByPosition = {
    top: { vertical: 'top', horizontal: 'center' },
    left: { vertical: 'center', horizontal: 'left' },
    bottom: { vertical: 'bottom', horizontal: 'center' },
    right: { vertical: 'center', horizontal: 'right' }
};
var getActionBar = function (children) {
    return React.Children.toArray(children).filter(function (child) { return child && child.type === PopoverActionsBar_1.PopoverActionsBar; });
};
var getContent = function (children) {
    return React.Children.toArray(children).filter(function (child) {
        return child && child.type !== PopoverActionsBar_1.PopoverActionsBar;
    });
};
/**
 * Represents the Popover component.
 */
exports.Popover = React.forwardRef(function (props, ref) {
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    var callout = props.callout, position = props.position, title = props.title, children = props.children, show = props.show, anchor = props.anchor, appendTo = props.appendTo, offset = props.offset, animate = props.animate, positionMode = props.positionMode, scale = props.scale, popoverClass = props.popoverClass, className = props.className, id = props.id, style = props.style, collision = props.collision, contentStyle = props.contentStyle, onPosition = props.onPosition, onClose = props.onClose, onOpen = props.onOpen;
    var _a = React.useState(false), flipped = _a[0], setFlipped = _a[1];
    var isVertical = position === 'top' || position === 'bottom';
    var margin = props.margin || {
        vertical: callout && isVertical ? CALLOUT_SIZE : 0,
        horizontal: callout && !isVertical ? CALLOUT_SIZE : 0
    };
    var popupAlign = popupAlignByPosition[position];
    var anchorAlign = anchorAlignByPosition[position];
    var zindexContext = React.useContext(kendo_react_common_1.ZIndexContext);
    var currentZindex = zindexContext ? zindexContext + ZINDEX_POPOVER_STEP : DEFAULT_POPOVER_ZINDEX;
    var popoverRef = React.useRef(null);
    React.useImperativeHandle(popoverRef, function () {
        return { props: props };
    });
    React.useImperativeHandle(ref, function () { return popoverRef.current; });
    var handlePosition = React.useCallback(function (e) {
        setTimeout(function () { return setFlipped(e.flipped); });
        if (onPosition) {
            var event_1 = { target: popoverRef.current, flipped: e.flipped, fitted: e.fitted };
            onPosition.call(undefined, event_1);
        }
    }, [onPosition, setFlipped]);
    var handleOpen = React.useCallback(function () {
        if (onOpen) {
            var event_2 = { target: popoverRef.current };
            onOpen.call(undefined, event_2);
        }
    }, [onOpen]);
    var handleClose = React.useCallback(function () {
        if (onClose) {
            var event_3 = { target: popoverRef.current };
            onClose.call(undefined, event_3);
        }
    }, [onClose]);
    var basePopupClass = { 'k-popover': true, 'k-popup': false };
    if (Array.isArray(popoverClass)) {
        popoverClass.forEach(function (currentClass) { return basePopupClass[currentClass] = true; });
    }
    else if (typeof popoverClass === 'object') {
        Object.keys(popoverClass)
            .forEach(function (key) {
            basePopupClass[key] = popoverClass[key];
        });
    }
    else if (popoverClass) {
        basePopupClass[popoverClass] = true;
    }
    var calloutClass = flipped ? calloutFlippedPositions[position] : calloutPositions[position];
    var popoverContent = React.useMemo(function () {
        return (React.createElement(React.Fragment, null,
            title && (React.createElement("div", { className: 'k-popover-header' }, title)),
            React.createElement("div", { className: "k-popover-body", style: contentStyle }, getContent(children)),
            getActionBar(children)));
    }, [children, contentStyle, title]);
    return (React.createElement(kendo_react_common_1.ZIndexContext.Provider, { value: currentZindex },
        React.createElement(kendo_react_popup_1.Popup, { id: id, role: 'tooltip', animate: animate, collision: collision, anchor: anchor, offset: offset, margin: margin, popupAlign: popupAlign, anchorAlign: anchorAlign, appendTo: appendTo, show: show, scale: scale, positionMode: positionMode, style: style, className: className, popupClass: basePopupClass, onOpen: handleOpen, onClose: handleClose, onPosition: handlePosition }, callout && position
            ? React.createElement(React.Fragment, null,
                React.createElement("div", { className: (0, kendo_react_common_1.classNames)('k-popover-callout', calloutClass) }),
                React.createElement("div", { className: 'k-popover-inner' }, popoverContent))
            : popoverContent)));
});
var defaultProps = {
    callout: true,
    position: 'top',
    collision: {
        horizontal: 'none',
        vertical: 'none'
    }
};
exports.Popover.propTypes = {
    callout: PropTypes.bool,
    title: PropTypes.node,
    position: PropTypes.oneOf(['top', 'left', 'bottom', 'right']),
    show: PropTypes.bool,
    animate: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.shape({
            openDuration: PropTypes.number,
            closeDuration: PropTypes.number
        })
    ]),
    anchor: function (props) {
        var anchor = props.anchor;
        if (anchor && typeof anchor.nodeType !== 'number') {
            return new Error('Invalid prop `anchor` supplied to `Kendo React Popover`. Validation failed.');
        }
        return null;
    },
    appendTo: function (props) {
        var element = props.appendTo;
        if (element && typeof element.nodeType !== 'number') {
            return new Error('Invalid prop `appendTo` supplied to `Kendo React Popover`. Validation failed.');
        }
        return null;
    },
    positionMode: PropTypes.oneOf([
        'fixed',
        'absolute'
    ]),
    scale: PropTypes.number,
    offset: PropTypes.shape({
        left: PropTypes.number,
        top: PropTypes.number
    }),
    children: PropTypes.oneOfType([
        PropTypes.element,
        PropTypes.node
    ]),
    className: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
        PropTypes.object
    ]),
    id: PropTypes.string,
    popoverClass: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.arrayOf(PropTypes.string),
        PropTypes.object
    ]),
    style: PropTypes.object,
    onClose: PropTypes.func,
    onPosition: PropTypes.func,
    onOpen: PropTypes.func
};
exports.Popover.defaultProps = defaultProps;
exports.Popover.displayName = 'KendoReactPopover';
