/// <reference types="react" />
import { PopoverCollision } from './PopoverCollision';
import { PopoverMargin } from './PopoverMargin';
import { PopoverOffset } from './PopoverOffset';
import { PopoverOpenEvent } from './PopoverOpenEvent';
import { PopoverCloseEvent } from './PopoverCloseEvent';
import { PopoverAnimation } from './PopoverAnimation';
import { PopoverPosition } from './PopoverPosition';
import { PopoverPositionEvent } from './PopoverPositionEvent';
import { PopoverPositionMode } from './PopoverPositionMode';
export interface PopoverProps {
    /**
     * Specifies the title of the Popover component.
     */
    title?: React.ReactNode;
    /**
     * Specifies the position of the Popover element relative to the current anchor or offset.
     */
    position?: PopoverPosition;
    /**
     * Controls the Popover callout element. If set to `false`, the callout element will not be rendered.
     */
    callout?: boolean;
    /**
     * Controls the Popover animation. By default, the opening and closing animations are enabled.
     */
    animate?: boolean | PopoverAnimation;
    /**
     * Specifies the element which will be used as an anchor. The Popover opens next to that element.
     */
    anchor?: HTMLElement | null;
    /**
     * Defines the container to which the Popover will be appended. Defaults to [`body`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body).
     * * If set to `null` the Popover will be rendered without React Portal.
     */
    appendTo?: HTMLElement | null;
    /**
     * Configures the collision behavior of the Popover. By default, it's set to `none`.
     */
    collision?: PopoverCollision;
    /**
     * Configures the margin value that will be added to the Popover dimensions
     * in pixels and leaves a blank space between the Popover and the anchor.
     * By default, it's automatically set based on the Popover position prop.
     *
     */
    margin?: PopoverMargin;
    /**
     * Specifies the position mode of the component. By default, the Popover uses fixed positioning.
     * To make the Popover acquire absolute positioning, set this option to `absolute`.
     *
     * > If you need to support mobile browsers with the zoom option, use the `absolute` positioning of the Popover.
     */
    positionMode?: PopoverPositionMode;
    /**
     * Used to set the document scale when using a [scale transform](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale).
     *
     * The document or container scale is required to compute the popover position correctly. Detecting the scale is not reliable and must be set by providing a value for SCALE.
     *
     * > Using this token is not necessary for user-applied browser zoom.
     *
     */
    scale?: number;
    /**
     * Specifies the absolute position of the element.
     * The Popover opens next to that point. The pivot point of the Popover is defined by the `position` configuration option.
     * The boundary detection is applied by using the window viewport.
     */
    offset?: PopoverOffset;
    /**
     * Specifies a list of CSS classes that will be added to the internal animated element.
     */
    popoverClass?: string | Array<string> | {
        [key: string]: boolean;
    };
    /**
     * Specifies a list of CSS classes that will be added to the Popover element.
     */
    className?: string | Array<string>;
    /**
     * Specifies the id that will be added to the Popover element.
     */
    id?: string;
    /**
     * Represents the styles that are applied to the Popover.
     */
    style?: React.CSSProperties;
    /**
     * Represents the styles that are applied to the content element of the Popover.
     */
    contentStyle?: React.CSSProperties;
    /**
     * Controls the Popover visibility. Defaults to `false`.
     */
    show?: boolean;
    /**
     * Fires after the Popover is opened and the opening animation ends.
     */
    onOpen?: (event: PopoverOpenEvent) => void;
    /**
     * Fires after the Popover is closed.
     */
    onClose?: (event: PopoverCloseEvent) => void;
    /**
     * Fires after the Popover position is set.
     */
    onPosition?: (event: PopoverPositionEvent) => void;
    /**
     * @hidden
     */
    children?: React.ReactNode;
}
